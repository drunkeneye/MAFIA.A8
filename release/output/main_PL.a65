; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.2 [2025/02/06] for MOS 6502 CPU
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $0C00

TRUE		= 1
FALSE		= 0
EOL		= $9B
__BUFFER	= $0400
@BUF		= __BUFFER

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2
bp3	= bp+1

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCASM 'dlists/dlist_console.asm' DL_CONSOLE_ADR 0 0 0 0 0 0 0 0
	RCASM 'dlists/dlist_black_console.asm' DL_BLACK_CONSOLE_ADR 0 0 0 0 0 0 0 0
	RCASM 'dlists/dlist_map.asm' DL_MAP_ADR 0 0 0 0 0 0 0 0
	RCASM 'dlists/dlist_bitmap.asm' DL_BITMAP_ADR 0 0 0 0 0 0 0 0
	RCDATA '../assets/player.pmg' PMG_BASE_ADR 0 0 0 0 0 0 0 0
	RCDATA '../assets/mafia.fnt' MAINFONT_ADR 0 0 0 0 0 0 0 0
	RCASM 'dlists/dlist_black_console.asm' TXT_ADDRESS 0 0 0 0 0 0 0 0
	RMTPLAY2 '../music/sfx_s.feat' RMT_PLAYER 0 0 0 0 0 0 0 0
	RMT '../music/sfx_s.rmt' RMT_MODUL 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00					; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_00EA

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000002  -------------------

	ldy #0
	mva (:edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl

.local	DPEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000003  -------------------

	ldy #0
	mva (:edx),y Result
	iny
	mva (:edx),y Result+1

@exit

; ------------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000025  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	lda :STACKORIGIN+STACKWIDTH,x
	sta VALUE+1
	dex
@main

; -------------------  ASM Block 00000026  -------------------

	ldy #0
	mva value (:edx),y
	iny
	mva value+1 (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLCHAR					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018600001810000188000

	.MACRO m@INLINE

; -------------------  ASM Block 00000027  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX

@exit
.endl
.endl							; overload

.local	FILLCHAR					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018000001810000188000

	.MACRO m@INLINE

; -------------------  ASM Block 00000028  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX

@exit
.endl
.endl							; overload

.local	FILLCHAR					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018000001810000300000

	.MACRO m@INLINE

; -------------------  ASM Block 00000031  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX

@exit
.endl
.endl							; overload

.local	MOVE						; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018100001880000188000

	.MACRO m@INLINE

; -------------------  ASM Block 00000034  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX

@exit
.endl
.endl							; overload

.local	MOVE						; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018100001880000300000

	.MACRO m@INLINE

; -------------------  ASM Block 00000036  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX

@exit
.endl
.endl							; overload

.local	RANDOMIZE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000045  -------------------


  mva $d20a RndSeed
  mva #$00  RndSeed+1


@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
.local	@010180000
	sta RANGE

; -------------------  ASM Block 00000049  -------------------


;BYTE FUNC Rand(BYTE range)
; returns random number between 0 and
; range-1.  If range=0, then a random
; number between 0 and 255 is returned

  ldy $d20a   ; RANDOM

  lda range
  beq stop

  sta :ecx
  sty :eax

  jsr imulCL
  tay

stop  sty Result


@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000C

@VarData	= RANGE
@VarDataSize	= 1

	rts						; ret
.endl
.endl							; overload

.local	RANDOM						; FUNCTION | OVERLOAD
.local	@010184000

; optimize OK (system_atari.inc), line = 179

	lda RANGE+1
	ora RANGE
	jne l_0184

; optimize OK (system_atari.inc), line = 180

	lda #$00
	sta RESULT
	sta RESULT+1
	jmp l_0192
l_0184

; optimize OK (system_atari.inc), line = 183

	lda RNDSEED
	sta :ecx
	lda RNDSEED+1
	sta :ecx+1
	lda #$95
	sta :eax
	lda #$45
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta RNDSEED
	lda :eax+1
	sta RNDSEED+1

; optimize OK (system_atari.inc), line = 184

	lda RANGE
	sta @SMALLINT.MOD.B
	lda RANGE+1
	sta @SMALLINT.MOD.B+1
	lda RNDSEED
	sta @SMALLINT.MOD.A
	lda RNDSEED+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta RESULT
	lda @SMALLINT.MOD.RESULT+1
	sta RESULT+1

; -------------------  ASM Block 00000050  -------------------

	lda range+1
	bpl plus

	lda Result+1
	bmi ok
	bpl sign

plus	lda Result+1
	bpl ok

sign 	lda #0
	sub Result
	sta Result

	lda #0
	sbc Result+1
	sta Result+1
ok

l_0192
@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$000D
RESULT	= DATAORIGIN+$000F

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl
.endl							; overload

.local	CONCAT						; FUNCTION | ASSEMBLER | OVERLOAD
.local	@0201898600189860

; -------------------  ASM Block 00000053  -------------------

	cpw a #@buf
	beq skp

	mva #0 @buf
	@addString a
skp
	@addString b

	ldy #0
	mva:rne @buf,y adr.Result,y+

@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$0011
B	= DATAORIGIN+$0013
adr.RESULT	= [DATAORIGIN+$0015] .array [256]
.var RESULT	= adr.RESULT .word

@VarData	= A
@VarDataSize	= 260

	rts						; ret
.endl
.endl							; overload

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000060  -------------------

	.ifdef @CmdLine

	ldx #$0F
	mva:rpl $340,x IOCB@COPY,x-
	rts

IOCB@COPY	:16 brk
	eif


	rts

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
__PORTB_BANKS	= $0101
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
DATESEPARATOR	= DATAORIGIN+$0000
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0001
GRAPHMODE	= DATAORIGIN+$0002
IORESULT	= DATAORIGIN+$0003
EOLN	= DATAORIGIN+$0004
SCREENWIDTH	= DATAORIGIN+$0005
SCREENHEIGHT	= DATAORIGIN+$0007
adr.MEM	= $00
.var MEM	= adr.MEM .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_JMP	= $01
DL_JVB	= $41
DL_MODE_GR15	= $0E
DL_MODE_GR8	= $0F
IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBAK	= $D01A
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	MATH						; UNIT

; ------------------------------------------------------------

.endl							; UNIT MATH

; ------------------------------------------------------------

.local	PMG						; UNIT

; ------------------------------------------------------------

_P_MAX	= $0E
_M0_MAX	= $02
_M1_MAX	= $00
_M2_MAX	= $03
_M3_MAX	= $04
_PM_NORMAL_SIZE	= $00
_PM_DOUBLE_SIZE	= $01
_PM_QUAD_SIZE	= $03
_PM_SHOW_ON	= $03
_PM_SHOW_OFF	= $00
_PM_DOUBLE_RES	= $01
_PM_SINGLE_RES	= $02
adr.P_DATA	= [DATAORIGIN+$0115] .array [4] .word
.var P_DATA	= adr.P_DATA .word
adr.M_DATA	= [DATAORIGIN+$011D] .array [4] .word
.var M_DATA	= adr.M_DATA .word
PM_MEM	= DATAORIGIN+$0125
PM_OFFSET	= DATAORIGIN+$0127
PM_TOP	= DATAORIGIN+$0129
PM_SIZE	= DATAORIGIN+$012A

.endl							; UNIT PMG

; ------------------------------------------------------------

.local	XBIOS						; UNIT

.local	XBIOSOPENFILE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000063  -------------------


    txa:pha
    mva #0 xBiosIOresult
    sta xBiosIOerror
    ldy filename
    ldx filename+1
    iny
    sne
    inx
    jsr xBIOS_OPEN_FILE
    bcc @+
    stx xBiosIOerror
    mva #1 xBiosIOresult 
@   pla:tax

; ------------------------------------------------------------

FILENAME	= DATAORIGIN+$0132

@VarData	= FILENAME
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	XBIOSLOADDATA					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000064  -------------------


    txa:pha
    mva #0 xBiosIOresult
    sta xBiosIOerror
    ldy dest
    ldx dest+1
    jsr xBIOS_LOAD_DATA
    bcc @+
    stx xBiosIOerror
    mva #1 xBiosIOresult 
@   pla:tax

; ------------------------------------------------------------

DEST	= DATAORIGIN+$0134

@VarData	= DEST
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	XBIOSGETBYTE					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000068  -------------------


    txa:pha
    mva #0 xBiosIOresult
    sta xBiosIOerror
    jsr xBIOS_GET_BYTE  
    sta result
    bcc @+
    stx xBiosIOerror
    mva #1 xBiosIOresult 
@   pla:tax

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0136

	rts						; ret
.endl

; ------------------------------------------------------------

XBIOSIORESULT	= DATAORIGIN+$012C
XBIOSIOERROR	= DATAORIGIN+$012D
XBIOSDIRENTRYINDEX	= DATAORIGIN+$012E
XBIOSDIRENTRYSTATUS	= DATAORIGIN+$012F
XBIOSDIRENTRYSECTOR	= DATAORIGIN+$0130
XBIOS_ADDRESS	= $0800
XBIOS_VERSION	= $0802
XBIOS_RENAME_ENTRY	= $0803
XBIOS_LOAD_FILE	= $0806
XBIOS_OPEN_FILE	= $0809
XBIOS_LOAD_DATA	= $080C
XBIOS_WRITE_DATA	= $080F
XBIOS_OPEN_CURRENT_DIR	= $0812
XBIOS_GET_BYTE	= $0815
XBIOS_PUT_BYTE	= $0818
XBIOS_FLUSH_BUFFER	= $081B
XBIOS_SET_LENGTH	= $081E
XBIOS_SET_INIAD	= $0821
XBIOS_SET_FILE_OFFSET	= $0824
XBIOS_SET_RUNAD	= $0827
XBIOS_SET_DEFAULT_DEVICE	= $082A
XBIOS_OPEN_DIR	= $082D
XBIOS_LOAD_BINARY_FILE	= $0830
XBIOS_OPEN_DEFAULT_DIR	= $0833
XBIOS_SET_DEVICE	= $0836
XBIOS_RELOCATE_BUFFER	= $0839
XBIOS_GET_ENTRY	= $083C
XBIOS_OPEN_DEFAULT_FILE	= $083F
XBIOS_READ_SECTOR	= $0842
XBIOS_FIND_ENTRY	= $0845
XBIOS_SET_BUFFER_SIZE	= $0848
XDIRSIZE	= $0BE5
XSPEED	= $0BE6
XHSPEED	= $0BE7
XIRQEN	= $0BE8
XAUDCTL	= $0BE9
XFILE	= $0BEA
XDIR	= $0BEC
XIOV	= $0BEE
XBUFFERH	= $0BF0
XBUFSIZE	= $0BF1
XDAUX3	= $0BF2
XSEGMENT	= $0BF3
XNOTE	= $0BF5
XNOTEH	= $0BF7
XDEVICE	= $0BFC
XDCMD	= $0BFD
XDAUX1	= $0BFE
XDAUX2	= $0BFF

.endl							; UNIT XBIOS

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$0137
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	B_UTILS						; UNIT

; ------------------------------------------------------------

BASE64CHARS	= DATAORIGIN+$0138
adr.BASE64INV	= [DATAORIGIN+$013A] .array [128]
.var BASE64INV	= adr.BASE64INV .word

.endl							; UNIT B_UTILS

; ------------------------------------------------------------

.local	MISC						; UNIT

.local	DETECTANTIC					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000099  -------------------


// ANTIC PAL Test for Atari 8-bits
// (C) 2019 Guillermo Fuenzalida

antic_loop1
	lda vcount
	cmp #100
	bcc antic_loop1		// wait till scanline 200
	sta scanline
antic_loop2
	lda vcount
	cmp #10
	bmi antic_loop2_fin
	cmp scanline
	bmi antic_loop2
	sta scanline
	bpl antic_loop2

antic_loop2_fin
	ldy #$00
	lda #0
scanline equ *-1
	cmp #135
	bmi ntsc
	iny
ntsc
	sty Result


@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01BA

	rts						; ret
.endl

; ------------------------------------------------------------

adr.BANKS	= $0101
.var BANKS	= adr.BANKS .word
DETECTOS	= $FFF7

.endl							; UNIT MISC

; ------------------------------------------------------------

.local	RMT						; UNIT

.local	TRMT.INIT					; PROCEDURE | ASSEMBLER
	sta TRMT
	sty TRMT+1
	sta PLAYER
	sty PLAYER+1
	add #2
	scc
	iny
	sta MODUL
	sty MODUL+1

; -------------------  ASM Block 00000109  -------------------

	txa:pha

	mwa TRMT :bp2

	ldy #1
	lda (:bp2),y
	sta adr+2

	iny
	lda (:bp2),y
	tax		; low byte of RMT module to X reg
	iny
	lda (:bp2),y
	tay		; hi byte of RMT module to Y reg

	lda a		; starting song line 0-255 to A reg
adr	jsr $ff03	; jsr player+3

	pla:tax

; ------------------------------------------------------------

TRMT	= DATAORIGIN+$01BC
A	= DATAORIGIN+$01BE
PLAYER	= DATAORIGIN+$01BF
MODUL	= DATAORIGIN+$01C1

@VarData	= TRMT
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TRMT.PLAY					; PROCEDURE | ASSEMBLER
	sta TRMT
	sty TRMT+1
	sta PLAYER
	sty PLAYER+1
	add #2
	scc
	iny
	sta MODUL
	sty MODUL+1

; -------------------  ASM Block 00000111  -------------------

	txa:pha

	asl ntsc		; =0 PAL, =4 NTSC
	bcc skp

	lda #%00000100
	sta ntsc

	bne quit
skp
	mwa TRMT adr+1

	ldy #1
adr	lda $ffff,y
	sta ptr+2

ptr	jsr $ff00		; jmp (TRMT)	6502 buggy indirect jump

quit	pla:tax

; ------------------------------------------------------------

TRMT	= DATAORIGIN+$01C7
PLAYER	= DATAORIGIN+$01C9
MODUL	= DATAORIGIN+$01CB

@VarData	= TRMT
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TRMT.STOP					; PROCEDURE | ASSEMBLER
	sta TRMT
	sty TRMT+1
	sta PLAYER
	sty PLAYER+1
	add #2
	scc
	iny
	sta MODUL
	sty MODUL+1

; -------------------  ASM Block 00000112  -------------------

	txa:pha

	mwa TRMT :bp2

	ldy #1
	lda (:bp2),y
	sta adr+2

adr	jsr $ff09	; jsr player+9

	pla:tax

; ------------------------------------------------------------

TRMT	= DATAORIGIN+$01CD
PLAYER	= DATAORIGIN+$01CF
MODUL	= DATAORIGIN+$01D1

@VarData	= TRMT
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize FAIL ('MISC.DETECTANTIC', RMT), line = 159

	jsr MISC.DETECTANTIC
	lda MISC.DETECTANTIC.RESULT
	jeq l_0244

; optimize OK (RMT), line = 160

	lda #$00
	jmp l_0252
l_0244

; optimize OK (RMT), line = 162

	lda #$04
l_0252
	sta NTSC

	rts

; ------------------------------------------------------------

NTSC	= DATAORIGIN+$01BB

.endl							; UNIT RMT

; ------------------------------------------------------------

.local	DOS						; UNIT

; ------------------------------------------------------------

PALNTSC	= $D014

.endl							; UNIT DOS

; ------------------------------------------------------------

.local	STRUTILS					; UNIT

; ------------------------------------------------------------

.endl							; UNIT STRUTILS

; ------------------------------------------------------------

.local	SYSUTILS					; UNIT

.local	INTTOSTR					; FUNCTION | ASSEMBLER | OVERLOAD
.local	@010185000

; ------------------------------------------------------------

; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta A+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta A+3
	dex
@main

; -------------------  ASM Block 00000126  -------------------

	txa:pha

	inx

	@ValueToStr #@printINT

	ldx #$20
	mva:rpl @buf,x adr.Result,x-

	pla:tax

@exit

; ------------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= DATAORIGIN+$01D3
adr.RESULT	= [DATAORIGIN+$01D7] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= A
@VarDataSize	= 37

	rts						; ret
.endl
.endl							; overload

.local	INTTOSTR					; FUNCTION | ASSEMBLER | OVERLOAD
.local	@010182000

; ------------------------------------------------------------

; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta A+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta A+3
	dex
@main

; -------------------  ASM Block 00000127  -------------------

	txa:pha

	inx

	@ValueToStr #@printCARD

	ldx #$20
	mva:rpl @buf,x adr.Result,x-

	pla:tax

@exit

; ------------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= DATAORIGIN+$01F8
adr.RESULT	= [DATAORIGIN+$01FC] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= A
@VarDataSize	= 37

	rts						; ret
.endl
.endl							; overload

; ------------------------------------------------------------

FAREADONLY	= $01
FAHIDDEN	= $02
FASYSFILE	= $04
FAVOLUMEID	= $08
FADIRECTORY	= $10
FAARCHIVE	= $20
FAANYFILE	= $3F

.endl							; UNIT SYSUTILS

; ------------------------------------------------------------

.local	B_SYSTEM					; UNIT

.local	SYSTEMOFF					; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@010180000
	sta PORT_B

; -------------------  ASM Block 00000133  -------------------


		;lda:cmp:req 20 ;; removed due to problem with nmien = 0 already set
		sei
		mva #0 NMIEN

		mva port_b PORTB
		mwa #__nmi NMIVEC

		lda <__iret
		sta IRQVEC
		sta __vblvec
		sta __dlivec

		lda >__iret
		sta IRQVEC+1
		sta __vblvec+1
		sta __dlivec+1

		mva #$40 NMIEN
		sta __nmien
		bne __stop
__nmi
		bit NMIST
		bpl __vbl
		jmp __dlivec
.def :__dlivec = *-2
		rti
__vbl
		inc rtclok+2
		bne __vblvec-1
		inc rtclok+1
		bne __vblvec-1
		inc rtclok
		jmp __vblvec
.def :__vblvec = *-2
.def :__iret
    	rti
__stop

; ------------------------------------------------------------

PORT_B	= DATAORIGIN+$021E

@VarData	= PORT_B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	SYSTEMOFF					; PROCEDURE | OVERLOAD
.local	@00

; optimize OK (B_SYSTEM), line = 180

	lda #$FE
	jsr SYSTEMOFF.@010180000

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	ENABLEDLI					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000140  -------------------


		lda:cmp:req 20
		mva #0 NMIEN
		mwa dliptr __dlivec
		mva #$c0 NMIEN
		sta __nmien

; ------------------------------------------------------------

DLIPTR	= DATAORIGIN+$021F

@VarData	= DLIPTR
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DISABLEDLI					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000141  -------------------


		lda:cmp:req 20
		mva #$40 NMIEN
		sta __nmien

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAITFRAME					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000142  -------------------


    lda:cmp:req rtclok+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAITFRAMES					; PROCEDURE
	sta FRAMES

; --- WhileProlog
	jmp l_02AA
l_02AB

; optimize FAIL ('WAITFRAME', B_SYSTEM), line = 269

	jsr WAITFRAME

; optimize FAIL (0, B_SYSTEM), line = 270

	dec FRAMES
l_02AA

; optimize OK (B_SYSTEM), line = 268

	lda FRAMES
	jne l_02AB

; ------------------------------------------------------------

FRAMES	= DATAORIGIN+$0221

@VarData	= FRAMES
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETCHARSET					; PROCEDURE
	sta MSB

; optimize OK (B_SYSTEM), line = 276

	sta ATARI.CHBASE

; ------------------------------------------------------------

MSB	= DATAORIGIN+$0222

@VarData	= MSB
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

__NMIEN	= DATAORIGIN+$021D
PORTB_SELFTEST_OFF	= $80
PORTB_BASIC_OFF	= $02
PORTB_SYSTEM_ON	= $01

.endl							; UNIT B_SYSTEM

; ------------------------------------------------------------

.local	B_CRT						; UNIT

.local	ATASCII2ANTIC					; FUNCTION | OVERLOAD
.local	@010180000
	sta C

; -------------------  ASM Block 00000143  -------------------


        lda c
        asl
        php
        cmp #2*$60
        bcs @+
        sbc #2*$20-1
        bcs @+
        adc #2*$60
@       plp
        ror
        sta result;
    
@exit

; ------------------------------------------------------------

C	= DATAORIGIN+$022C
RESULT	= DATAORIGIN+$022D

@VarData	= C
@VarDataSize	= 1

	rts						; ret
.endl
.endl							; overload

.local	ATASCII2ANTIC					; FUNCTION | OVERLOAD
.local	@0101898600000100

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	dex
@main

; optimize OK (B_CRT), line = 468

	lda adr.S
	sta adr.RESULT

; optimize OK (B_CRT), line = 469

	lda #$01
	sta I
	mva adr.S @FORTMP_02E2_0

l_02E5
; --- ForToDoCondition
	lda @FORTMP_02E2_0::#$00
	cmp I
	jcc l_02F3

; optimize FAIL (1, B_CRT), line = 470

	inx
	mva I :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	ldy I
	lda adr.S,y
	jsr ATASCII2ANTIC.@010180000
	ldy :STACKORIGIN,x
	lda ATASCII2ANTIC.@010180000.RESULT
	sta adr.RESULT,y
	dex

; --- ForToDoEpilog
	inc I
	jne l_02E5
l_02F3
@exit

; ------------------------------------------------------------

adr.S	= [DATAORIGIN+$022E] .array [256]
.var S	= adr.S .word
adr.RESULT	= [DATAORIGIN+$032E] .array [256]
.var RESULT	= adr.RESULT .word
I	= DATAORIGIN+$042E

@VarData	= S
@VarDataSize	= 513

	rts						; ret
.endl
.endl							; overload

.local	CRT_INIT					; PROCEDURE | OVERLOAD
.local	@03018000001800000181000

; optimize OK (B_CRT), line = 483

	lda VRAM_ADDRESS
	sta CRT_VRAM
	lda VRAM_ADDRESS+1
	sta CRT_VRAM+1

; optimize OK (B_CRT), line = 484

	lda WIDTH
	sta CRT_SCREENWIDTH

; optimize OK (B_CRT), line = 485

	lda HEIGHT
	sta CRT_SCREENHEIGHT

; optimize OK (B_CRT), line = 486

	sta :ecx
	lda WIDTH
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta CRT_SIZE+1
	lda :eax
	sta CRT_SIZE

; optimize OK (B_CRT), line = 487

	lda CRT_VRAM
	sta CRT_CURSOR
	lda CRT_VRAM+1
	sta CRT_CURSOR+1

; optimize OK (B_CRT), line = 488

	lda #$00
	sta CRT_LEFTMARGIN

; ------------------------------------------------------------

VRAM_ADDRESS	= DATAORIGIN+$0430
WIDTH	= DATAORIGIN+$0432
HEIGHT	= DATAORIGIN+$0433

@VarData	= VRAM_ADDRESS
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	CRT_CLEAR					; PROCEDURE | OVERLOAD
.local	@00

; optimize OK (B_CRT), line = 504

	lda CRT_VRAM
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A
	lda CRT_VRAM+1
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A+1
	lda CRT_SIZE
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT
	lda CRT_SIZE+1
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@03018000001810000188000
	m@INLINE
	.ENDL

; optimize OK (B_CRT), line = 505

	lda CRT_VRAM
	sta CRT_CURSOR
	lda CRT_VRAM+1
	sta CRT_CURSOR+1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	CRT_GOTOXY					; PROCEDURE

; optimize OK (B_CRT), line = 516

	lda CRT_SCREENWIDTH
	sta :ecx
	lda Y
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add X
	sta :STACKORIGIN+9
	lda :eax+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add CRT_VRAM
	sta CRT_CURSOR
	lda :STACKORIGIN+STACKWIDTH+9
	adc CRT_VRAM+1
	sta CRT_CURSOR+1

; ------------------------------------------------------------

X	= DATAORIGIN+$0434
Y	= DATAORIGIN+$0435

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WHEREY					; FUNCTION

; optimize OK (B_CRT), line = 521

	lda CRT_CURSOR
	sub CRT_VRAM
	sta @WORD.DIV.A
	lda CRT_CURSOR+1
	sbc CRT_VRAM+1
	sta @WORD.DIV.A+1
	lda CRT_SCREENWIDTH
	sta @WORD.DIV.B
	lda #$00
	sta @WORD.DIV.B+1
	jsr @WORD.DIV
	lda :eax
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0436

	rts						; ret
.endl

.local	CRT_WHEREX					; FUNCTION

; optimize OK (B_CRT), line = 526

	lda CRT_CURSOR
	sub CRT_VRAM
	sta @WORD.MOD.A
	lda CRT_CURSOR+1
	sbc CRT_VRAM+1
	sta @WORD.MOD.A+1
	lda CRT_SCREENWIDTH
	sta @WORD.MOD.B
	lda #$00
	sta @WORD.MOD.B+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0437

	rts						; ret
.endl

.local	CRT_WRITE					; PROCEDURE | OVERLOAD
.local	@0101898600000100

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	dex
@main

; optimize OK (B_CRT), line = 531

	lda adr.S
	sta SYSTEM.MOVE.@03018100001880000300000.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE.@03018100001880000300000.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE.@03018100001880000300000.SOURCE+1
	lda CRT_CURSOR
	sta SYSTEM.MOVE.@03018100001880000300000.DEST
	lda CRT_CURSOR+1
	sta SYSTEM.MOVE.@03018100001880000300000.DEST+1
	lda #$00
	sta SYSTEM.MOVE.@03018100001880000300000.COUNT+1
	.LOCAL +MAIN.SYSTEM.MOVE.@03018100001880000300000
	m@INLINE
	.ENDL

; optimize OK (B_CRT), line = 532

	lda adr.S
	add CRT_CURSOR
	sta CRT_CURSOR
	lda CRT_CURSOR+1
	adc #$00
	sta CRT_CURSOR+1

; ------------------------------------------------------------

adr.S	= [DATAORIGIN+$0438] .array [256]
.var S	= adr.S .word

@VarData	= S
@VarDataSize	= 256

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	CRT_WRITE					; PROCEDURE | OVERLOAD
.local	@010186000
	sta C

; optimize OK (B_CRT), line = 537

	ldy CRT_CURSOR+1
	sty :bp+1
	ldy CRT_CURSOR
	lda C
	sta (:bp),y

; optimize FAIL (0, B_CRT), line = 538

	inc CRT_CURSOR
	sne
	inc CRT_CURSOR+1

; ------------------------------------------------------------

C	= DATAORIGIN+$0538

@VarData	= C
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	CRT_WRITE					; PROCEDURE | OVERLOAD
.local	@010180000
	sta NUM

; optimize FAIL ('SYSUTILS.INTTOSTR.@010182000', B_CRT), line = 543

	inx
	mva NUM :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	jsr SYSUTILS.INTTOSTR.@010182000
	jsr ATASCII2ANTIC.@0101898600000100
	inx
	mva ATASCII2ANTIC.@0101898600000100.RESULT :STACKORIGIN,x
	mva ATASCII2ANTIC.@0101898600000100.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITE.@0101898600000100

; ------------------------------------------------------------

NUM	= DATAORIGIN+$0539

@VarData	= NUM
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	CRT_WRITE					; PROCEDURE | OVERLOAD
.local	@010181000

; optimize FAIL ('SYSUTILS.INTTOSTR.@010182000', B_CRT), line = 548

	inx
	mva NUM :STACKORIGIN,x
	mva NUM+1 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	jsr SYSUTILS.INTTOSTR.@010182000
	jsr ATASCII2ANTIC.@0101898600000100
	inx
	mva ATASCII2ANTIC.@0101898600000100.RESULT :STACKORIGIN,x
	mva ATASCII2ANTIC.@0101898600000100.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITE.@0101898600000100

; ------------------------------------------------------------

NUM	= DATAORIGIN+$053A

@VarData	= NUM
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	CRT_WRITE					; PROCEDURE | OVERLOAD
.local	@010185000

; optimize FAIL ('SYSUTILS.INTTOSTR.@010185000', B_CRT), line = 558

	inx
	mva NUM :STACKORIGIN,x
	mva NUM+1 :STACKORIGIN+STACKWIDTH,x
	mva NUM+2 :STACKORIGIN+STACKWIDTH*2,x
	mva NUM+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr SYSUTILS.INTTOSTR.@010185000
	jsr ATASCII2ANTIC.@0101898600000100
	inx
	mva ATASCII2ANTIC.@0101898600000100.RESULT :STACKORIGIN,x
	mva ATASCII2ANTIC.@0101898600000100.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITE.@0101898600000100

; ------------------------------------------------------------

NUM	= DATAORIGIN+$053C

@VarData	= NUM
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	CRT_PUT						; PROCEDURE | OVERLOAD
.local	@010180000
	sta B

; optimize OK (B_CRT), line = 574

	ldy CRT_CURSOR+1
	sty :bp+1
	ldy CRT_CURSOR
	lda B
	sta (:bp),y

; optimize FAIL (0, B_CRT), line = 575

	inc CRT_CURSOR
	sne
	inc CRT_CURSOR+1

; ------------------------------------------------------------

B	= DATAORIGIN+$0540

@VarData	= B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	CRT_KEYPRESSED					; FUNCTION

; optimize OK (B_CRT), line = 592

	lda #$00
	sta RESULT

; optimize OK (B_CRT), line = 593

	lda ATARI.SKSTAT
	and #$04
	jne l_03EA
	lda #$01
	sta RESULT
l_03EA
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0541

	rts						; ret
.endl

.local	CRT_READKEY					; FUNCTION

; optimize OK (B_CRT), line = 598

	lda KBCODE
	sta RESULT

; --- RepeatUntilProlog
l_03FC

; optimize FAIL ('CRT_KEYPRESSED', B_CRT), line = 599

	jsr CRT_KEYPRESSED
	ldy #1
	lda CRT_KEYPRESSED.RESULT
	beq @+
	dey
@
	sty :STACKORIGIN+1,x
	ldy #1
	lda RESULT
	cmp KBCODE
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_03FC

; --- RepeatUntilProlog
l_0413

; optimize FAIL ('CRT_KEYPRESSED', B_CRT), line = 600

	jsr CRT_KEYPRESSED
	lda CRT_KEYPRESSED.RESULT
	jeq l_0413

; optimize OK (B_CRT), line = 601

	lda KBCODE
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0542

	rts						; ret
.endl

.local	CRT_READCHAR					; FUNCTION

; --- RepeatUntilProlog
l_0423

; optimize FAIL ('CRT_READKEY', B_CRT), line = 607

	jsr CRT_READKEY
	ldy CRT_READKEY.RESULT
	lda adr.CRT_KEYCODE,y
	sta RESULT

; optimize OK (B_CRT), line = 608

	cmp #$FF
	jeq l_0423
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0543

	rts						; ret
.endl

.local	CRT_READCHARI					; FUNCTION

; optimize FAIL ('CRT_READCHAR', B_CRT), line = 613

	jsr CRT_READCHAR
	lda CRT_READCHAR.RESULT
	jsr ATASCII2ANTIC.@010180000
	lda ATASCII2ANTIC.@010180000.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0544

	rts						; ret
.endl

.local	CRT_NEWLINE					; PROCEDURE | OVERLOAD
.local	@010180000
	sta OFFSET

; optimize OK (B_CRT), line = 670

	sta CRT_LEFTMARGIN

; optimize OK (B_CRT), line = 671

	lda CRT_CURSOR
	add CRT_SCREENWIDTH
	sta :STACKORIGIN+9
	lda CRT_CURSOR+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda CRT_CURSOR
	sub CRT_VRAM
	sta @INTEGER.MOD.A
	lda CRT_CURSOR+1
	sbc CRT_VRAM+1
	sta @INTEGER.MOD.A+1
	lda #$00
	sbc #$00
	sta @INTEGER.MOD.A+2
	lda #$00
	sbc #$00
	sta @INTEGER.MOD.A+3
	lda CRT_SCREENWIDTH
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta :STACKORIGIN+10
	lda @INTEGER.MOD.RESULT+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta CRT_CURSOR+1
	tya
	add OFFSET
	sta CRT_CURSOR
	scc
	inc CRT_CURSOR+1

; ------------------------------------------------------------

OFFSET	= DATAORIGIN+$0545

@VarData	= OFFSET
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	CRT_NEWLINE					; PROCEDURE | OVERLOAD
.local	@00

; optimize OK (B_CRT), line = 676

	lda CRT_LEFTMARGIN
	jsr CRT_NEWLINE.@010180000

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	CRT_WRITECENTERED				; PROCEDURE | OVERLOAD
.local	@02018986000001000180000

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta ROW
	dex
	jmi @main
	dex
@main

; optimize OK (B_CRT), line = 690

	lda CRT_SCREENWIDTH
	lsr @
	sta :STACKORIGIN+9
	lda adr.S
	lsr @
	sta :STACKORIGIN+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sub #$01
	sta OFF

; optimize OK (B_CRT), line = 691

	lda CRT_CURSOR
	add OFF
	sta CRT_CURSOR
	scc
	inc CRT_CURSOR+1

; optimize OK (B_CRT), line = 692

	lda OFF
	sta CRT_GOTOXY.X
	lda ROW
	sta CRT_GOTOXY.Y
	jsr CRT_GOTOXY

; optimize FAIL ('CRT_WRITE.@0101898600000100', B_CRT), line = 693

	inx
	mva S :STACKORIGIN,x
	mva S+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITE.@0101898600000100

; ------------------------------------------------------------

ROW	= DATAORIGIN+$0546
adr.S	= [DATAORIGIN+$0547] .array [256]
.var S	= adr.S .word
OFF	= DATAORIGIN+$0647

@VarData	= ROW
@VarDataSize	= 258

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	CRT_WRITERIGHTALIGNED				; PROCEDURE | OVERLOAD
.local	@02018986000001000180000

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta ROW
	dex
	jmi @main
	dex
@main

; optimize OK (B_CRT), line = 704

	lda CRT_SCREENWIDTH
	sub adr.S
	sta OFF

; optimize OK (B_CRT), line = 705

	lda CRT_CURSOR
	add OFF
	sta CRT_CURSOR
	scc
	inc CRT_CURSOR+1

; optimize OK (B_CRT), line = 706

	lda OFF
	sta CRT_GOTOXY.X
	lda ROW
	sta CRT_GOTOXY.Y
	jsr CRT_GOTOXY

; optimize FAIL ('CRT_WRITE.@0101898600000100', B_CRT), line = 707

	inx
	mva S :STACKORIGIN,x
	mva S+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITE.@0101898600000100

; ------------------------------------------------------------

ROW	= DATAORIGIN+$0648
adr.S	= [DATAORIGIN+$0649] .array [256]
.var S	= adr.S .word
OFF	= DATAORIGIN+$0749

@VarData	= ROW
@VarDataSize	= 258

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	CRT_INVERT					; PROCEDURE

; optimize OK (B_CRT), line = 734

	lda CRT_SCREENWIDTH
	sta :ecx
	lda Y
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add CRT_VRAM
	tay
	lda :eax+1
	adc CRT_VRAM+1
	sta CURSOR+1
	tya
	add X
	sta CURSOR
	scc
	inc CURSOR+1

; --- WhileProlog
	jmp l_04DD
l_04DE

; optimize OK (B_CRT), line = 736

	ldy CURSOR+1
	sty :bp+1
	ldy CURSOR
	lda (:bp),y
	eor #$80
	sta (:bp),y

; optimize FAIL (0, B_CRT), line = 737

	dec WIDTH

; optimize FAIL (0, B_CRT), line = 738

	inc CURSOR
	sne
	inc CURSOR+1
l_04DD

; optimize OK (B_CRT), line = 735

	lda WIDTH
	jne l_04DE

; ------------------------------------------------------------

X	= DATAORIGIN+$074A
Y	= DATAORIGIN+$074B
WIDTH	= DATAORIGIN+$074C
CURSOR	= DATAORIGIN+$074D

@VarData	= X
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

DEFAULT_SCREENWIDTH	= $28
DEFAULT_SCREENHEIGHT	= $18
CHAR_RETURN	= $9B
CHAR_ESCAPE	= $1B
CHAR_BACKSPACE	= $7E
CHAR_TAB	= $7F
CHAR_INVERSE	= $81
CHAR_CAPS	= $82
ICHAR_RETURN	= $DB
ICHAR_ESCAPE	= $5B
ICHAR_BACKSPACE	= $7E
ICHAR_TAB	= $7F
ICHAR_INVERSE	= $C1
ICHAR_CAPS	= $C2
adr.CRT_KEYCODE	= CODEORIGIN+$00E6
.var CRT_KEYCODE	= adr.CRT_KEYCODE .word
CRT_VRAM	= DATAORIGIN+$0223
CRT_SIZE	= DATAORIGIN+$0225
CRT_SCREENWIDTH	= DATAORIGIN+$0227
CRT_SCREENHEIGHT	= DATAORIGIN+$0228
CRT_CURSOR	= DATAORIGIN+$0229
CRT_LEFTMARGIN	= DATAORIGIN+$022B
KBCODE	= $D209
CONSOL	= $D01F

.endl							; UNIT B_CRT

.local	SETBANK						; PROCEDURE

; optimize OK (b_maxflash.pas), line = 50

	lda BANK_BANK
	sta CURBANK

; optimize OK (b_maxflash.pas), line = 51

	tay
	lda #$00
	sta $D500,y

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETSECTOR					; PROCEDURE

; optimize OK (b_maxflash.pas), line = 57

	lda BANK_SECTOR
	sta CURSEC

; optimize OK (b_maxflash.pas), line = 58

	asl @
	asl @
	asl @
	sta BANK_BANK

; optimize FAIL ('SETBANK', b_maxflash.pas), line = 59

	jsr SETBANK

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WR5555						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000145  -------------------


        lda bank_write
.def :_wr5555
        bit curbank
        bvs _wr5c2
        sta $d502   
        sta $b555
        rts     
_wr5c2  
        sta $d542   
        sta $b555

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WR2AAA						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000146  -------------------


        lda bank_write
        bit curbank
        bvs _wr2c2
        sta $d501
        sta $aaaa
        rts 
_wr2c2      
        sta $d541       
        sta $aaaa       

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CMDUNLOCK					; PROCEDURE

; optimize OK (b_maxflash.pas), line = 94

	lda #$AA
	sta BANK_WRITE

; optimize FAIL ('WR5555', b_maxflash.pas), line = 95

	jsr WR5555

; optimize OK (b_maxflash.pas), line = 96

	lda #$55
	sta BANK_WRITE

; optimize FAIL ('WR2AAA', b_maxflash.pas), line = 97

	jsr WR2AAA

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CMDINIT						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000147  -------------------


    lda #$00            
    sta nmien           
    sta wsync   

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CMDCLEANUP					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000148  -------------------


    sta cartoff
    sta wsync           
    lda trig3           
    sta GINTLK  
    lda #$40
    sta nmien   

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAITTOCOMPLETE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000149  -------------------


poll_write  
        lda #$00        
        sta workpages       
_poll_again 
        lda carbase 
        cmp carbase         
        bne poll_write      
        cmp carbase         
        bne poll_write      
        inc workpages       
        bne _poll_again     

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ERASESECTOR					; PROCEDURE

; optimize FAIL ('CMDINIT', b_maxflash.pas), line = 138

	jsr CMDINIT

; optimize FAIL ('SETSECTOR', b_maxflash.pas), line = 139

	jsr SETSECTOR

; optimize FAIL ('CMDUNLOCK', b_maxflash.pas), line = 140

	jsr CMDUNLOCK

; optimize OK (b_maxflash.pas), line = 141

	lda #$80
	sta BANK_WRITE

; optimize FAIL ('WR5555', b_maxflash.pas), line = 142

	jsr WR5555

; optimize FAIL ('CMDUNLOCK', b_maxflash.pas), line = 143

	jsr CMDUNLOCK

; optimize FAIL ('SETSECTOR', b_maxflash.pas), line = 144

	jsr SETSECTOR

; optimize OK (b_maxflash.pas), line = 145

	lda #$30
	sta CARBASE

; optimize FAIL ('WAITTOCOMPLETE', b_maxflash.pas), line = 146

	jsr WAITTOCOMPLETE

; optimize FAIL ('CMDCLEANUP', b_maxflash.pas), line = 147

	jsr CMDCLEANUP

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BURNBLOCK					; PROCEDURE

; optimize FAIL ('CMDINIT', b_maxflash.pas), line = 167

	jsr CMDINIT

; --- RepeatUntilProlog
l_054F

; optimize FAIL ('CMDUNLOCK', b_maxflash.pas), line = 169

	jsr CMDUNLOCK

; optimize OK (b_maxflash.pas), line = 171

	lda #$A0
	sta BANK_WRITE

; optimize FAIL ('WR5555', b_maxflash.pas), line = 172

	jsr WR5555

; optimize FAIL ('SETBANK', b_maxflash.pas), line = 174

	jsr SETBANK

; optimize OK (b_maxflash.pas), line = 175

	ldy BANK_SRC+1
	sty :bp+1
	ldy BANK_SRC
	lda (:bp),y
	ldy BANK_DEST+1
	sty :bp+1
	ldy BANK_DEST
	sta (:bp),y

; optimize FAIL (0, b_maxflash.pas), line = 176

	inc BANK_SRC
	sne
	inc BANK_SRC+1

; optimize FAIL (0, b_maxflash.pas), line = 177

	inc BANK_DEST
	sne
	inc BANK_DEST+1

; optimize OK (b_maxflash.pas), line = 178

	lda BANK_DEST+1
	cmp #$C0
	bne @+
	lda BANK_DEST
@
	jne l_0575

; optimize FAIL (0, b_maxflash.pas), line = 179

	inc BANK_BANK

; optimize OK (b_maxflash.pas), line = 180

	lda #$00
	sta BANK_DEST
	lda #$A0
	sta BANK_DEST+1
l_0575

; optimize FAIL (0, b_maxflash.pas), line = 182

	lda BANK_SIZE
	bne @+
	dec BANK_SIZE+1
@
	dec BANK_SIZE

; optimize OK (b_maxflash.pas), line = 183

	lda BANK_SIZE+1
	ora BANK_SIZE
	jne l_054F

; optimize FAIL ('CMDCLEANUP', b_maxflash.pas), line = 184

	jsr CMDCLEANUP

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MUSICPROXY					; PROCEDURE

; optimize OK (main.pas), line = 59

	lda PLAYMUSIC
	cmp #$01
	jne l_05A7

; optimize FAIL ('RMT.TRMT.PLAY', main.pas), line = 60

	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.PLAY
l_05A7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READKEYANDSTICK					; FUNCTION

; optimize OK (helpers_input.pas), line = 28

	lda #$00
	sta CH

; -------------------  ASM Block 00000150  -------------------


        phr
        lda #$00
        sta joystickused
  loop:
        lda $d300
        and #$0f
        cmp #$0f 
        bne foundstick

        lda $d010 ; try stick button 
        cmp #$00
        bne nofire 
        lda #$0c
        sta joystickused
        jmp loopend

nofire:
        lda consol		; START
        cmp #$05
        beq foundsave
        cmp #$03
        beq foundload
        cmp #$06
        beq foundmsx

        lda skctl		; ANY KEY
        and #$04
        bne loop

        lda kbcode
        jmp loopend
  stickdata:
        // right, left, down, up --> 7= 0111=right;  11=1011=left, 13=1101=down, 14=1110=up
        dta 0,0,0,0,    0,0, 0, 07,   0, 0,0, 06, 0,     15, 14
  foundstick:
        tay
        lda stickdata,y
        sta joystickused
        jmp loopend
  foundsave:
        lda #$1f 
        jmp loopend
  foundmsx:
        lda #$20
        jmp loopend
  foundload:
        lda #$1e
        // check for key
  loopend:
        sta ch
        plr
  
; optimize OK (helpers_input.pas), line = 82

	lda CH
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0899
CH	= DATAORIGIN+$089A

@VarData	= CH
@VarDataSize	= 1

	rts						; ret
.endl

.local	CHECKKEYANDSTICK				; FUNCTION

; optimize OK (helpers_input.pas), line = 92

	lda #$00
	sta CH

; -------------------  ASM Block 00000151  -------------------


        phr

        lda $d300
        and #$0f
        cmp #$0f   
        bne foundstick

        lda $d010 ; try stick button 
        cmp #$00
        bne nofire 
        lda #$0c
        jmp loopend

  nofire:
        lda consol		; START
        and #1
        beq foundconsol

        lda skctl		; ANY KEY
        and #$04
        bne loopend_zero

        lda kbcode
        jmp loopend
  stickdata:
        dta 0,0,0,0,    0,0, 0, 07,   0, 0,0, 06, 0,     15, 14
  foundstick:
        tay
        lda stickdata,y
        jmp loopend
  foundconsol:
        // check for key
  loopend_zero:
        lda #$00
  loopend:
        sta ch
        plr
  
; optimize OK (helpers_input.pas), line = 132

	lda CH
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$089B
CH	= DATAORIGIN+$089C

@VarData	= CH
@VarDataSize	= 1

	rts						; ret
.endl

.local	WAITFORKEYRELEASE				; PROCEDURE

; optimize FAIL ('READKEYANDSTICK', helpers_input.pas), line = 146

	jsr READKEYANDSTICK
	lda READKEYANDSTICK.RESULT
	sta CH

; --- RepeatUntilProlog
l_05D0

; optimize FAIL ('CHECKKEYANDSTICK', helpers_input.pas), line = 148

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta TMPCH

; optimize OK (helpers_input.pas), line = 149

	cmp CH
	jeq l_05D0

; ------------------------------------------------------------

CH	= DATAORIGIN+$089D
TMPCH	= DATAORIGIN+$089E

@VarData	= CH
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITE_LOCSTR				; PROCEDURE
	sta B

; optimize OK (helpers.pas), line = 7

	sub #$01
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$28
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta Z
	lda :eax+1
	sta Z+1

; optimize OK (helpers.pas), line = 8

	lda LOC_STRING_1
	add Z
	sta TMPSTR
	lda LOC_STRING_1+1
	adc Z+1
	sta TMPSTR+1

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers.pas), line = 9

	inx
	mva TMPSTR :STACKORIGIN,x
	mva TMPSTR+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; ------------------------------------------------------------

B	= DATAORIGIN+$089F
Z	= DATAORIGIN+$08A0
TMPSTR	= DATAORIGIN+$08A2

@VarData	= B
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITELN_LOCSTR				; PROCEDURE
	sta B

; optimize OK (helpers.pas), line = 15

	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', helpers.pas), line = 16

	jsr B_CRT.CRT_NEWLINE.@00

; ------------------------------------------------------------

B	= DATAORIGIN+$08A4

@VarData	= B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITELN2_LOCSTR				; PROCEDURE
	sta B

; optimize OK (helpers.pas), line = 22

	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', helpers.pas), line = 23

	jsr B_CRT.CRT_NEWLINE.@00

; ------------------------------------------------------------

B	= DATAORIGIN+$08A5

@VarData	= B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITECENTERED_LOCSTR			; PROCEDURE

; optimize OK (helpers.pas), line = 31

	lda B
	sub #$01
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$28
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta Z
	lda :eax+1
	sta Z+1

; optimize OK (helpers.pas), line = 32

	lda LOC_STRING_1
	add Z
	sta TMPSTR
	lda LOC_STRING_1+1
	adc Z+1
	sta TMPSTR+1

; optimize FAIL ('B_CRT.CRT_WRITECENTERED.@02018986000001000180000', helpers.pas), line = 33

	inx
	mwy TMPSTR :bp2
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITECENTERED.@02018986000001000180000.adr.S,y+
	inx
	mva R :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED.@02018986000001000180000

; ------------------------------------------------------------

R	= DATAORIGIN+$08A6
B	= DATAORIGIN+$08A7
Z	= DATAORIGIN+$08A8
TMPSTR	= DATAORIGIN+$08AA

@VarData	= R
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EFFECTWAIT					; PROCEDURE

; optimize OK (helpers.pas), line = 40

	lda #$78
	jsr B_SYSTEM.WAITFRAMES

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_READKEYORJOYSTICK				; FUNCTION

; optimize OK (helpers.pas), line = 48

	lda B_CRT.KBCODE
	sta RESULT

; --- RepeatUntilProlog
l_0647

; optimize FAIL ('B_CRT.CRT_KEYPRESSED', helpers.pas), line = 49

	jsr B_CRT.CRT_KEYPRESSED
	ldy #1
	lda B_CRT.CRT_KEYPRESSED.RESULT
	beq @+
	dey
@
	sty :STACKORIGIN+1,x
	ldy #1
	lda RESULT
	cmp B_CRT.KBCODE
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_0647

; --- RepeatUntilProlog
l_065E

; optimize FAIL ('CHECKKEYANDSTICK', helpers.pas), line = 51

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta Z

; optimize FAIL ('B_CRT.CRT_KEYPRESSED', helpers.pas), line = 52

	jsr B_CRT.CRT_KEYPRESSED
	ldy #1
	lda Z
	cmp #$0C
	beq @+
	dey
@
	tya
	ora B_CRT.CRT_KEYPRESSED.RESULT
	sta :STACKORIGIN+1,x
	ldy #1
	lda Z
	cmp #$0E
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	sta :STACKORIGIN+1,x
	ldy #1
	lda Z
	cmp #$0F
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	sta :STACKORIGIN+1,x
	ldy #1
	lda Z
	cmp #$06
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	sta :STACKORIGIN+1,x
	ldy #1
	lda Z
	cmp #$07
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_065E

; optimize OK (helpers.pas), line = 53

	lda Z
	jeq l_06B5

; optimize OK (helpers.pas), line = 54

	jmp l_06C5
l_06B5

; optimize OK (helpers.pas), line = 56

	lda B_CRT.KBCODE
l_06C5
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$08AC
Z	= DATAORIGIN+$08AD

@VarData	= Z
@VarDataSize	= 1

	rts						; ret
.endl

.local	CRT_READKEYORFIRE				; FUNCTION

; optimize OK (helpers.pas), line = 62

	lda B_CRT.KBCODE
	sta RESULT

; --- RepeatUntilProlog
l_06D6

; optimize FAIL ('B_CRT.CRT_KEYPRESSED', helpers.pas), line = 63

	jsr B_CRT.CRT_KEYPRESSED
	ldy #1
	lda B_CRT.CRT_KEYPRESSED.RESULT
	beq @+
	dey
@
	sty :STACKORIGIN+1,x
	ldy #1
	lda RESULT
	cmp B_CRT.KBCODE
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_06D6

; --- RepeatUntilProlog
l_06ED

; optimize FAIL ('B_CRT.CRT_KEYPRESSED', helpers.pas), line = 64

	jsr B_CRT.CRT_KEYPRESSED
	inx
	mva B_CRT.CRT_KEYPRESSED.RESULT :STACKORIGIN,x
	jsr CHECKKEYANDSTICK
	dex
	ldy #1
	lda CHECKKEYANDSTICK.RESULT
	cmp #$0C
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_06ED

; optimize OK (helpers.pas), line = 65

	lda B_CRT.KBCODE
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$08AE

	rts						; ret
.endl

.local	WAITFORKEY					; PROCEDURE

; optimize FAIL ('B_CRT.CRT_WHEREY', helpers.pas), line = 72

	jsr B_CRT.CRT_WHEREY
	lda B_CRT.CRT_WHEREY.RESULT
	sta K

; optimize OK (helpers.pas), line = 73

	add #$02
	sta K

; optimize FAIL ('B_CRT.CRT_WRITECENTERED.@02018986000001000180000', helpers.pas), line = 74

	inx
	mwy WAITKEY_STRING :bp2
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITECENTERED.@02018986000001000180000.adr.S,y+
	inx
	mva K :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED.@02018986000001000180000

; optimize FAIL ('CRT_READKEYORFIRE', helpers.pas), line = 75

	jsr CRT_READKEYORFIRE

; ------------------------------------------------------------

K	= DATAORIGIN+$08AF

@VarData	= K
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_NEWLINE2					; PROCEDURE

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', helpers.pas), line = 82

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', helpers.pas), line = 83

	jsr B_CRT.CRT_NEWLINE.@00

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITELN2					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	dex
@main

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers.pas), line = 88

	inx
	mva S :STACKORIGIN,x
	mva S+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('CRT_NEWLINE2', helpers.pas), line = 89

	jsr CRT_NEWLINE2

; ------------------------------------------------------------

adr.S	= [DATAORIGIN+$08B0] .array [256]
.var S	= adr.S .word

@VarData	= S
@VarDataSize	= 256

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITELN					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	dex
@main

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers.pas), line = 95

	inx
	mva S :STACKORIGIN,x
	mva S+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', helpers.pas), line = 96

	jsr B_CRT.CRT_NEWLINE.@00

; ------------------------------------------------------------

adr.S	= [DATAORIGIN+$09B0] .array [256]
.var S	= adr.S .word

@VarData	= S
@VarDataSize	= 256

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETRANDOM					; FUNCTION

; optimize FAIL ('B_CRT.CRT_WHEREX', helpers.pas), line = 104

	jsr B_CRT.CRT_WHEREX
	lda B_CRT.CRT_WHEREX.RESULT
	sta X

; optimize FAIL ('B_CRT.CRT_WHEREY', helpers.pas), line = 105

	jsr B_CRT.CRT_WHEREY
	lda B_CRT.CRT_WHEREY.RESULT
	sta Y

; optimize OK (helpers.pas), line = 106

	lda MINP
	sta PROP
	lda MINP+1
	sta PROP+1

; --- RepeatUntilProlog
l_0749

; optimize FAIL ('B_CRT.CRT_KEYPRESSED', helpers.pas), line = 108

	jsr B_CRT.CRT_KEYPRESSED
	lda B_CRT.CRT_KEYPRESSED.RESULT
	jne l_0749

; --- RepeatUntilProlog
l_0752

; optimize OK (helpers.pas), line = 111

	lda PROP
	add STEPS
	sta PROP
	lda PROP+1
	adc STEPS+1
	sta PROP+1

; optimize OK (helpers.pas), line = 112

	lda MAXP+1
	cmp PROP+1
	bne @+
	lda MAXP
	cmp PROP
@
	jcs l_076E

; optimize OK (helpers.pas), line = 113

	lda MINP
	sta PROP
	lda MINP+1
	sta PROP+1
l_076E

; optimize OK (helpers.pas), line = 114

	lda X
	sta B_CRT.CRT_GOTOXY.X
	lda Y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_SYSTEM.WAITFRAME', helpers.pas), line = 115

	jsr B_SYSTEM.WAITFRAME

; optimize OK (helpers.pas), line = 116

	lda PROP
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda PROP+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers.pas), line = 117

	inx
	mva #$6B :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('CHECKKEYANDSTICK', helpers.pas), line = 119

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	jeq l_0752

; --- RepeatUntilProlog
l_078F

; optimize FAIL ('CHECKKEYANDSTICK', helpers.pas), line = 121

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta ATARI.CH

; optimize FAIL (1, helpers.pas), line = 122

	inx
	ldy #1
	lda ATARI.CH
	beq @+
	dey
@
	sty :STACKORIGIN,x
	jsr B_CRT.CRT_KEYPRESSED
	dex
	ldy #1
	lda B_CRT.CRT_KEYPRESSED.RESULT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_078F

; optimize OK (helpers.pas), line = 123

	lda PROP
	sta RESULT
	lda PROP+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

MINP	= DATAORIGIN+$0AB0
MAXP	= DATAORIGIN+$0AB2
STEPS	= DATAORIGIN+$0AB4
RESULT	= DATAORIGIN+$0AB6
PROP	= DATAORIGIN+$0AB8
X	= DATAORIGIN+$0ABA
Y	= DATAORIGIN+$0ABB

@VarData	= MINP
@VarDataSize	= 10

	rts						; ret
.endl

.local	GETANSWERCHAR					; FUNCTION

; optimize FAIL ('B_CRT.CRT_WHEREX', helpers.pas), line = 133

	jsr B_CRT.CRT_WHEREX
	lda B_CRT.CRT_WHEREX.RESULT
	sta X

; optimize FAIL ('B_CRT.CRT_WHEREY', helpers.pas), line = 134

	jsr B_CRT.CRT_WHEREY
	lda B_CRT.CRT_WHEREY.RESULT
	sta Y

; optimize OK (helpers.pas), line = 135

	lda A
	sta ANSWER

; --- RepeatUntilProlog
l_07BF

; optimize OK (helpers.pas), line = 137

	lda X
	sta B_CRT.CRT_GOTOXY.X
	lda Y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (helpers.pas), line = 138

	lda ANSWER
	jsr B_CRT.CRT_WRITE.@010186000

; optimize OK (helpers.pas), line = 139

	lda #$00
	jsr B_CRT.CRT_WRITE.@010186000

; optimize FAIL ('CRT_READKEYORJOYSTICK', helpers.pas), line = 140

	jsr CRT_READKEYORJOYSTICK
	lda CRT_READKEYORJOYSTICK.RESULT
	sta CH

; optimize OK (helpers.pas), line = 141

	cmp #$0C
	jne l_07E2
	jmp b_07BF
l_07E2

; optimize OK (helpers.pas), line = 142

	lda CH
	cmp #$0E
	jeq l_0805x
	cmp AKEY
	jne l_0805
l_0805x
	lda A
	sta ANSWER
l_0805

; optimize OK (helpers.pas), line = 143

	lda CH
	cmp #$0F
	jeq l_082Ex
	cmp BKEY
	jne l_082E
l_082Ex
	lda B
	sta ANSWER
l_082E

; optimize OK (helpers.pas), line = 144

	jmp l_07BF
b_07BF

; optimize OK (helpers.pas), line = 145

	lda ANSWER
	cmp A
	jne l_0850
	lda #$00
	jmp l_085E
l_0850
	lda #$01
l_085E
	sta RESULT
@exit

; ------------------------------------------------------------

AKEY	= DATAORIGIN+$0ABC
BKEY	= DATAORIGIN+$0ABD
A	= DATAORIGIN+$0ABE
B	= DATAORIGIN+$0ABF
RESULT	= DATAORIGIN+$0AC0
X	= DATAORIGIN+$0AC1
Y	= DATAORIGIN+$0AC2
CH	= DATAORIGIN+$0AC3
ANSWER	= DATAORIGIN+$0AC4

@VarData	= AKEY
@VarDataSize	= 8

	rts						; ret
.endl

.local	GETYESNO					; FUNCTION

; optimize OK (helpers.pas), line = 152

	lda #$23
	sta GETANSWERCHAR.AKEY
	lda #$2D
	sta GETANSWERCHAR.BKEY
	lda #$2E
	sta GETANSWERCHAR.A
	lda #$34
	sta GETANSWERCHAR.B
	jsr GETANSWERCHAR
	lda GETANSWERCHAR.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0AC5

	rts						; ret
.endl

.local	READVALUE					; FUNCTION

; optimize FAIL ('B_CRT.CRT_WHEREX', helpers.pas), line = 169

	jsr B_CRT.CRT_WHEREX
	lda B_CRT.CRT_WHEREX.RESULT
	sta X

; optimize FAIL ('B_CRT.CRT_WHEREY', helpers.pas), line = 170

	jsr B_CRT.CRT_WHEREY
	lda B_CRT.CRT_WHEREY.RESULT
	sta Y

; optimize OK (helpers.pas), line = 172

	lda MINVALUE
	sta VALUE
	ldy #$00
	lda MINVALUE+1
	spl
	dey
	sta VALUE+1
	sty VALUE+2
	sty VALUE+3

; optimize OK (helpers.pas), line = 173

	lda #$01
	sta STEP
	lda #$00
	sta STEP+1

; optimize OK (helpers.pas), line = 174

	sta FASTADJUSTCOUNTER

; optimize OK (helpers.pas), line = 175

	lda #$10
	sta CURDELAY

; optimize OK (helpers.pas), line = 176

	lda VALUE
	sta B_CRT.CRT_WRITE.@010185000.NUM
	lda VALUE+1
	sta B_CRT.CRT_WRITE.@010185000.NUM+1
	lda VALUE+2
	sta B_CRT.CRT_WRITE.@010185000.NUM+2
	lda VALUE+3
	sta B_CRT.CRT_WRITE.@010185000.NUM+3
	jsr B_CRT.CRT_WRITE.@010185000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers.pas), line = 177

	inx
	mva #$6E :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('CRT_READKEYORJOYSTICK', helpers.pas), line = 178

	jsr CRT_READKEYORJOYSTICK
	lda CRT_READKEYORJOYSTICK.RESULT
	sta CH

; --- RepeatUntilProlog
l_0894

; optimize FAIL ('CHECKKEYANDSTICK', helpers.pas), line = 180

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta CH

; optimize OK (helpers.pas), line = 182

	cmp #$0C
	jne l_08AA
	jmp b_0894
l_08AA

; optimize OK (helpers.pas), line = 184

	lda CH
	cmp #$0E
	jne l_08BF

; optimize OK (helpers.pas), line = 186

	lda FASTADJUSTCOUNTER
	jne l_08D2

; optimize OK (helpers.pas), line = 188

	lda STEP
	sta :STACKORIGIN+10
	ldy #$00
	lda STEP+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda VALUE
	add :STACKORIGIN+10
	sta VALUE
	lda VALUE+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta VALUE+1
	lda VALUE+2
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta VALUE+2
	lda VALUE+3
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta VALUE+3

; optimize OK (helpers.pas), line = 189

	lda MAXVALUE
	sta :STACKORIGIN+10
	ldy #$00
	lda MAXVALUE+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda VALUE+3
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda VALUE+2
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda VALUE+1
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda VALUE
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_08ED
	jeq l_08ED

; optimize OK (helpers.pas), line = 190

	lda MAXVALUE
	sta VALUE
	ldy #$00
	lda MAXVALUE+1
	spl
	dey
	sta VALUE+1
	sty VALUE+2
	sty VALUE+3
l_08ED

; optimize OK (helpers.pas), line = 191

	lda CURDELAY
	cmp #$03
	jcc l_0907

; optimize OK (helpers.pas), line = 192

	dec CURDELAY
	jmp l_091B
l_0907

; optimize OK (helpers.pas), line = 194

	lda #$02
	sta STEP
	lda #$00
	sta STEP+1
l_091B

; optimize OK (helpers.pas), line = 195

	lda CURDELAY
	sta FASTADJUSTCOUNTER
l_08D2
	jmp l_0930
l_08BF

; optimize OK (helpers.pas), line = 198

	lda CH
	cmp #$07
	jne l_0942

; optimize OK (helpers.pas), line = 200

	lda VALUE
	add #$F4
	sta VALUE
	lda VALUE+1
	adc #$01
	sta VALUE+1
	lda VALUE+2
	adc #$00
	sta VALUE+2
	lda VALUE+3
	adc #$00
	sta VALUE+3

; optimize OK (helpers.pas), line = 201

	lda MAXVALUE
	sta :STACKORIGIN+10
	ldy #$00
	lda MAXVALUE+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda VALUE+3
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda VALUE+2
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda VALUE+1
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda VALUE
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_095C
	jeq l_095C

; optimize OK (helpers.pas), line = 202

	lda MAXVALUE
	sta VALUE
	ldy #$00
	lda MAXVALUE+1
	spl
	dey
	sta VALUE+1
	sty VALUE+2
	sty VALUE+3
l_095C

; --- RepeatUntilProlog
l_0965

; optimize FAIL ('CHECKKEYANDSTICK', helpers.pas), line = 205

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta TMPCH

; optimize OK (helpers.pas), line = 206

	cmp CH
	jeq l_0965
	jmp l_0981
l_0942

; optimize OK (helpers.pas), line = 208

	lda CH
	cmp #$06
	jne l_0993

; optimize OK (helpers.pas), line = 210

	lda VALUE
	sub #$F4
	sta VALUE
	lda VALUE+1
	sbc #$01
	sta VALUE+1
	lda VALUE+2
	sbc #$00
	sta VALUE+2
	lda VALUE+3
	sbc #$00
	sta VALUE+3

; optimize OK (helpers.pas), line = 211

	lda MINVALUE
	sta :STACKORIGIN+10
	ldy #$00
	lda MINVALUE+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda VALUE+3
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda VALUE+2
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda VALUE+1
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda VALUE
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_09AD

; optimize OK (helpers.pas), line = 212

	lda MINVALUE
	sta VALUE
	ldy #$00
	lda MINVALUE+1
	spl
	dey
	sta VALUE+1
	sty VALUE+2
	sty VALUE+3
l_09AD

; --- RepeatUntilProlog
l_09B6

; optimize FAIL ('CHECKKEYANDSTICK', helpers.pas), line = 215

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta TMPCH

; optimize OK (helpers.pas), line = 216

	cmp CH
	jeq l_09B6
	jmp l_09D2
l_0993

; optimize OK (helpers.pas), line = 218

	lda CH
	cmp #$0F
	jne l_09E4

; optimize OK (helpers.pas), line = 220

	lda FASTADJUSTCOUNTER
	jne l_09F7

; optimize OK (helpers.pas), line = 222

	lda STEP
	sta :STACKORIGIN+10
	ldy #$00
	lda STEP+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda VALUE
	sub :STACKORIGIN+10
	sta VALUE
	lda VALUE+1
	sbc :STACKORIGIN+STACKWIDTH+10
	sta VALUE+1
	lda VALUE+2
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta VALUE+2
	lda VALUE+3
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta VALUE+3

; optimize OK (helpers.pas), line = 223

	lda MINVALUE
	sta :STACKORIGIN+10
	ldy #$00
	lda MINVALUE+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda VALUE+3
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda VALUE+2
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda VALUE+1
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda VALUE
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_0A12

; optimize OK (helpers.pas), line = 224

	lda MINVALUE
	sta VALUE
	ldy #$00
	lda MINVALUE+1
	spl
	dey
	sta VALUE+1
	sty VALUE+2
	sty VALUE+3
l_0A12

; optimize OK (helpers.pas), line = 225

	lda CURDELAY
	cmp #$03
	jcc l_0A2C

; optimize OK (helpers.pas), line = 226

	dec CURDELAY
	jmp l_0A40
l_0A2C

; optimize OK (helpers.pas), line = 228

	lda #$02
	sta STEP
	lda #$00
	sta STEP+1
l_0A40

; optimize OK (helpers.pas), line = 229

	lda CURDELAY
	sta FASTADJUSTCOUNTER
l_09F7
	jmp l_0A55
l_09E4

; optimize OK (helpers.pas), line = 234

	lda #$00
	sta FASTADJUSTCOUNTER

; optimize OK (helpers.pas), line = 235

	lda #$10
	sta CURDELAY

; optimize OK (helpers.pas), line = 236

	lda #$01
	sta STEP
	lda #$00
	sta STEP+1
l_0A55
l_09D2
l_0981
l_0930

; optimize OK (helpers.pas), line = 239

	lda FASTADJUSTCOUNTER
	jeq l_0A73

; optimize OK (helpers.pas), line = 240

	dec FASTADJUSTCOUNTER
l_0A73

; optimize OK (helpers.pas), line = 242

	lda X
	sta B_CRT.CRT_GOTOXY.X
	lda Y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (helpers.pas), line = 243

	lda VALUE
	sta B_CRT.CRT_WRITE.@010185000.NUM
	lda VALUE+1
	sta B_CRT.CRT_WRITE.@010185000.NUM+1
	lda VALUE+2
	sta B_CRT.CRT_WRITE.@010185000.NUM+2
	lda VALUE+3
	sta B_CRT.CRT_WRITE.@010185000.NUM+3
	jsr B_CRT.CRT_WRITE.@010185000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers.pas), line = 244

	inx
	mva #$6E :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('B_SYSTEM.WAITFRAME', helpers.pas), line = 245

	jsr B_SYSTEM.WAITFRAME

; optimize OK (helpers.pas), line = 246

	jmp l_0894
b_0894

; optimize OK (helpers.pas), line = 248

	lda VALUE
	sta RESULT
	lda VALUE+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

MINVALUE	= DATAORIGIN+$0AC6
MAXVALUE	= DATAORIGIN+$0AC8
RESULT	= DATAORIGIN+$0ACA
VALUE	= DATAORIGIN+$0ACC
STEP	= DATAORIGIN+$0AD0
X	= DATAORIGIN+$0AD2
Y	= DATAORIGIN+$0AD3
TMPCH	= DATAORIGIN+$0AD4
CH	= DATAORIGIN+$0AD5
CURDELAY	= DATAORIGIN+$0AD6
FASTADJUSTCOUNTER	= DATAORIGIN+$0AD7

@VarData	= MINVALUE
@VarDataSize	= 16

	rts						; ret
.endl

.local	LOADGANGSTER					; PROCEDURE
	sta G

; optimize OK (helpers.pas), line = 259

	lda GANGSTERFILENAME
	sta XBIOS.XBIOSOPENFILE.FILENAME
	lda GANGSTERFILENAME+1
	sta XBIOS.XBIOSOPENFILE.FILENAME+1
	jsr XBIOS.XBIOSOPENFILE

; optimize OK (helpers.pas), line = 265

	lda #$00
	sta B
	ldy G
	dey
	sty @FORTMP_0AA8_0

l_0AAB
; --- ForToDoCondition
	lda @FORTMP_0AA8_0::#$00
	cmp B
	jcc l_0AB9

; optimize OK (helpers.pas), line = 267

	lda #$00
	sta K

l_0AC2
; --- ForToDoCondition
	lda K
	cmp #$EF
	jcs l_0AD0

; optimize FAIL ('XBIOS.XBIOSGETBYTE', helpers.pas), line = 268

	jsr XBIOS.XBIOSGETBYTE
	inx
	mva XBIOS.XBIOSGETBYTE.RESULT :STACKORIGIN,x
	inx
	mva #$70 :STACKORIGIN,x
	mva #$CE :STACKORIGIN+STACKWIDTH,x
	inx
	mva K :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	dex
	jsr SYSTEM.POKE
	inc K
	jne l_0AC2
l_0AD0

; optimize OK (helpers.pas), line = 269

	lda #$00
	sta K

l_0AEB
; --- ForToDoCondition
	lda K
	cmp #$11
	jcs l_0AF9

; optimize FAIL ('XBIOS.XBIOSGETBYTE', helpers.pas), line = 270

	jsr XBIOS.XBIOSGETBYTE
	inc K
	jne l_0AEB
l_0AF9

; --- ForToDoEpilog
	inc B
	jne l_0AAB
l_0AB9

; optimize FAIL ('CRT_WRITELN', helpers.pas), line = 283

	inx
	mva BUF_GANGSTERNAME :STACKORIGIN,x
	mva BUF_GANGSTERNAME+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', helpers.pas), line = 284

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('CRT_WRITELN', helpers.pas), line = 285

	inx
	mva BUF_GANGSTERTEXT1 :STACKORIGIN,x
	mva BUF_GANGSTERTEXT1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', helpers.pas), line = 286

	inx
	mva BUF_GANGSTERTEXT2 :STACKORIGIN,x
	mva BUF_GANGSTERTEXT2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', helpers.pas), line = 287

	inx
	mva BUF_GANGSTERTEXT3 :STACKORIGIN,x
	mva BUF_GANGSTERTEXT3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', helpers.pas), line = 288

	inx
	mva BUF_GANGSTERTEXT4 :STACKORIGIN,x
	mva BUF_GANGSTERTEXT4+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', helpers.pas), line = 289

	inx
	mva BUF_GANGSTERTEXT5 :STACKORIGIN,x
	mva BUF_GANGSTERTEXT5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; ------------------------------------------------------------

G	= DATAORIGIN+$0AD8
B	= DATAORIGIN+$0AD9
K	= DATAORIGIN+$0ADA

@VarData	= G
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RESOLVESAVEADDRESS				; PROCEDURE

; optimize OK (helpers.pas), line = 318

	lda SAVE_SLOT
	lsr @
	lsr @
	add #$38
	sta SAVEBANK

; optimize OK (helpers.pas), line = 319

	lda SAVE_SLOT
	and #$03
	asl @
	asl @
	asl @
	add #$A0
	sta SAVEADDRESS+1
	lda #$00
	sta SAVEADDRESS

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKFORSAVEDGAME				; PROCEDURE

; optimize OK (helpers.pas), line = 327

	lda #$00
	sta SAVE_GAMEFOUND

; optimize OK (helpers.pas), line = 328

	sta SAVE_LASTSAVE

; optimize FAIL ('CMDINIT', helpers.pas), line = 329

	jsr CMDINIT

; optimize OK (helpers.pas), line = 330

	lda #$00
	sta SAVE_SLOT

l_0B55
; --- ForToDoCondition
	lda SAVE_SLOT
	cmp #$20
	jcs l_0B63

; optimize FAIL ('RESOLVESAVEADDRESS', helpers.pas), line = 332

	jsr RESOLVESAVEADDRESS

; optimize OK (helpers.pas), line = 333

	lda SAVEBANK
	sta BANK_BANK

; optimize FAIL ('SETBANK', helpers.pas), line = 334

	jsr SETBANK

; optimize OK (helpers.pas), line = 335

	lda SAVEADDRESS
	add #$A0
	sta :bp2
	lda SAVEADDRESS+1
	adc #$04
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta BANK_SRC
	iny
	lda (:bp2),y
	sta BANK_SRC+1

; optimize OK (helpers.pas), line = 336

	cmp #$AB
	bne @+
	lda BANK_SRC
	cmp #$CD
@
	jne l_0B86

; optimize OK (helpers.pas), line = 338

	lda #$01
	sta SAVE_GAMEFOUND

; optimize OK (helpers.pas), line = 339

	lda SAVE_SLOT
	sta SAVE_LASTSAVE
l_0B86

; --- ForToDoEpilog
	inc SAVE_SLOT
	jne l_0B55
l_0B63

; optimize FAIL ('CMDCLEANUP', helpers.pas), line = 342

	jsr CMDCLEANUP

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SAVEGAME					; PROCEDURE

; optimize FAIL ('B_SYSTEM.WAITFRAME', helpers.pas), line = 348

	jsr B_SYSTEM.WAITFRAME

; optimize FAIL ('CHECKFORSAVEDGAME', helpers.pas), line = 351

	jsr CHECKFORSAVEDGAME

; optimize OK (helpers.pas), line = 352

	lda SAVE_GAMEFOUND
	cmp #$01
	jne l_0BB1

; optimize OK (helpers.pas), line = 354

	inc SAVE_LASTSAVE

; optimize OK (helpers.pas), line = 355

	lda SAVE_LASTSAVE
	cmp #$20
	jne l_0BCE

; optimize OK (helpers.pas), line = 357

	lda #$00
	sta SAVE_LASTSAVE

; optimize OK (helpers.pas), line = 358

	lda #$07
	sta BANK_SECTOR

; optimize FAIL ('ERASESECTOR', helpers.pas), line = 359

	jsr ERASESECTOR
l_0BCE
l_0BB1

; optimize OK (helpers.pas), line = 363

	lda SAVE_LASTSAVE
	sta SAVE_SLOT

; optimize FAIL ('RESOLVESAVEADDRESS', helpers.pas), line = 364

	jsr RESOLVESAVEADDRESS

; optimize OK (helpers.pas), line = 367

	lda $B555
	sta TMP_55

; optimize OK (helpers.pas), line = 368

	lda $AAAA
	sta TMP_AA

; optimize OK (helpers.pas), line = 373

	lda SAVEBANK
	sta BANK_BANK

; optimize FAIL ('SETBANK', helpers.pas), line = 374

	jsr SETBANK

; optimize OK (helpers.pas), line = 376

	lda #$CD
	sta SAVEGAMEMAGIC
	lda #$AB
	sta SAVEGAMEMAGIC+1

; -------------------  ASM Block 00000152  -------------------

sei 
; optimize OK (helpers.pas), line = 378

	lda SAVEBANK
	sta BANK_BANK

; optimize OK (helpers.pas), line = 379

	lda #$20
	sta BANK_SRC
	lda #$C9
	sta BANK_SRC+1

; optimize OK (helpers.pas), line = 380

	lda SAVEADDRESS
	sta BANK_DEST
	lda SAVEADDRESS+1
	sta BANK_DEST+1

; optimize OK (helpers.pas), line = 381

	lda #$DF
	sta BANK_SIZE
	lda #$06
	sta BANK_SIZE+1

; optimize FAIL ('BURNBLOCK', helpers.pas), line = 382

	jsr BURNBLOCK

; -------------------  ASM Block 00000153  -------------------

cli 
; optimize FAIL ('CMDCLEANUP', helpers.pas), line = 385

	jsr CMDCLEANUP

; optimize OK (helpers.pas), line = 386

	lda TMP_55
	sta $B555

; optimize OK (helpers.pas), line = 387

	lda TMP_AA
	sta $AAAA

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADGAME					; PROCEDURE

; optimize FAIL ('B_CRT.CRT_CLEAR.@00', helpers.pas), line = 394

	jsr B_CRT.CRT_CLEAR.@00

; optimize OK (helpers.pas), line = 395

	lda #$01
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$11
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL ('CHECKFORSAVEDGAME', helpers.pas), line = 397

	jsr CHECKFORSAVEDGAME

; optimize OK (helpers.pas), line = 398

	lda SAVE_GAMEFOUND
	jne l_0C32

; optimize OK (helpers.pas), line = 399

	lda #$03
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$12
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL ('WAITFORKEY', helpers.pas), line = 400

	jsr WAITFORKEY
	jmp @exit
l_0C32

; optimize OK (helpers.pas), line = 404

	lda SAVE_LASTSAVE
	sta SAVE_SLOT

; optimize FAIL ('RESOLVESAVEADDRESS', helpers.pas), line = 405

	jsr RESOLVESAVEADDRESS

; optimize FAIL ('CMDINIT', helpers.pas), line = 406

	jsr CMDINIT

; optimize OK (helpers.pas), line = 407

	lda SAVEBANK
	sta BANK_BANK

; optimize FAIL ('SETBANK', helpers.pas), line = 408

	jsr SETBANK

; optimize OK (helpers.pas), line = 409

	lda SAVEADDRESS
	sta SYSTEM.MOVE.@03018100001880000188000.SOURCE
	lda SAVEADDRESS+1
	sta SYSTEM.MOVE.@03018100001880000188000.SOURCE+1
	lda #$20
	sta SYSTEM.MOVE.@03018100001880000188000.DEST
	lda #$C9
	sta SYSTEM.MOVE.@03018100001880000188000.DEST+1
	lda #$DF
	sta SYSTEM.MOVE.@03018100001880000188000.COUNT
	lda #$06
	sta SYSTEM.MOVE.@03018100001880000188000.COUNT+1
	.LOCAL +MAIN.SYSTEM.MOVE.@03018100001880000188000
	m@INLINE
	.ENDL

; optimize FAIL ('CMDCLEANUP', helpers.pas), line = 410

	jsr CMDCLEANUP

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DLI_MAP						; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000154  -------------------


dli:
    phr ; store registers

dlijmp:
    jmp dli1

dli1:
    lda #>MAP_FNT_ADDRESS
    sta $D409 ; CHBAS_real
    sta WSYNC

    mva #$0e atari.colpf0 ; white 

    mva mapColorB atari.colpf1 ; $06 for map
    mva mapColorA atari.colpf2 ; $88 for map 
    mva #$2a atari.colpf3 ; orangish
    mva #$00 atari.colbk  ; black

    ; move PMG to current position
    lda spriteMoveDir
    cmp #$01
    beq dli1_X
    lda PLAYERPOS_X
    sec 
    sbc #$01
    jmp dli1_X2
dli1_X:
    lda PLAYERPOS_X
    ; clc
    ; adc #$01
dli1_X2:
    sta HPOSP0
    sta HPOSP1
    sta HPOSP2
    sta HPOSP3

    lda #<dli2
    sta dlijmp+1
    lda #>dli2
    sta dlijmp+2

    plr
    rti

dli2:
    nop
    nop
    nop
    nop
    mva #$00 atari.colpf2 ; hue
    mva #$ff atari.colpf1 ; lum

    lda #>MAINFONT_ADR
    sta $D409 ; CHBAS_real

    ; deactivate PMG by moving it out of screen
    lda #$0
    sta HPOSP0
    sta HPOSP1
    sta HPOSP2
    sta HPOSP3
    sta WSYNC

    ; next
    lda #<dli3
    sta dlijmp+1
    lda #>dli3
    sta dlijmp+2

    plr
    rti

dli3:
    sta WSYNC
    mva #$ff atari.colpf1 ; lum
    mva #$00 atari.colpf2 ; hue

    lda #<dli4
    sta dlijmp+1
    lda #>dli4
    sta dlijmp+2

    plr
    rti

dli4:
    jsr main.musicproxy

    lda #<dli1
    sta dlijmp+1
    lda #>dli1
    sta dlijmp+2

    plr
    rti


	rti						; ret
.endl

.local	DLI_BITMAP					; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000155  -------------------


dli:
    phr ; store registers

dlijmp:
    jmp dli1

dli1:
    lda #>MAP_FNT_ADDRESS
    sta $D409 ; CHBAS_real
    sta WSYNC

    mva #$0e atari.colpf0 ; white 
    mva mapColorB atari.colpf1 ; $06 for map
    mva mapColorA atari.colpf2 ; $88 for map 
    mva #$2a atari.colpf3 ; orangish
    mva #$00 atari.colbk  ; black

    lda #<dli2
    sta dlijmp+1
    lda #>dli2
    sta dlijmp+2

    plr
    rti

dli2:
    nop
    nop
    nop
    nop

    lda #>LOC_MAP_ADR
    sta $D409 ; CHBAS_real
    sta WSYNC

    jsr main.musicproxy

    lda #<dli1
    sta dlijmp+1
    lda #>dli1
    sta dlijmp+2

    plr
    rti


	rti						; ret
.endl

.local	DLI_BLACK_CONSOLE				; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000156  -------------------


    phr 
    mva #$0 atari.colpf0 
    mva #$0 atari.colpf1 
    mva #$0 atari.colpf2 
    mva #$0 atari.colbk 
    jsr main.musicproxy
    plr  

	rti						; ret
.endl

.local	DLI_CONSOLE					; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000157  -------------------


    phr  
    mva loccolbk atari.colbk
    mva loccolpf0 atari.colpf0 
    mva loccolpf1 atari.colpf1 
    mva loccolpf2 atari.colpf2  

    jsr main.musicproxy

    plr 

	rti						; ret
.endl

.local	XBUNAPL						; PROCEDURE

; optimize OK (xbaplib.pas), line = 13

	lda FNAME
	sta XBIOS.XBIOSOPENFILE.FILENAME
	lda FNAME+1
	sta XBIOS.XBIOSOPENFILE.FILENAME+1
	jsr XBIOS.XBIOSOPENFILE

; optimize OK (xbaplib.pas), line = 14

	lda OUTPUTPOINTER
	sta XBIOS.XBIOSLOADDATA.DEST
	lda OUTPUTPOINTER+1
	sta XBIOS.XBIOSLOADDATA.DEST+1
	jsr XBIOS.XBIOSLOADDATA

; ------------------------------------------------------------

FNAME	= DATAORIGIN+$0ADC
OUTPUTPOINTER	= DATAORIGIN+$0ADE

@VarData	= FNAME
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADXAPL					; PROCEDURE

; optimize OK (main.pas), line = 76

	lda FNAME
	sta XBUNAPL.FNAME
	lda FNAME+1
	sta XBUNAPL.FNAME+1
	lda OUTPUTPOINTER
	sta XBUNAPL.OUTPUTPOINTER
	lda OUTPUTPOINTER+1
	sta XBUNAPL.OUTPUTPOINTER+1
	jsr XBUNAPL

; ------------------------------------------------------------

FNAME	= DATAORIGIN+$0AE0
OUTPUTPOINTER	= DATAORIGIN+$0AE2
MSXSTATUS	= DATAORIGIN+$0AE4

@VarData	= FNAME
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAITFRAMES					; PROCEDURE
	sta FRAMES

; --- WhileProlog
	jmp l_0C6B
l_0C6C

; optimize FAIL ('B_SYSTEM.WAITFRAME', console.pas), line = 10

	jsr B_SYSTEM.WAITFRAME

; optimize FAIL (0, console.pas), line = 11

	dec FRAMES
l_0C6B

; optimize OK (console.pas), line = 8

	lda FRAMES
	jne l_0C6C

; ------------------------------------------------------------

FRAMES	= DATAORIGIN+$0AE6

@VarData	= FRAMES
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLACKCONSOLE					; PROCEDURE

; optimize OK (console.pas), line = 18

	lda CONSOLESTATE
	jeq @exit
l_0C93

; optimize OK (console.pas), line = 19

	lda <DLI_BLACK_CONSOLE
	sta B_SYSTEM.ENABLEDLI.DLIPTR
	lda >DLI_BLACK_CONSOLE
	sta B_SYSTEM.ENABLEDLI.DLIPTR+1
	jsr B_SYSTEM.ENABLEDLI

; optimize OK (console.pas), line = 20

	lda #$B0
	sta ATARI.DLISTL
	lda #$FF
	sta ATARI.DLISTL+1

; optimize OK (console.pas), line = 21

	lda #$00
	sta CONSOLESTATE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ENABLECONSOLE					; PROCEDURE

; optimize OK (console.pas), line = 27

	lda CONSOLESTATE
	cmp #$01
	jeq @exit
l_0CB5

; optimize OK (console.pas), line = 29

	lda <DLI_CONSOLE
	sta B_SYSTEM.ENABLEDLI.DLIPTR
	lda >DLI_CONSOLE
	sta B_SYSTEM.ENABLEDLI.DLIPTR+1
	jsr B_SYSTEM.ENABLEDLI

; optimize OK (console.pas), line = 30

	lda #$70
	sta ATARI.DLISTL
	lda #$FF
	sta ATARI.DLISTL+1

; optimize OK (console.pas), line = 31

	lda #$B4
	jsr B_SYSTEM.SETCHARSET

; optimize OK (console.pas), line = 33

	lda #$00
	sta B_CRT.CRT_INIT.@03018000001800000181000.VRAM_ADDRESS
	lda #$B0
	sta B_CRT.CRT_INIT.@03018000001800000181000.VRAM_ADDRESS+1
	lda #$28
	sta B_CRT.CRT_INIT.@03018000001800000181000.WIDTH
	lda #$19
	sta B_CRT.CRT_INIT.@03018000001800000181000.HEIGHT
	jsr B_CRT.CRT_INIT.@03018000001800000181000

; optimize OK (console.pas), line = 34

	lda #$01
	sta CONSOLESTATE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ENABLEMAPCONSOLE				; PROCEDURE

; optimize OK (console.pas), line = 40

	lda CONSOLESTATE
	cmp #$02
	jeq @exit
l_0CDD

; optimize OK (console.pas), line = 41

	lda #$88
	sta MAPCOLORA

; optimize OK (console.pas), line = 42

	lda #$06
	sta MAPCOLORB

; optimize OK (console.pas), line = 43

	lda <DLI_MAP
	sta B_SYSTEM.ENABLEDLI.DLIPTR
	lda >DLI_MAP
	sta B_SYSTEM.ENABLEDLI.DLIPTR+1
	jsr B_SYSTEM.ENABLEDLI

; optimize OK (console.pas), line = 44

	lda #$90
	sta ATARI.DLISTL
	lda #$FF
	sta ATARI.DLISTL+1

; optimize OK (console.pas), line = 45

	lda #$D8
	jsr B_SYSTEM.SETCHARSET

; optimize OK (console.pas), line = 46

	lda #$00
	sta B_CRT.CRT_INIT.@03018000001800000181000.VRAM_ADDRESS
	lda #$DC
	sta B_CRT.CRT_INIT.@03018000001800000181000.VRAM_ADDRESS+1
	lda #$28
	sta B_CRT.CRT_INIT.@03018000001800000181000.WIDTH
	lda #$19
	sta B_CRT.CRT_INIT.@03018000001800000181000.HEIGHT
	jsr B_CRT.CRT_INIT.@03018000001800000181000

; optimize OK (console.pas), line = 47

	lda #$02
	sta CONSOLESTATE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ENABLEBITMAPCONSOLE				; PROCEDURE

; optimize OK (console.pas), line = 53

	lda CONSOLESTATE
	cmp #$03
	jeq @exit
l_0D0D

; optimize OK (console.pas), line = 54

	lda <DLI_BITMAP
	sta B_SYSTEM.ENABLEDLI.DLIPTR
	lda >DLI_BITMAP
	sta B_SYSTEM.ENABLEDLI.DLIPTR+1
	jsr B_SYSTEM.ENABLEDLI

; optimize OK (console.pas), line = 55

	lda #$B8
	sta ATARI.DLISTL
	lda #$FF
	sta ATARI.DLISTL+1

; optimize OK (console.pas), line = 56

	lda #$D8
	jsr B_SYSTEM.SETCHARSET

; optimize OK (console.pas), line = 57

	lda #$00
	sta B_CRT.CRT_INIT.@03018000001800000181000.VRAM_ADDRESS
	lda #$DC
	sta B_CRT.CRT_INIT.@03018000001800000181000.VRAM_ADDRESS+1
	lda #$28
	sta B_CRT.CRT_INIT.@03018000001800000181000.WIDTH
	lda #$19
	sta B_CRT.CRT_INIT.@03018000001800000181000.HEIGHT
	jsr B_CRT.CRT_INIT.@03018000001800000181000

; optimize OK (console.pas), line = 58

	lda #$03
	sta CONSOLESTATE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWLOCATIONHEADER				; PROCEDURE

; optimize FAIL ('ENABLECONSOLE', locations.pas), line = 52

	jsr ENABLECONSOLE

; optimize FAIL ('B_CRT.CRT_CLEAR.@00', locations.pas), line = 53

	jsr B_CRT.CRT_CLEAR.@00

; optimize FAIL ('B_CRT.CRT_WRITECENTERED.@02018986000001000180000', locations.pas), line = 54

	inx
	mwy LOC_NAME :bp2
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITECENTERED.@02018986000001000180000.adr.S,y+
	inx
	mva #$01 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED.@02018986000001000180000

; optimize OK (locations.pas), line = 55

	lda #$00
	sta B_CRT.CRT_INVERT.X
	lda #$01
	sta B_CRT.CRT_INVERT.Y
	lda B_CRT.CRT_SCREENWIDTH
	sta B_CRT.CRT_INVERT.WIDTH
	jsr B_CRT.CRT_INVERT
	mva #$01 adr.CURRENTSUBLOCATIONNAME
	mva #$00 adr.CURRENTSUBLOCATIONNAME+1

; optimize OK (locations.pas), line = 58

	lda #$00
	sta IDX

l_0D38
; --- ForToDoCondition
	ldy IDX
	cpy #$04
	jcs l_0D46

; optimize OK (locations.pas), line = 60

	lda adr.LOC_MAP_PLACES,y
	cmp CURRENTMAP
	jne l_0D5D

; optimize OK (locations.pas), line = 61

	lda IDX
	asl @
	tay
	lda adr.LOC_SUBLOCATION_NAMES,y
	sta @move.src
	lda adr.LOC_SUBLOCATION_NAMES+1,y
	sta @move.src+1
	@moveSTRING CURRENTSUBLOCATIONNAME #40
l_0D5D

; --- ForToDoEpilog
	inc IDX
	jne l_0D38
l_0D46

; optimize FAIL ('B_CRT.CRT_WRITECENTERED.@02018986000001000180000', locations.pas), line = 63

	inx
	mwy CURRENTSUBLOCATIONNAME :bp2
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITECENTERED.@02018986000001000180000.adr.S,y+
	inx
	mva #$02 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED.@02018986000001000180000

; optimize OK (locations.pas), line = 64

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$04
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; ------------------------------------------------------------

IDX	= DATAORIGIN+$0B11

@VarData	= IDX
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADLOCATION					; PROCEDURE
	sta L

; optimize OK (locations.pas), line = 74

	lda #$00
	sta DISPLAYBMP

; optimize OK (locations.pas), line = 75

	lda LASTLOCATIONSTRINGS
	cmp L
	jeq @exit
l_0D8D

; optimize OK (locations.pas), line = 76

	lda L
	sta LASTLOCATIONSTRINGS

; optimize OK (locations.pas), line = 77

	lda L
	sta @CASETMP_0009
	cmp #$01
	jne l_0DA1
@

; optimize OK (locations.pas), line = 78

	lda LOCABANKFNAME
	sta @move.src
	lda LOCABANKFNAME+1
	jmp s_0DB4
l_0DA1
	cmp #$02
	jne l_0DAE

; optimize OK (locations.pas), line = 79

	lda LOCAFORGFNAME
	sta @move.src
	lda LOCAFORGFNAME+1
s_0DB4
	jmp s_0DC1
l_0DAE
	cmp #$03
	jne l_0DBB

; optimize OK (locations.pas), line = 80

	lda LOCAMONYFNAME
	sta @move.src
	lda LOCAMONYFNAME+1
s_0DC1
	jmp s_0DCE
l_0DBB
	cmp #$04
	jne l_0DC8

; optimize OK (locations.pas), line = 81

	lda LOCALOANFNAME
	sta @move.src
	lda LOCALOANFNAME+1
s_0DCE
	jmp s_0DDB
l_0DC8
	cmp #$05
	jne l_0DD5

; optimize OK (locations.pas), line = 82

	lda LOCAPOLIFNAME
	sta @move.src
	lda LOCAPOLIFNAME+1
s_0DDB
	jmp s_0DE8
l_0DD5
	cmp #$06
	jne l_0DE2

; optimize OK (locations.pas), line = 83

	lda LOCACARSFNAME
	sta @move.src
	lda LOCACARSFNAME+1
s_0DE8
	jmp s_0DF5
l_0DE2
	cmp #$07
	jne l_0DEF

; optimize OK (locations.pas), line = 84

	lda LOCAPUBBFNAME
	sta @move.src
	lda LOCAPUBBFNAME+1
s_0DF5
	sta @move.src+1
	@moveSTRING LOCFNAME #32
	lda #$01
	sta DISPLAYBMP
	jmp a_0009
l_0DEF
	cmp #$14
	jne l_0DFC

; optimize OK (locations.pas), line = 85

	lda LOCAPUBCFNAME
	sta @move.src
	lda LOCAPUBCFNAME+1
	sta @move.src+1
	@moveSTRING LOCFNAME #32
	jmp a_0009
l_0DFC
	cmp #$09
	jne l_0E05

; optimize OK (locations.pas), line = 86

	lda LOCASTORFNAME
	sta @move.src
	lda LOCASTORFNAME+1
	jmp s_0E18
l_0E05
	cmp #$0A
	jne l_0E12

; optimize OK (locations.pas), line = 87

	lda LOCAHIDEFNAME
	sta @move.src
	lda LOCAHIDEFNAME+1
s_0E18
	jmp s_0E25
l_0E12
	cmp #$0B
	jne l_0E1F

; optimize OK (locations.pas), line = 88

	lda LOCAGAMBFNAME
	sta @move.src
	lda LOCAGAMBFNAME+1
s_0E25
	jmp s_0E32
l_0E1F
	cmp #$0C
	jne l_0E2C

; optimize OK (locations.pas), line = 89

	lda LOCASUBWFNAME
	sta @move.src
	lda LOCASUBWFNAME+1
s_0E32
	jmp s_0E3F
l_0E2C
	cmp #$0D
	jne l_0E39

; optimize OK (locations.pas), line = 90

	lda LOCAARMSFNAME
	sta @move.src
	lda LOCAARMSFNAME+1
s_0E3F
	sta @move.src+1
	@moveSTRING LOCFNAME #32
	lda #$01
	sta DISPLAYBMP
	jmp a_0009
l_0E39
	cmp #$13
	jne l_0E46

; optimize OK (locations.pas), line = 91

	lda LOCAMAINFNAME
	sta @move.src
	lda LOCAMAINFNAME+1
	sta @move.src+1
	@moveSTRING LOCFNAME #32
	jmp a_0009
l_0E46
	cmp #$16
	jne l_0E4F

; optimize OK (locations.pas), line = 92

	lda LOCAJOBBFNAME
	sta @move.src
	lda LOCAJOBBFNAME+1
	sta @move.src+1
	@moveSTRING LOCFNAME #32
	jmp a_0009
l_0E4F
	cmp #$18
	jne l_0E58

; optimize OK (locations.pas), line = 93

	lda LOCAMAJOFNAME
	sta @move.src
	lda LOCAMAJOFNAME+1
	sta @move.src+1
	@moveSTRING LOCFNAME #32
	lda #$01
	sta DISPLAYBMP
	jmp a_0009
l_0E58
	cmp #$17
	jne l_0E65

; optimize OK (locations.pas), line = 94

	lda LOCACENTFNAME
	sta @move.src
	lda LOCACENTFNAME+1
	sta @move.src+1
	@moveSTRING LOCFNAME #32
	jmp a_0009
l_0E65
	cmp #$19
	jne l_0E6E

; optimize OK (locations.pas), line = 95

	lda LOCACOURFNAME
	sta @move.src
	lda LOCACOURFNAME+1
	sta @move.src+1
	@moveSTRING LOCFNAME #32
	jmp a_0009
l_0E6E
	cmp #$1A
	jne l_0E77

; optimize OK (locations.pas), line = 96

	lda LOCACAUGFNAME
	sta @move.src
	lda LOCACAUGFNAME+1
	sta @move.src+1
	@moveSTRING LOCFNAME #32
	jmp a_0009
l_0E77
	cmp #$1B
	jne l_0E80

; optimize OK (locations.pas), line = 97

	lda LOCAROADFNAME
	sta @move.src
	lda LOCAROADFNAME+1
	sta @move.src+1
	@moveSTRING LOCFNAME #32
	jmp a_0009
l_0E80
	cmp #$15
	jne l_0E89

; optimize OK (locations.pas), line = 98

	lda LOCAUPDTFNAME
	sta @move.src
	lda LOCAUPDTFNAME+1
	sta @move.src+1
	@moveSTRING LOCFNAME #32
	jmp a_0009
l_0E89
	cmp #$1C
	jne l_0E92

; optimize OK (locations.pas), line = 99

	lda LOCASETUFNAME
	sta @move.src
	lda LOCASETUFNAME+1
	sta @move.src+1
	@moveSTRING LOCFNAME #32
	jmp a_0009
l_0E92
	cmp #$1E
	jne l_0E9B

; optimize OK (locations.pas), line = 100

	lda LOCACREDFNAME
	sta @move.src
	lda LOCACREDFNAME+1
	sta @move.src+1
	@moveSTRING LOCFNAME #32
l_0E9B
a_0009

; optimize OK (locations.pas), line = 102

	lda LOCFNAME
	sta LOADXAPL.FNAME
	lda LOCFNAME+1
	sta LOADXAPL.FNAME+1
	lda #$00
	sta LOADXAPL.OUTPUTPOINTER
	lda #$C0
	sta LOADXAPL.OUTPUTPOINTER+1
	jsr LOADXAPL

; optimize OK (locations.pas), line = 104

	lda SHOWBITMAPS
	jeq @exit
l_0ECC

; optimize OK (locations.pas), line = 106

	lda DISPLAYBMP
	cmp #$01
	jne l_0EE1

; optimize OK (locations.pas), line = 108

	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A
	lda #$DC
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A+1
	lda #$C0
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@03018000001810000188000
	m@INLINE
	.ENDL

; optimize OK (locations.pas), line = 109

	lda #$42
	sta adr.LOCFNAME+$05

; optimize OK (locations.pas), line = 110

	lda adr.LOCFNAME+$0A
	sta E1

; optimize OK (locations.pas), line = 111

	lda adr.LOCFNAME+$0B
	sta E2

; optimize OK (locations.pas), line = 112

	lda #$50
	sta adr.LOCFNAME+$0A

; optimize OK (locations.pas), line = 113

	lda #$4C
	sta adr.LOCFNAME+$0B

; optimize OK (locations.pas), line = 114

	lda LOCFNAME
	sta LOADXAPL.FNAME
	lda LOCFNAME+1
	sta LOADXAPL.FNAME+1
	lda #$00
	sta LOADXAPL.OUTPUTPOINTER
	lda #$D8
	sta LOADXAPL.OUTPUTPOINTER+1
	jsr LOADXAPL

; optimize OK (locations.pas), line = 115

	lda #$4C
	sta adr.LOCFNAME+$05

; optimize OK (locations.pas), line = 116

	lda E1
	sta adr.LOCFNAME+$0A

; optimize OK (locations.pas), line = 117

	lda E2
	sta adr.LOCFNAME+$0B

; optimize OK (locations.pas), line = 118

	lda #$04
	sta MAPCOLORA

; optimize OK (locations.pas), line = 119

	lda #$0A
	sta MAPCOLORB

; optimize FAIL ('ENABLEBITMAPCONSOLE', locations.pas), line = 120

	jsr ENABLEBITMAPCONSOLE

; optimize FAIL ('CRT_READKEYORFIRE', locations.pas), line = 121

	jsr CRT_READKEYORFIRE

; optimize FAIL ('PRELOADMAP', locations.pas), line = 123

	jsr PRELOADMAP

; optimize OK (locations.pas), line = 124

	lda #$06
	sta MAPCOLORB

; optimize OK (locations.pas), line = 125

	lda #$88
	sta MAPCOLORA

; optimize FAIL ('ENABLECONSOLE', locations.pas), line = 126

	jsr ENABLECONSOLE
l_0EE1

; ------------------------------------------------------------

L	= DATAORIGIN+$0B12
adr.LOCFNAME	= [DATAORIGIN+$0B13] .array [33]
.var LOCFNAME	= adr.LOCFNAME .word
DISPLAYBMP	= DATAORIGIN+$0B34
E1	= DATAORIGIN+$0B35
E2	= DATAORIGIN+$0B36
@CASETMP_0009	= DATAORIGIN+$0B37

@VarData	= L
@VarDataSize	= 38

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWLOCATION					; FUNCTION
	sta L

; optimize OK (locations.pas), line = 175

	jsr LOADLOCATION

; optimize OK (locations.pas), line = 176

	lda #$63
	sta CURRENTSUBLOCATION

; optimize OK (locations.pas), line = 177

	lda #$00
	sta I

l_0F45
; --- ForToDoCondition
	ldy I
	cpy #$04
	jcs l_0F53

; optimize OK (locations.pas), line = 178

	lda adr.LOC_MAP_PLACES,y
	cmp CURRENTMAP
	jne l_0F6A
	lda I
	sta CURRENTSUBLOCATION
l_0F6A

; --- ForToDoEpilog
	inc I
	jne l_0F45
l_0F53

; optimize OK (locations.pas), line = 179

	lda CURRENTSUBLOCATION
	cmp #$63
	jne l_0F8A

; --- RepeatUntilProlog
l_0F8C
	jmp l_0F8C
l_0F8A

; optimize OK (locations.pas), line = 180

	lda LOC_NOPTIONS
	jne l_0FA5

; optimize OK (locations.pas), line = 182

	lda #$63
	sta RESULT
	jmp @exit
l_0FA5

; optimize FAIL ('SHOWLOCATIONHEADER', locations.pas), line = 186

	jsr SHOWLOCATIONHEADER

; optimize OK (locations.pas), line = 189

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$04
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', locations.pas), line = 190

	inx
	mva LOC_DESCRIPTION_1 :STACKORIGIN,x
	mva LOC_DESCRIPTION_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (locations.pas), line = 191

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$05
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', locations.pas), line = 192

	inx
	mva LOC_DESCRIPTION_2 :STACKORIGIN,x
	mva LOC_DESCRIPTION_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (locations.pas), line = 194

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$07
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (locations.pas), line = 195

	lda #$00
	sta NOPT

; optimize OK (locations.pas), line = 196

	lda #$07
	sta J

; optimize OK (locations.pas), line = 197

	lda #$00
	sta I

l_0FCD
; --- ForToDoCondition
	lda I
	cmp #$0A
	jcs l_0FDB

; optimize OK (locations.pas), line = 199

	asl @
	tay
	lda adr.LOC_OPTIONS,y
	sta @move.src
	lda adr.LOC_OPTIONS+1,y
	sta @move.src+1
	@moveSTRING TMPS #40

; optimize OK (locations.pas), line = 200

	lda adr.TMPS
	jne l_0FEF
	jmp b_0FCD
l_0FEF

; optimize OK (locations.pas), line = 202

	lda adr.TMPS+$01
	jne l_1005

; optimize FAIL ('CRT_WRITELN', locations.pas), line = 204

	inx
	mva TMPS :STACKORIGIN,x
	mva TMPS+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (locations.pas), line = 205

	inc J
	jmp l_101C
l_1005

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', locations.pas), line = 209

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (locations.pas), line = 210

	inc J

; optimize OK (locations.pas), line = 211

	ldy NOPT
	lda J
	sta adr.NPOS,y

; optimize FAIL ('CRT_WRITELN', locations.pas), line = 212

	inx
	mva TMPS :STACKORIGIN,x
	mva TMPS+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (locations.pas), line = 213

	inc J

; optimize OK (locations.pas), line = 214

	inc NOPT
l_101C

; --- ForToDoEpilog
	inc I
	jne l_0FCD
l_0FDB
b_0FCD

; optimize OK (locations.pas), line = 218

	lda #$00
	sta CHOICE

; --- RepeatUntilProlog
l_1051

; optimize OK (locations.pas), line = 220

	lda #$00
	sta I
	ldy NOPT
	dey
	sty @FORTMP_105D_0

l_1060
; --- ForToDoCondition
	lda @FORTMP_105D_0::#$00
	cmp I
	jcc l_106E

; optimize OK (locations.pas), line = 223

	ldy I
	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda adr.NPOS,y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (locations.pas), line = 224

	lda #$00
	jsr B_CRT.CRT_WRITE.@010186000

; --- ForToDoEpilog
	inc I
	jne l_1060
l_106E

; optimize OK (locations.pas), line = 226

	ldy CHOICE
	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda adr.NPOS,y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (locations.pas), line = 227

	lda #$1E
	jsr B_CRT.CRT_WRITE.@010186000

; optimize FAIL ('READKEYANDSTICK', locations.pas), line = 229

	jsr READKEYANDSTICK
	lda READKEYANDSTICK.RESULT
	sta CH

; optimize OK (locations.pas), line = 230

	lda #$0A
	jsr WAITFRAMES

; --- RepeatUntilProlog
l_108E

; optimize FAIL ('CHECKKEYANDSTICK', locations.pas), line = 232

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta TMPCH

; optimize OK (locations.pas), line = 233

	cmp CH
	jeq l_108E

; optimize OK (locations.pas), line = 235

	lda CH
	cmp #$0C
	jne l_10B3

; optimize OK (locations.pas), line = 236

	ldy CHOICE
	iny
	sty RESULT
	jmp @exit
l_10B3

; optimize OK (locations.pas), line = 240

	lda CH
	cmp #$0E
	jne l_10D2

; optimize OK (locations.pas), line = 242

	lda CHOICE
	jeq l_10E5
	dec CHOICE
l_10E5
l_10D2

; optimize OK (locations.pas), line = 245

	lda CH
	cmp #$0F
	jne l_1106

; optimize OK (locations.pas), line = 247

	lda CHOICE
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp NOPT
@
	jcs l_111F
	inc CHOICE
l_111F
l_1106

; optimize OK (locations.pas), line = 276

	lda CH
	cmp #$0C
	jne l_1051

; optimize OK (locations.pas), line = 278

	ldy CHOICE
	iny
	sty RESULT
@exit

; ------------------------------------------------------------

L	= DATAORIGIN+$0B38
RESULT	= DATAORIGIN+$0B39
I	= DATAORIGIN+$0B3A
CHOICE	= DATAORIGIN+$0B3B
adr.TMPS	= [DATAORIGIN+$0B3C] .array [41]
.var TMPS	= adr.TMPS .word
adr.NPOS	= [DATAORIGIN+$0B65] .array [7]
.var NPOS	= adr.NPOS .word
J	= DATAORIGIN+$0B6C
NOPT	= DATAORIGIN+$0B6D
CH	= DATAORIGIN+$0B6E
TMPCH	= DATAORIGIN+$0B6F

@VarData	= L
@VarDataSize	= 55

	rts						; ret
.endl

.local	NEXTPLAYER					; PROCEDURE

; optimize OK (player.pas), line = 5

	inc CURRENTPLAYER

; optimize OK (player.pas), line = 6

	lda CURRENTPLAYER
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp NPLAYERS
@
	jcc l_116B
	jeq l_116B

; optimize OK (player.pas), line = 8

	lda CURRENTPLAYER
	sub NPLAYERS
	sta CURRENTPLAYER

; optimize OK (player.pas), line = 9

	inc CURRENTMONTH

; optimize OK (player.pas), line = 10

	lda CURRENTMONTH
	cmp #$0D
	jcc l_1194

; optimize OK (player.pas), line = 11

	inc CURRENTYEAR

; optimize OK (player.pas), line = 12

	lda #$01
	sta CURRENTMONTH
l_1194
l_116B

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITPLAYERS					; PROCEDURE

; optimize OK (player.pas), line = 23

	lda #$00
	tay

l_11B4
; --- ForToDoCondition
	cpy #$04
	jcs l_11C2

; optimize OK (player.pas), line = 25

	lda #$03
	sta adr.PLMAPPOSX,y

; optimize OK (player.pas), line = 26

	lda #$02
	sta adr.PLMAPPOSY,y

; optimize OK (player.pas), line = 27

	lda #$00
	sta adr.PLCURRENTMAP,y

; --- ForToDoEpilog
	iny
	jne l_11B4
l_11C2
	sty K

; ------------------------------------------------------------

K	= DATAORIGIN+$0B71

@VarData	= K
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLAYERSTURN					; FUNCTION

; optimize FAIL ('B_CRT.CRT_CLEAR.@00', player.pas), line = 46

	jsr B_CRT.CRT_CLEAR.@00

; optimize OK (player.pas), line = 47

	lda #$04
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$01
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (player.pas), line = 48

	lda CURRENTPLAYER
	asl @
	asl @
	asl @
	sta Z

; optimize FAIL ('B_CRT.CRT_WRITECENTERED.@02018986000001000180000', player.pas), line = 49

	inx
	lda Z
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :bp2
	lda adr.GANGSTERNAMES+1,y
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITECENTERED.@02018986000001000180000.adr.S,y+
	inx
	mva #$05 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED.@02018986000001000180000

; optimize OK (player.pas), line = 50

	lda #$06
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$02
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (player.pas), line = 53

	lda #$00
	sta RMT.TRMT.INIT.A
	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.INIT

; optimize FAIL ('RMT.TRMT.PLAY', player.pas), line = 54

	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.PLAY

; optimize OK (player.pas), line = 55

	lda #$01
	sta PLAYMUSIC

; optimize OK (player.pas), line = 56

	lda #$78
	jsr WAITFRAMES

; optimize FAIL ('RMT.TRMT.STOP', player.pas), line = 57

	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.STOP

; optimize OK (player.pas), line = 58

	lda #$00
	sta PLAYMUSIC

; optimize OK (player.pas), line = 69

	sta RESULT

; optimize OK (player.pas), line = 70

	lda CURRENTPLAYER
	jne l_121C

; optimize OK (player.pas), line = 72

	lda #$08
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$28
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (player.pas), line = 73

	lda #$09
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$29
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL ('READKEYANDSTICK', player.pas), line = 74

	jsr READKEYANDSTICK
	lda READKEYANDSTICK.RESULT
	sta CH

; optimize OK (player.pas), line = 75

	cmp #$1E
	jne l_1239

; optimize OK (player.pas), line = 76

	lda #$1C
	jsr LOADLOCATION

; optimize FAIL ('LOADGAME', player.pas), line = 77

	jsr LOADGAME

; optimize FAIL ('WAITFORKEY', player.pas), line = 78

	jsr WAITFORKEY

; optimize OK (player.pas), line = 79

	lda #$13
	jsr LOADLOCATION

; optimize OK (player.pas), line = 80

	lda #$1D
	sta RESULT
l_1239

; optimize OK (player.pas), line = 82

	lda CH
	cmp #$1F
	jne l_1258

; optimize OK (player.pas), line = 83

	lda #$1C
	jsr LOADLOCATION

; optimize FAIL ('BLACKCONSOLE', player.pas), line = 84

	jsr BLACKCONSOLE

; optimize FAIL ('SAVEGAME', player.pas), line = 85

	jsr SAVEGAME

; optimize FAIL ('ENABLECONSOLE', player.pas), line = 86

	jsr ENABLECONSOLE

; optimize FAIL ('B_CRT.CRT_CLEAR.@00', player.pas), line = 87

	jsr B_CRT.CRT_CLEAR.@00

; optimize OK (player.pas), line = 88

	lda #$01
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$13
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL ('WAITFORKEY', player.pas), line = 89

	jsr WAITFORKEY

; optimize OK (player.pas), line = 90

	lda #$13
	jsr LOADLOCATION
l_1258
	jmp l_1270
l_121C

; optimize FAIL ('WAITFORKEY', player.pas), line = 95

	jsr WAITFORKEY
l_1270

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', player.pas), line = 97

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', player.pas), line = 98

	jsr B_CRT.CRT_NEWLINE.@00
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0B72
CH	= DATAORIGIN+$0B73
Z	= DATAORIGIN+$0B74

@VarData	= CH
@VarDataSize	= 2

	rts						; ret
.endl

.local	PLACECURRENTPLAYER				; PROCEDURE

; optimize OK (player.pas), line = 105

	ldy CURRENTPLAYER
	lda adr.PLMAPPOSX,y
	sta MAPPOS_X

; optimize OK (player.pas), line = 106

	lda adr.PLMAPPOSY,y
	sta MAPPOS_Y

; optimize OK (player.pas), line = 107

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda MAPPOS_X
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	asl @
	add #$31
	sta PLAYERPOS_X

; optimize OK (player.pas), line = 108

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda MAPPOS_Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	asl @
	add #$24
	sta PLAYERPOS_Y

; optimize OK (player.pas), line = 109

	lda #$01
	sta SPRITEMOVEDIR

; optimize OK (player.pas), line = 110

	lda adr.PLCURRENTMAP,y
	sta CURRENTMAP

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ADDMONEY					; PROCEDURE

; optimize OK (helpers_game.pas), line = 7

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	add AMOUNT
	sta adr.PLMONEY,y
	lda adr.PLMONEY+1,y
	adc AMOUNT+1
	sta adr.PLMONEY+1,y
	lda adr.PLMONEY+2,y
	adc #$00
	sta adr.PLMONEY+2,y
	lda adr.PLMONEY+3,y
	adc #$00
	sta adr.PLMONEY+3,y

; ------------------------------------------------------------

AMOUNT	= DATAORIGIN+$0B75

@VarData	= AMOUNT
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SUBMONEY					; PROCEDURE

; optimize OK (helpers_game.pas), line = 13

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sub AMOUNT
	sta adr.PLMONEY,y
	lda adr.PLMONEY+1,y
	sbc AMOUNT+1
	sta adr.PLMONEY+1,y
	lda adr.PLMONEY+2,y
	sbc #$00
	sta adr.PLMONEY+2,y
	lda adr.PLMONEY+3,y
	sbc #$00
	sta adr.PLMONEY+3,y

; ------------------------------------------------------------

AMOUNT	= DATAORIGIN+$0B77

@VarData	= AMOUNT
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ADDPOINTS					; PROCEDURE
	sta PT

; optimize OK (helpers_game.pas), line = 19

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add PT
	sta adr.PLNEWPOINTS,y

; ------------------------------------------------------------

PT	= DATAORIGIN+$0B79

@VarData	= PT
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVEPOINTS					; PROCEDURE
	sta PT

; optimize OK (helpers_game.pas), line = 25

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	sta :STACKORIGIN+9
	ldy #$00
	lda :STACKORIGIN+9
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+9
	cmp PT
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	jpl l_1309

; optimize OK (helpers_game.pas), line = 26

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLNEWPOINTS,y
	jmp @exit
l_1309

; optimize OK (helpers_game.pas), line = 29

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	sub PT
	sta adr.PLNEWPOINTS,y

; ------------------------------------------------------------

PT	= DATAORIGIN+$0B7A

@VarData	= PT
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRACKEDBANK					; PROCEDURE

; optimize OK (helpers_game.pas), line = 37

	lda #$01
	jsr LOADLOCATION

; optimize OK (helpers_game.pas), line = 39

	lda #$AF
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	inx
	mva #$04 :STACKORIGIN,x
	jsr @shlEAX_CL.BYTE
	dex
	lda :STACKORIGIN,x
	sta M
	lda :STACKORIGIN+STACKWIDTH,x
	sta M+1
	dex

; optimize OK (helpers_game.pas), line = 40

	lda M
	add #$A0
	sta :STACKORIGIN+9
	lda M+1
	adc #$0F
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add P
	sta M
	lda :STACKORIGIN+STACKWIDTH+9
	adc P+1
	sta M+1

; optimize FAIL ('ENABLECONSOLE', helpers_game.pas), line = 43

	jsr ENABLECONSOLE

; optimize FAIL ('SHOWLOCATIONHEADER', helpers_game.pas), line = 44

	jsr SHOWLOCATIONHEADER

; optimize OK (helpers_game.pas), line = 45

	lda #$06
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0A
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (helpers_game.pas), line = 46

	lda #$07
	sta K

; optimize OK (helpers_game.pas), line = 49

	lda P+1
	bne @+
	lda P
	cmp #$01
@
	jne l_135C

; optimize OK (helpers_game.pas), line = 52

	lda TMPOPPORTUNITY
	jeq l_137B
	lda CURRENTSUBLOCATION
	jne l_137B

; optimize OK (helpers_game.pas), line = 54

	lda #$07
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0F
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (helpers_game.pas), line = 55

	lda K
	add #$02
	sta K

; optimize OK (helpers_game.pas), line = 56

	lda M
	add #$4C
	sta M
	lda M+1
	adc #$1D
	sta M+1
l_137B
l_135C

; optimize OK (helpers_game.pas), line = 60

	lda K
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0E
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (helpers_game.pas), line = 61

	lda K
	add #$01
	sta B_CRT.CRT_GOTOXY.Y
	lda #$11
	sta B_CRT.CRT_GOTOXY.X
	jsr B_CRT.CRT_GOTOXY

; optimize OK (helpers_game.pas), line = 62

	lda M
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda M+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('CRT_WRITELN', helpers_game.pas), line = 63

	inx
	mva #$73 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', helpers_game.pas), line = 64

	jsr WAITFORKEY

; optimize OK (helpers_game.pas), line = 65

	lda M
	sta ADDMONEY.AMOUNT
	lda M+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (helpers_game.pas), line = 66

	lda #$04
	jsr ADDPOINTS

; ------------------------------------------------------------

P	= DATAORIGIN+$0B7B
M	= DATAORIGIN+$0B7D
K	= DATAORIGIN+$0B7F

@VarData	= P
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PREPAREFIGHTAGAINSTPOLICE			; PROCEDURE

; optimize OK (helpers_game.pas), line = 76

	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	lda FIGHT_POLICE_STRING_1
	sta @move.src
	lda FIGHT_POLICE_STRING_1+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (helpers_game.pas), line = 77

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (helpers_game.pas), line = 78

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$05
	jcc l_13D3

; optimize FAIL (2, helpers_game.pas), line = 79

	inx
	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$05 :STACKORIGIN,x
	lda adr.PLRANK,y
	lsr @
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM.@010180000.RESULT
	ldy :STACKORIGIN-1,x
	sta adr.FP_N,y
	dex
	dex
	jmp l_13F0
l_13D3

; optimize OK (helpers_game.pas), line = 81

	lda #$05
	sta adr.FP_N+$01
l_13F0

; optimize OK (helpers_game.pas), line = 82

	lda #$00
	sta K
	ldy adr.FP_N+$01
	dey
	sty @FORTMP_1402_0

l_1405
; --- ForToDoCondition
	lda @FORTMP_1402_0::#$00
	cmp K
	jcc l_1413

; optimize OK (helpers_game.pas), line = 84

	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta TMP

; optimize OK (helpers_game.pas), line = 85

	ldy K
	lda TMP
	sta adr.FP_SEX+$10,y

; optimize OK (helpers_game.pas), line = 86

	tya
	asl @
	tay
	lda adr.FP_NAME+$20,y
	sta @move.dst
	lda adr.FP_NAME+1+$20,y
	sta @move.dst+1
	lda FIGHT_POLICE_STRING_2
	sta @move.src
	lda FIGHT_POLICE_STRING_2+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (helpers_game.pas), line = 87

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	ldy #1
	cmp #$06
	bcs @+
	dey
@
	sty :STACKORIGIN+11
	asl :STACKORIGIN+11
	lda #$05
	add :STACKORIGIN+11
	ldy K
	sta adr.FP_WEAPON+$10,y

; optimize FAIL (2, helpers_game.pas), line = 88

	inx
	inx
	lda #$10
	add K
	sta :STACKORIGIN-1,x
	lda #$00
	adc #$00
	sta :STACKORIGIN-1+STACKWIDTH,x
	mva #$12 :STACKORIGIN,x
	inx
	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	sta :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr @shlEAX_CL.BYTE
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	jsr addAL_CL
	dex
	lda #$0A
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	sub SYSTEM.RANDOM.@010180000.RESULT
	ldy :STACKORIGIN-1,x
	sta adr.FP_ENERGY,y
	dex
	dex

; --- ForToDoEpilog
	inc K
	jne l_1405
l_1413

; ------------------------------------------------------------

K	= DATAORIGIN+$0B80

@VarData	= K
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PAYMONEY					; FUNCTION

; optimize OK (helpers_game.pas), line = 113

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sta :STACKORIGIN+9
	lda adr.PLMONEY+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.PLMONEY+2,y
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda adr.PLMONEY+3,y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda PRICE
	sta :STACKORIGIN+10
	ldy #$00
	lda PRICE+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_1489

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', helpers_game.pas), line = 115

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('CRT_WRITELN', helpers_game.pas), line = 116

	inx
	mva NOT_ENOUGH_MONEY_STRING :STACKORIGIN,x
	mva NOT_ENOUGH_MONEY_STRING+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_READKEYORFIRE', helpers_game.pas), line = 117

	jsr CRT_READKEYORFIRE

; optimize OK (helpers_game.pas), line = 118

	lda #$00
	sta RESULT
	jmp @exit
l_1489

; optimize OK (helpers_game.pas), line = 121

	lda PRICE
	sta SUBMONEY.AMOUNT
	lda PRICE+1
	sta SUBMONEY.AMOUNT+1
	jsr SUBMONEY

; optimize OK (helpers_game.pas), line = 122

	lda #$01
	sta RESULT
@exit

; ------------------------------------------------------------

PRICE	= DATAORIGIN+$0B82
RESULT	= DATAORIGIN+$0B84

@VarData	= PRICE
@VarDataSize	= 2

	rts						; ret
.endl

.local	PRINTGANGSTERS					; PROCEDURE

; optimize OK (helpers_game.pas), line = 129

	lda #$00
	sta GANGSTERCOUNT

; optimize FAIL ('B_CRT.CRT_WHEREY', helpers_game.pas), line = 130

	jsr B_CRT.CRT_WHEREY
	lda B_CRT.CRT_WHEREY.RESULT
	sub #$01
	sta Y

; optimize OK (helpers_game.pas), line = 131

	lda #$00
	sta K

l_14B5
; --- ForToDoCondition
	ldy K
	cpy #$20
	jcs l_14C3

; optimize OK (helpers_game.pas), line = 133

	lda adr.PLGANGSTERS,y
	cmp CURRENTPLAYER
	jne l_14DA

; optimize OK (helpers_game.pas), line = 135

	lda #$00
	sta X

; optimize OK (helpers_game.pas), line = 136

	lda GANGSTERCOUNT
	and #$01
	cmp #$01
	jne l_14F5

; optimize OK (helpers_game.pas), line = 137

	lda #$14
	sta X
	jmp l_1503
l_14F5

; optimize OK (helpers_game.pas), line = 140

	lda Y
	add #$03
	sta Y

; optimize OK (helpers_game.pas), line = 141

	lda SHOWWEAPONS
	cmp #$01
	jne l_151F
	inc Y
l_1503
l_151F

; optimize OK (helpers_game.pas), line = 144

	lda X
	sta B_CRT.CRT_GOTOXY.X
	lda Y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (helpers_game.pas), line = 145

	lda GANGSTERCOUNT
	add #$01
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda #$00
	adc #$00
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers_game.pas), line = 146

	inx
	mva #$76 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers_game.pas), line = 147

	inx
	lda K
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (helpers_game.pas), line = 148

	lda Y
	add #$01
	sta B_CRT.CRT_GOTOXY.Y
	lda X
	sta B_CRT.CRT_GOTOXY.X
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers_game.pas), line = 149

	inx
	mva #$7A :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (helpers_game.pas), line = 150

	ldy K
	lda adr.GANGSTERSTR,y
	jsr B_CRT.CRT_WRITE.@010180000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers_game.pas), line = 151

	inx
	mva #$7D :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (helpers_game.pas), line = 152

	ldy K
	lda adr.GANGSTERINT,y
	jsr B_CRT.CRT_WRITE.@010180000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers_game.pas), line = 153

	inx
	mva #$81 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (helpers_game.pas), line = 154

	ldy K
	lda adr.GANGSTERBRUT,y
	jsr B_CRT.CRT_WRITE.@010180000

; optimize OK (helpers_game.pas), line = 155

	lda #$00
	jsr B_CRT.CRT_WRITE.@010186000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers_game.pas), line = 156

	inx
	mva #$65 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (helpers_game.pas), line = 157

	ldy K
	lda adr.GANGSTERHEALTH,y
	jsr B_CRT.CRT_WRITE.@010180000

; optimize OK (helpers_game.pas), line = 158

	lda SHOWWEAPONS
	cmp #$01
	jne l_1586

; optimize OK (helpers_game.pas), line = 159

	lda Y
	add #$02
	sta B_CRT.CRT_GOTOXY.Y
	lda X
	sta B_CRT.CRT_GOTOXY.X
	jsr B_CRT.CRT_GOTOXY

; optimize OK (helpers_game.pas), line = 160

	ldy K
	lda adr.GANGSTERWEAPON,y
	sta T

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers_game.pas), line = 161

	inx
	lda T
	asl @
	tay
	lda adr.WEAPONNAMES,y
	sta :STACKORIGIN,x
	lda adr.WEAPONNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100
l_1586

; optimize OK (helpers_game.pas), line = 163

	ldy GANGSTERCOUNT
	lda K
	sta adr.GANGSTERMAP,y

; optimize OK (helpers_game.pas), line = 164

	inc GANGSTERCOUNT
l_14DA

; --- ForToDoEpilog
	inc K
	jne l_14B5
l_14C3

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', helpers_game.pas), line = 167

	jsr B_CRT.CRT_NEWLINE.@00

; ------------------------------------------------------------

K	= DATAORIGIN+$0B85
X	= DATAORIGIN+$0B86
Y	= DATAORIGIN+$0B87
T	= DATAORIGIN+$0B88

@VarData	= K
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SELECTGANGSTER					; PROCEDURE

; optimize OK (helpers_game.pas), line = 174

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$01
	jne l_15D7

; optimize OK (helpers_game.pas), line = 175

	lda CURRENTPLAYER
	asl @
	asl @
	asl @
	sta CURRENTGANGSTER
	jmp @exit
l_15D7

; optimize FAIL ('PRINTGANGSTERS', helpers_game.pas), line = 179

	jsr PRINTGANGSTERS

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', helpers_game.pas), line = 180

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers_game.pas), line = 181

	inx
	mva YOUR_CHOICE_STRING :STACKORIGIN,x
	mva YOUR_CHOICE_STRING+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (helpers_game.pas), line = 182

	lda #$01
	sta READVALUE.MINVALUE
	lda #$00
	sta READVALUE.MINVALUE+1
	lda GANGSTERCOUNT
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta X

; optimize OK (helpers_game.pas), line = 183

	jne l_1603
	lda #$63
	jmp l_1611
l_1603

; optimize OK (helpers_game.pas), line = 184

	ldy X
	lda adr.GANGSTERMAP-$01,y
l_1611
	sta CURRENTGANGSTER

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', helpers_game.pas), line = 185

	jsr B_CRT.CRT_NEWLINE.@00

; ------------------------------------------------------------

X	= DATAORIGIN+$0B89

@VarData	= X
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GOTOCOURT					; FUNCTION

; optimize OK (sprites.pas), line = 18

	lda #$04
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta R

; optimize OK (sprites.pas), line = 19

	sta @CASETMP_000A
	cmp #$00
	jne l_1633
@

; optimize OK (sprites.pas), line = 21

	lda #$0F
	sta I
	lda #$02
	sta J
	sta K
	jmp a_000A
l_1633
	cmp #$01
	jne l_1646

; optimize OK (sprites.pas), line = 24

	lda #$10
	sta I
	lda #$02
	sta J
	lda #$05
	sta K
	jmp a_000A
l_1646
	cmp #$02
	jne l_1659

; optimize OK (sprites.pas), line = 27

	lda #$02
	sta I
	lda #$0A
	sta J
	lda #$09
	sta K
	jmp a_000A
l_1659
	cmp #$03
	jne l_166C

; optimize OK (sprites.pas), line = 30

	lda #$0D
	sta I
	lda #$0A
	sta J
	lda #$04
	sta K
l_166C
a_000A

; optimize FAIL ('BLACKCONSOLE', sprites.pas), line = 33

	jsr BLACKCONSOLE

; optimize OK (sprites.pas), line = 36

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLOPPORTUNITY,y

; optimize OK (sprites.pas), line = 39

	lda I
	sta adr.PLMAPPOSX,y

; optimize OK (sprites.pas), line = 40

	lda J
	sta adr.PLMAPPOSY,y

; optimize OK (sprites.pas), line = 41

	lda K
	sta adr.PLCURRENTMAP,y

; optimize FAIL ('PLACECURRENTPLAYER', sprites.pas), line = 42

	jsr PLACECURRENTPLAYER

; optimize OK (sprites.pas), line = 43

	lda MAPPOS_X
	sta OLDMAPPOS_X

; optimize OK (sprites.pas), line = 44

	lda MAPPOS_Y
	sta OLDMAPPOS_Y

; optimize FAIL ('PRELOADMAP', sprites.pas), line = 45

	jsr PRELOADMAP

; optimize OK (sprites.pas), line = 47

	lda #$19
	jsr LOADLOCATION

; optimize FAIL ('ENABLECONSOLE', sprites.pas), line = 48

	jsr ENABLECONSOLE

; optimize OK (sprites.pas), line = 49

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	lsr @
	add #$01
	sta PRISONTIME

; optimize FAIL ('SHOWLOCATIONHEADER', sprites.pas), line = 51

	jsr SHOWLOCATIONHEADER

; optimize OK (sprites.pas), line = 53

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$05
	jcc l_16D9

; optimize OK (sprites.pas), line = 55

	lda #$01
	jsr CRT_WRITELN2_LOCSTR

; optimize FAIL ('GETYESNO', sprites.pas), line = 56

	jsr GETYESNO
	lda GETYESNO.RESULT
	sta R

; optimize OK (sprites.pas), line = 57

	cmp #$01
	jne l_16F2

; optimize OK (sprites.pas), line = 59

	lda #$02
	jsr CRT_WRITELN_LOCSTR

; optimize OK (sprites.pas), line = 60

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda #$10
	sta READVALUE.MAXVALUE
	lda #$27
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta LAWYER
	lda READVALUE.RESULT+1
	sta LAWYER+1

; optimize FAIL ('CRT_NEWLINE2', sprites.pas), line = 61

	jsr CRT_NEWLINE2

; optimize OK (sprites.pas), line = 62

	lda LAWYER
	sta PAYMONEY.PRICE
	lda LAWYER+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	sta T

; optimize OK (sprites.pas), line = 63

	cmp #$01
	jne l_1714

; optimize OK (sprites.pas), line = 66

	lda LAWYER+1
	lsr @
	lsr @
	add #$01
	sta CHANGE

; optimize OK (sprites.pas), line = 67

	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta CHANGE

; optimize OK (sprites.pas), line = 68

	lda PRISONTIME
	sub CHANGE
	sta PRISONTIME

; optimize OK (sprites.pas), line = 69

	jpl l_1747

; optimize OK (sprites.pas), line = 70

	lda #$00
	sta PRISONTIME
l_1747

; optimize OK (sprites.pas), line = 71

	ldy CURRENTPLAYER
	lda PRISONTIME
	sta adr.PLPRISON,y

; optimize OK (sprites.pas), line = 72

	lda PRISONTIME
	jne l_1769

; optimize OK (sprites.pas), line = 74

	lda #$02
	jsr ADDPOINTS

; optimize OK (sprites.pas), line = 75

	lda #$03
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 76

	jsr WAITFORKEY

; optimize OK (sprites.pas), line = 77

	lda #$01
	sta RESULT
	jmp @exit
l_1769

; optimize OK (sprites.pas), line = 80

	lda #$03
	jsr REMOVEPOINTS

; optimize OK (sprites.pas), line = 81

	lda #$04
	jsr CRT_WRITELN_LOCSTR

; optimize OK (sprites.pas), line = 82

	ldy #$00
	lda PRISONTIME
	spl
	dey
	sta B_CRT.CRT_WRITE.@010185000.NUM
	sty B_CRT.CRT_WRITE.@010185000.NUM+1
	sty B_CRT.CRT_WRITE.@010185000.NUM+2
	sty B_CRT.CRT_WRITE.@010185000.NUM+3
	jsr B_CRT.CRT_WRITE.@010185000

; optimize OK (sprites.pas), line = 83

	lda #$05
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 84

	jsr WAITFORKEY

; optimize OK (sprites.pas), line = 85

	lda #$01
	sta RESULT
	jmp @exit
l_1714
l_16F2
l_16D9

; optimize OK (sprites.pas), line = 92

	ldy CURRENTPLAYER
	lda PRISONTIME
	sta adr.PLPRISON,y

; optimize OK (sprites.pas), line = 93

	lda #$06
	jsr CRT_WRITE_LOCSTR

; optimize OK (sprites.pas), line = 94

	ldy #$00
	lda PRISONTIME
	spl
	dey
	sta B_CRT.CRT_WRITE.@010185000.NUM
	sty B_CRT.CRT_WRITE.@010185000.NUM+1
	sty B_CRT.CRT_WRITE.@010185000.NUM+2
	sty B_CRT.CRT_WRITE.@010185000.NUM+3
	jsr B_CRT.CRT_WRITE.@010185000

; optimize OK (sprites.pas), line = 95

	lda #$07
	jsr CRT_WRITE_LOCSTR

; optimize OK (sprites.pas), line = 96

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLJOB,y

; optimize OK (sprites.pas), line = 97

	lda #$03
	jsr REMOVEPOINTS

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 98

	jsr WAITFORKEY

; optimize OK (sprites.pas), line = 99

	lda #$01
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0B8A
LAWYER	= DATAORIGIN+$0B8B
PRISONTIME	= DATAORIGIN+$0B8D
R	= DATAORIGIN+$0B8E
I	= DATAORIGIN+$0B8F
J	= DATAORIGIN+$0B90
K	= DATAORIGIN+$0B91
T	= DATAORIGIN+$0B92
CHANGE	= DATAORIGIN+$0B93
@CASETMP_000A	= DATAORIGIN+$0B94

@VarData	= LAWYER
@VarDataSize	= 10

	rts						; ret
.endl

.local	GOTCAUGHT					; FUNCTION

; optimize OK (sprites.pas), line = 112

	lda #$1A
	jsr LOADLOCATION

; optimize FAIL ('ENABLECONSOLE', sprites.pas), line = 113

	jsr ENABLECONSOLE

; optimize FAIL ('SHOWLOCATIONHEADER', sprites.pas), line = 115

	jsr SHOWLOCATIONHEADER

; optimize FAIL (1, sprites.pas), line = 118

	inx
	ldy CURRENTPLAYER
	lda adr.PLBRIBE,y
	sta :STACKORIGIN,x
	inx
	ldy #1
	lda :STACKORIGIN-1,x
	bne @+
	dey
@
	dex
	sty :STACKORIGIN,x
	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	dex
	ldy #1
	lda SYSTEM.RANDOM.@010180000.RESULT
	cmp #$01
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_17D1

; optimize OK (sprites.pas), line = 120

	lda #$01
	jsr CRT_WRITELN_LOCSTR

; optimize OK (sprites.pas), line = 121

	lda #$02
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 122

	jsr WAITFORKEY

; optimize OK (sprites.pas), line = 123

	lda #$00
	sta RESULT
	jmp @exit
l_17D1

; optimize OK (sprites.pas), line = 127

	lda #$03
	jsr CRT_WRITELN2_LOCSTR

; optimize OK (sprites.pas), line = 128

	lda #$04
	jsr CRT_WRITELN_LOCSTR

; optimize OK (sprites.pas), line = 129

	lda #$05
	jsr CRT_WRITELN_LOCSTR

; optimize OK (sprites.pas), line = 130

	lda #$06
	jsr CRT_WRITELN2_LOCSTR

; optimize OK (sprites.pas), line = 132

	lda #$07
	jsr CRT_WRITE_LOCSTR

; optimize OK (sprites.pas), line = 133

	lda #$01
	sta READVALUE.MINVALUE
	lda #$00
	sta READVALUE.MINVALUE+1
	lda #$03
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta A

; optimize FAIL ('CRT_NEWLINE2', sprites.pas), line = 135

	jsr CRT_NEWLINE2

; optimize OK (sprites.pas), line = 136

	lda A
	cmp #$01
	jne l_1800

; optimize OK (sprites.pas), line = 138

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	sta :eax
	lda #$00
	sta :eax+1
	lda #$F4
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add #$F4
	sta PRICE
	lda :eax+1
	adc #$01
	sta PRICE+1

; optimize OK (sprites.pas), line = 139

	lda #$08
	jsr CRT_WRITE_LOCSTR

; optimize OK (sprites.pas), line = 140

	lda PRICE
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda PRICE+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (sprites.pas), line = 141

	lda #$09
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('GETYESNO', sprites.pas), line = 142

	jsr GETYESNO
	lda GETYESNO.RESULT
	sta R

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', sprites.pas), line = 143

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (sprites.pas), line = 144

	lda R
	cmp #$01
	jne l_1830

; optimize OK (sprites.pas), line = 146

	lda PRICE
	sta PAYMONEY.PRICE
	lda PRICE+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_1843

; optimize FAIL ('GOTOCOURT', sprites.pas), line = 149

	jsr GOTOCOURT
	lda GOTOCOURT.RESULT
	sta RESULT
	jmp @exit
l_1843

; optimize OK (sprites.pas), line = 154

	lda #$05
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	jne l_1862

; optimize OK (sprites.pas), line = 156

	lda #$0A
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 157

	jsr WAITFORKEY

; optimize FAIL ('GOTOCOURT', sprites.pas), line = 158

	jsr GOTOCOURT
	lda GOTOCOURT.RESULT
	sta RESULT
	jmp @exit
l_1862

; optimize OK (sprites.pas), line = 163

	lda #$0B
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 164

	jsr WAITFORKEY

; optimize OK (sprites.pas), line = 165

	lda #$00
	sta RESULT
	jmp @exit
l_1851
	jmp l_187C
l_1830

; optimize FAIL ('GOTOCOURT', sprites.pas), line = 174

	jsr GOTOCOURT
	lda GOTOCOURT.RESULT
	sta RESULT
l_187C
l_1800

; optimize OK (sprites.pas), line = 178

	lda A
	cmp #$02
	jne l_1894

; optimize OK (sprites.pas), line = 181

	lda #$50
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	inx
	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	tay
	lda adr.CARRANGE,y
	ldy #1
	cmp :STACKORIGIN-1,x
	bcc @+
	dey
@
	dex
	dex
	tya
	jeq l_18AE

; optimize OK (sprites.pas), line = 183

	lda #$04
	jsr REMOVEPOINTS

; optimize OK (sprites.pas), line = 184

	lda #$0C
	jsr CRT_WRITELN_LOCSTR

; optimize OK (sprites.pas), line = 185

	lda #$0D
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 186

	jsr WAITFORKEY

; optimize FAIL ('GOTOCOURT', sprites.pas), line = 187

	jsr GOTOCOURT
	lda GOTOCOURT.RESULT
	sta RESULT
	jmp @exit
l_18AE

; optimize OK (sprites.pas), line = 190

	lda #$0E
	jsr CRT_WRITELN_LOCSTR

; optimize OK (sprites.pas), line = 191

	lda #$02
	jsr ADDPOINTS

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 192

	jsr WAITFORKEY

; optimize OK (sprites.pas), line = 193

	lda #$00
	sta RESULT
	jmp @exit
l_1894

; optimize OK (sprites.pas), line = 197

	lda A
	cmp #$03
	jne l_18D9

; optimize FAIL ('GOTOCOURT', sprites.pas), line = 198

	jsr GOTOCOURT
	lda GOTOCOURT.RESULT
	sta RESULT
l_18D9
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0B95
A	= DATAORIGIN+$0B96
R	= DATAORIGIN+$0B97
PRICE	= DATAORIGIN+$0B98

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	ROADBLOCK					; FUNCTION

; optimize OK (sprites.pas), line = 205

	lda #$01
	sta MAPRELOADED

; optimize OK (sprites.pas), line = 206

	lda #$00
	sta RESULT

; optimize OK (sprites.pas), line = 208

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$04
	jcs l_1901
	jmp @exit
l_1901

; optimize OK (sprites.pas), line = 209

	lda #$E0
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	jeq l_1915
	jmp @exit
l_1915

; optimize OK (sprites.pas), line = 211

	lda #$1B
	jsr LOADLOCATION

; optimize FAIL ('ENABLECONSOLE', sprites.pas), line = 212

	jsr ENABLECONSOLE

; optimize FAIL ('SHOWLOCATIONHEADER', sprites.pas), line = 213

	jsr SHOWLOCATIONHEADER

; optimize OK (sprites.pas), line = 215

	lda #$01
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', sprites.pas), line = 216

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (sprites.pas), line = 217

	lda #$78
	jsr WAITFRAMES

; optimize OK (sprites.pas), line = 219

	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	jne l_1932

; optimize OK (sprites.pas), line = 221

	lda #$01
	sta RESULT

; optimize OK (sprites.pas), line = 222

	ldy CURRENTPLAYER
	lda adr.PLFAKEMONEY,y
	jeq l_194C

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 223

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp l_1959
l_194C

; optimize OK (sprites.pas), line = 224

	ldy CURRENTPLAYER
	lda adr.PLALCOHOL,y
	jeq l_196E

; optimize OK (sprites.pas), line = 226

	lda #$03
	jsr CRT_WRITELN_LOCSTR

; optimize OK (sprites.pas), line = 227

	lda #$04
	jsr CRT_WRITELN_LOCSTR

; optimize OK (sprites.pas), line = 228

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLALCOHOL,y
	jmp l_1983
l_196E

; optimize OK (sprites.pas), line = 230

	ldy CURRENTPLAYER
	lda adr.PLFORGEDID,y
	jne l_1998

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 231

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp l_19A5
l_1998

; optimize OK (sprites.pas), line = 233

	lda #$00
	sta RESULT
l_19A5
l_1983
l_1959
l_1932

; optimize OK (sprites.pas), line = 236

	lda RESULT
	jne l_19BD

; optimize OK (sprites.pas), line = 237

	lda #$06
	jsr CRT_WRITELN_LOCSTR
l_19BD

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 238

	jsr WAITFORKEY
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0B9A

	rts						; ret
.endl

.local	PAINTPLAYER					; PROCEDURE
	sta CLEAR

; optimize OK (sprites.pas), line = 252

	lda CURRENTPLAYER
	asl @
	asl @
	asl @
	sta Z

; optimize OK (sprites.pas), line = 254

	lda #$00
	sta PLAYEROFS
	sta PLAYEROFS+1

; optimize OK (sprites.pas), line = 255

	lda SPRITEMOVEDIR
	cmp #$FF
	jne l_19E7

; optimize OK (sprites.pas), line = 256

	lda #$C0
	sta PLAYEROFS
	lda #$00
	sta PLAYEROFS+1
l_19E7

; optimize OK (sprites.pas), line = 258

	ldy Z
	lda adr.GANGSTERSEX,y
	cmp #$01
	jne l_1A03
	lda PLAYEROFS
	add #$60
	sta PLAYEROFS
	scc
	inc PLAYEROFS+1
l_1A03

; optimize OK (sprites.pas), line = 266

	lda #$00
	cmp SPRITEOFFSET
	jcs l_1A2D
	lda SPRITEOFFSET
	cmp #$07
	jcs l_1A2D

; optimize OK (sprites.pas), line = 267

	lda PLAYEROFS
	adc #$30
	sta PLAYEROFS
	scc
	inc PLAYEROFS+1
l_1A2D

; optimize OK (sprites.pas), line = 270

	lda #$0C
	sta PLAYERHEIGHT

; optimize OK (sprites.pas), line = 273

	lda PLAYERPOS_Y
	sta SYSTEM.MOVE.@03018100001880000188000.DEST
	lda #$BC
	sta SYSTEM.MOVE.@03018100001880000188000.DEST+1
	lda PLAYEROFS
	sta SYSTEM.MOVE.@03018100001880000188000.SOURCE
	lda #$B8
	add PLAYEROFS+1
	sta SYSTEM.MOVE.@03018100001880000188000.SOURCE+1
	lda PLAYERHEIGHT
	sta SYSTEM.MOVE.@03018100001880000188000.COUNT
	lda #$00
	sta SYSTEM.MOVE.@03018100001880000188000.COUNT+1
	.LOCAL +MAIN.SYSTEM.MOVE.@03018100001880000188000
	m@INLINE
	.ENDL

; optimize OK (sprites.pas), line = 274

	lda PLAYERPOS_Y
	sta SYSTEM.MOVE.@03018100001880000188000.DEST
	lda #$BD
	sta SYSTEM.MOVE.@03018100001880000188000.DEST+1
	lda PLAYEROFS
	add PLAYERHEIGHT
	sta SYSTEM.MOVE.@03018100001880000188000.SOURCE
	lda PLAYEROFS+1
	adc #$B8
	sta SYSTEM.MOVE.@03018100001880000188000.SOURCE+1
	lda PLAYERHEIGHT
	sta SYSTEM.MOVE.@03018100001880000188000.COUNT
	lda #$00
	sta SYSTEM.MOVE.@03018100001880000188000.COUNT+1
	.LOCAL +MAIN.SYSTEM.MOVE.@03018100001880000188000
	m@INLINE
	.ENDL

; optimize OK (sprites.pas), line = 275

	lda PLAYERPOS_Y
	sta SYSTEM.MOVE.@03018100001880000188000.DEST
	lda #$BE
	sta SYSTEM.MOVE.@03018100001880000188000.DEST+1
	lda PLAYEROFS
	sta :STACKORIGIN+11
	lda #$B8
	add PLAYEROFS+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda PLAYERHEIGHT
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	add :STACKORIGIN+11
	sta SYSTEM.MOVE.@03018100001880000188000.SOURCE
	lda :STACKORIGIN+STACKWIDTH+11
	adc :STACKORIGIN+STACKWIDTH+12
	sta SYSTEM.MOVE.@03018100001880000188000.SOURCE+1
	lda PLAYERHEIGHT
	sta SYSTEM.MOVE.@03018100001880000188000.COUNT
	lda #$00
	sta SYSTEM.MOVE.@03018100001880000188000.COUNT+1
	.LOCAL +MAIN.SYSTEM.MOVE.@03018100001880000188000
	m@INLINE
	.ENDL

; optimize OK (sprites.pas), line = 276

	lda PLAYERPOS_Y
	sta SYSTEM.MOVE.@03018100001880000188000.DEST
	lda #$BF
	sta SYSTEM.MOVE.@03018100001880000188000.DEST+1
	lda PLAYEROFS
	sta :STACKORIGIN+11
	lda #$B8
	add PLAYEROFS+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda PLAYERHEIGHT
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	add PLAYERHEIGHT
	sta :STACKORIGIN+12
	lda :STACKORIGIN+STACKWIDTH+12
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda :STACKORIGIN+11
	add :STACKORIGIN+12
	sta SYSTEM.MOVE.@03018100001880000188000.SOURCE
	lda :STACKORIGIN+STACKWIDTH+11
	adc :STACKORIGIN+STACKWIDTH+12
	sta SYSTEM.MOVE.@03018100001880000188000.SOURCE+1
	lda PLAYERHEIGHT
	sta SYSTEM.MOVE.@03018100001880000188000.COUNT
	lda #$00
	sta SYSTEM.MOVE.@03018100001880000188000.COUNT+1
	.LOCAL +MAIN.SYSTEM.MOVE.@03018100001880000188000
	m@INLINE
	.ENDL

; optimize OK (sprites.pas), line = 279

	lda CLEAR
	cmp #$01
	jne l_1ABD

; optimize OK (sprites.pas), line = 281

	lda PLAYERPOS_Y
	sub #$01
	sta PLAYEROFS
	lda #$00
	sbc #$00
	sta PLAYEROFS+1

; optimize OK (sprites.pas), line = 282

	lda PLAYEROFS
	sta :bp2
	lda #$BC
	add PLAYEROFS+1
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-

; optimize OK (sprites.pas), line = 283

	lda PLAYEROFS
	sta :bp2
	lda #$BD
	add PLAYEROFS+1
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-

; optimize OK (sprites.pas), line = 284

	lda PLAYEROFS
	sta :bp2
	lda #$BE
	add PLAYEROFS+1
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-

; optimize OK (sprites.pas), line = 285

	lda PLAYEROFS
	sta :bp2
	lda #$BF
	add PLAYEROFS+1
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-

; optimize OK (sprites.pas), line = 287

	lda PLAYERPOS_Y
	add PLAYERHEIGHT
	sta PLAYEROFS
	lda #$00
	adc #$00
	sta PLAYEROFS+1

; optimize OK (sprites.pas), line = 288

	lda PLAYEROFS
	sta :bp2
	lda #$BC
	add PLAYEROFS+1
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-

; optimize OK (sprites.pas), line = 289

	lda PLAYEROFS
	sta :bp2
	lda #$BD
	add PLAYEROFS+1
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-

; optimize OK (sprites.pas), line = 290

	lda PLAYEROFS
	sta :bp2
	lda #$BE
	add PLAYEROFS+1
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-

; optimize OK (sprites.pas), line = 291

	lda PLAYEROFS
	sta :bp2
	lda #$BF
	add PLAYEROFS+1
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-
l_1ABD

; ------------------------------------------------------------

CLEAR	= DATAORIGIN+$0B9B
PLAYERHEIGHT	= DATAORIGIN+$0B9C
PLAYEROFS	= DATAORIGIN+$0B9D
Z	= DATAORIGIN+$0B9F

@VarData	= CLEAR
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVECURRENTPLAYER				; FUNCTION
	sta CH

; optimize OK (sprites.pas), line = 307

	lda #$10
	sta CURLOC

; optimize OK (sprites.pas), line = 308

	sta RESULT

; optimize OK (sprites.pas), line = 310

	lda #$00
	sta DIR_X

; optimize OK (sprites.pas), line = 311

	sta DIR_Y

; optimize OK (sprites.pas), line = 313

	lda CH
	sta @CASETMP_000B
	cmp #$06
	jne l_1B5D
@

; optimize OK (sprites.pas), line = 315

	lda #$FF
; optimize OK (sprites.pas), line = 316
	jmp s_1B74
l_1B5D
	cmp #$07
	jne l_1B6C

; optimize OK (sprites.pas), line = 319

	lda #$01
s_1B74
	sta DIR_X

; optimize OK (sprites.pas), line = 320

	sta SPRITEMOVEDIR
	jmp a_000B
l_1B6C
	cmp #$0E
	jne l_1B7B

; optimize OK (sprites.pas), line = 322

	lda #$FF
	sta DIR_Y
	jmp a_000B
l_1B7B
	cmp #$0F
	jne l_1B86

; optimize OK (sprites.pas), line = 323

	lda #$01
	sta DIR_Y
	jmp a_000B
l_1B86

; optimize OK (sprites.pas), line = 326

	lda #$01
	jsr WAITFRAMES
	jmp @exit
a_000B

; optimize OK (sprites.pas), line = 333

	lda #$00
	sta LEAVEMAP

; optimize OK (sprites.pas), line = 334

	lda MAPPOS_X
	cmp #$13
	jne l_1BB4
	lda DIR_X
	cmp #$01
	jne l_1BB4
	lda #$01
	sta LEAVEMAP
l_1BB4

; optimize OK (sprites.pas), line = 335

	lda MAPPOS_X
	jne l_1BD9
	lda DIR_X
	cmp #$FF
	jne l_1BD9
	lda #$01
	sta LEAVEMAP
l_1BD9

; optimize OK (sprites.pas), line = 336

	lda MAPPOS_Y
	cmp #$11
	jne l_1BFE
	lda DIR_Y
	cmp #$01
	jne l_1BFE
	lda #$01
	sta LEAVEMAP
l_1BFE

; optimize OK (sprites.pas), line = 337

	lda MAPPOS_Y
	jne l_1C23
	lda DIR_Y
	cmp #$FF
	jne l_1C23
	lda #$01
	sta LEAVEMAP
l_1C23

; optimize OK (sprites.pas), line = 338

	lda LEAVEMAP
	jne l_1C3C

; optimize OK (sprites.pas), line = 340

	lda MAPPOS_Y
	add #$01
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda DIR_Y
	spl
	dey
	add :STACKORIGIN+10
	sta :eax
	tya
	adc :STACKORIGIN+STACKWIDTH+10
	sta :eax+1
	lda #$28
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda #$E0
	add :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda MAPPOS_X
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda DIR_X
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	add :STACKORIGIN+9
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda (:bp),y
	sta LENCID

; optimize OK (sprites.pas), line = 343

	sta @CASETMP_000C
	cmp #$41
	jne l_1C75
@

; optimize OK (sprites.pas), line = 344

	lda #$0D
	sta CURLOC
	jmp a_000C
l_1C75
	cmp #$42
	jne l_1C80

; optimize OK (sprites.pas), line = 345

	lda #$06
	sta CURLOC
	jmp a_000C
l_1C80
	cmp #$43
	jne l_1C8B

; optimize OK (sprites.pas), line = 346

	lda #$02
	sta CURLOC
	jmp a_000C
l_1C8B
	cmp #$44
	jne l_1C96

; optimize OK (sprites.pas), line = 347

	lda #$04
	sta CURLOC
	jmp a_000C
l_1C96
	cmp #$45
	jne l_1CA1

; optimize OK (sprites.pas), line = 348

	lda #$07
	sta CURLOC
	jmp a_000C
l_1CA1
	cmp #$46
	jne l_1CAC

; optimize OK (sprites.pas), line = 349

	lda #$0C
	sta CURLOC
	jmp a_000C
l_1CAC
	cmp #$47
	jne l_1CB7

; optimize OK (sprites.pas), line = 350

	lda #$01
	sta CURLOC
	jmp a_000C
l_1CB7
	cmp #$48
	jne l_1CC2

; optimize OK (sprites.pas), line = 351

	lda #$0B
	sta CURLOC
	jmp a_000C
l_1CC2
	cmp #$49
	jne l_1CCD

; optimize OK (sprites.pas), line = 352

	lda #$0A
	sta CURLOC
	jmp a_000C
l_1CCD
	cmp #$4A
	jne l_1CD8

; optimize OK (sprites.pas), line = 353

	lda #$05
	sta CURLOC
	jmp a_000C
l_1CD8
	cmp #$4B
	jne l_1CE3

; optimize OK (sprites.pas), line = 354

	lda #$09
	sta CURLOC
	jmp a_000C
l_1CE3
	cmp #$4C
	jne l_1CEE

; optimize OK (sprites.pas), line = 355

	lda #$17
	sta CURLOC
	jmp a_000C
l_1CEE
	cmp #$4D
	jne l_1CF9

; optimize OK (sprites.pas), line = 356

	lda #$03
	sta CURLOC
	jmp a_000C
l_1CF9
	cmp #$4E
	jne l_1D04

; optimize OK (sprites.pas), line = 357

	lda #$18
	sta CURLOC
	jmp a_000C
l_1D04
	cmp #$2E
	jne l_1D0F

; optimize OK (sprites.pas), line = 358

	lda #$10
	sta CURLOC
	jmp a_000C
l_1D0F

; optimize OK (sprites.pas), line = 360

	lda #$0F
	sta CURLOC
a_000C
l_1C3C

; optimize OK (sprites.pas), line = 364

	lda CURLOC
	cmp #$0F
	jne l_1D3C

; optimize OK (sprites.pas), line = 366

	lda #$10
	sta RESULT

; optimize OK (sprites.pas), line = 367

	lda #$00
	sta SPRITEOFFSET

; optimize OK (sprites.pas), line = 368

	lda #$01
	jsr PAINTPLAYER
	jmp @exit
l_1D3C

; optimize OK (sprites.pas), line = 372

	ldy CURRENTPLAYER
	lda adr.PLSTEPS,y
	sub #$01
	sta adr.PLSTEPS,y

; optimize OK (sprites.pas), line = 373

	lda MAPPOS_X
	sta OLDMAPPOS_X

; optimize OK (sprites.pas), line = 374

	lda MAPPOS_Y
	sta OLDMAPPOS_Y

; optimize OK (sprites.pas), line = 375

	lda PLAYERPOS_X
	sta OLDPLAYERPOS_X

; optimize OK (sprites.pas), line = 376

	lda PLAYERPOS_Y
	sta OLDPLAYERPOS_Y

; optimize OK (sprites.pas), line = 377

	lda MAPPOS_X
	add DIR_X
	sta MAPPOS_X

; optimize OK (sprites.pas), line = 378

	lda MAPPOS_Y
	add DIR_Y
	sta MAPPOS_Y

; optimize OK (sprites.pas), line = 383

	lda #$0E
	sta RMT.TRMT.INIT.A
	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.INIT

; optimize FAIL ('RMT.TRMT.PLAY', sprites.pas), line = 384

	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.PLAY

; optimize OK (sprites.pas), line = 385

	lda #$01
	sta PLAYMUSIC

; optimize OK (sprites.pas), line = 392

	lda DIR_Y
	jeq l_1DA2

; optimize OK (sprites.pas), line = 394

	lda #$00
	sta J

l_1DAC
; --- ForToDoCondition
	lda J
	cmp #$08
	jcs l_1DBA

; optimize OK (sprites.pas), line = 397

	sta SPRITEOFFSET

; optimize OK (sprites.pas), line = 398

	lda PLAYERPOS_Y
	add DIR_Y
	sta PLAYERPOS_Y

; optimize OK (sprites.pas), line = 399

	lda #$01
	jsr PAINTPLAYER

; optimize OK (sprites.pas), line = 400

	lda #$01
	jsr WAITFRAMES

; --- ForToDoEpilog
	inc J
	jne l_1DAC
l_1DBA
l_1DA2

; optimize OK (sprites.pas), line = 404

	lda DIR_X
	jeq l_1DE9

; optimize OK (sprites.pas), line = 406

	lda #$00
	sta J

l_1DF3
; --- ForToDoCondition
	lda J
	cmp #$08
	jcs l_1E01

; optimize OK (sprites.pas), line = 408

	sta SPRITEOFFSET

; optimize OK (sprites.pas), line = 409

	lda PLAYERPOS_X
	add DIR_X
	sta PLAYERPOS_X

; optimize OK (sprites.pas), line = 410

	lda #$00
	jsr PAINTPLAYER

; optimize OK (sprites.pas), line = 411

	lda #$01
	jsr WAITFRAMES

; --- ForToDoEpilog
	inc J
	jne l_1DF3
l_1E01
l_1DE9

; optimize FAIL ('RMT.TRMT.STOP', sprites.pas), line = 416

	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.STOP

; optimize OK (sprites.pas), line = 417

	lda #$00
	sta PLAYMUSIC

; optimize OK (sprites.pas), line = 425

	lda CURLOC
	cmp #$10
	jne l_1E35

; optimize FAIL ('ROADBLOCK', sprites.pas), line = 428

	jsr ROADBLOCK
	lda ROADBLOCK.RESULT
	sta J

; optimize OK (sprites.pas), line = 429

	jeq l_1E4C

; optimize FAIL ('GOTCAUGHT', sprites.pas), line = 432

	jsr GOTCAUGHT
	lda GOTCAUGHT.RESULT
	sta R

; optimize OK (sprites.pas), line = 433

	jne l_1E63

; optimize OK (sprites.pas), line = 435

	lda #$10
	sta RESULT

; optimize FAIL ('ENABLEMAPCONSOLE', sprites.pas), line = 436

	jsr ENABLEMAPCONSOLE
	jmp l_1E72
l_1E63

; optimize OK (sprites.pas), line = 441

	lda #$11
	sta RESULT
	jmp @exit
l_1E72
	jmp l_1E7F
l_1E4C

; optimize FAIL ('ENABLEMAPCONSOLE', sprites.pas), line = 447

	jsr ENABLEMAPCONSOLE
l_1E7F
l_1E35

; optimize OK (sprites.pas), line = 450

	lda CURLOC
	sta RESULT
@exit

; ------------------------------------------------------------

CH	= DATAORIGIN+$0BA0
RESULT	= DATAORIGIN+$0BA1
J	= DATAORIGIN+$0BA2
DIR_X	= DATAORIGIN+$0BA3
DIR_Y	= DATAORIGIN+$0BA4
LENCID	= DATAORIGIN+$0BA5
LEAVEMAP	= DATAORIGIN+$0BA6
CURLOC	= DATAORIGIN+$0BA7
R	= DATAORIGIN+$0BA8
@CASETMP_000B	= DATAORIGIN+$0BA9
@CASETMP_000C	= DATAORIGIN+$0BAA

@VarData	= CH
@VarDataSize	= 10

	rts						; ret
.endl

.local	CLEARSPRITES					; PROCEDURE

; optimize OK (sprites.pas), line = 457

	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A
	lda #$BB
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A+1
	lda #$D0
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT
	lda #$04
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@03018000001810000188000
	m@INLINE
	.ENDL

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ENABLESPRITES					; PROCEDURE

; optimize FAIL ('CLEARSPRITES', sprites.pas), line = 464

	jsr CLEARSPRITES

; optimize OK (sprites.pas), line = 465

	lda #$01
	sta SPRITEMOVEDIR

; -------------------  ASM Block 00000158  -------------------


        // we need to put it into registers directly,  because we do not have
        // the OS activated, so we have no routine that copies shadow to registers.
        lda #$3e        // single line, both players & missiles
        sta SDMCTL      // shadow of DMACTL
        sta DMACTL
        lda #1          // players in front of playfields
        sta $26f        // shadow of PRIOR WHY GPRIOR DOES NOT EXIST?
        sta $D01B
        lda #3          // turn on missiles & players
        sta GRACTL      // no shadow for this one
        lda #>PMG_BASE_ADR      // high byte of player storage
        sta PMBASE      // missiles = $7b00, player0 = $7c00

        lda #$00     // eyes and tie
        sta PCOLR0
        lda #$f4   // face/beard
        sta PCOLR1
        lda #$74        // main player color
        sta PCOLR2
        lda #$0e   //face and shirt
        sta PCOLR3
    
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_DISPLAYSTATS				; PROCEDURE

; optimize OK (fight_utils.pas), line = 4

	lda FP_CURRENTSITE
	jne l_1EAF

; optimize OK (fight_utils.pas), line = 6

	lda #$00
	ldy #$13
	sta:rpl $DF48,y-

; optimize OK (fight_utils.pas), line = 7

	lda #$00
	ldy #$13
	sta:rpl $DF70,y-

; optimize OK (fight_utils.pas), line = 8

	lda #$00
	ldy #$13
	sta:rpl $DF98,y-

; optimize OK (fight_utils.pas), line = 9

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$15
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', fight_utils.pas), line = 10

	inx
	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_NAME,y
	sta :STACKORIGIN,x
	lda adr.FP_NAME+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (fight_utils.pas), line = 11

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$16
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', fight_utils.pas), line = 12

	inx
	mva #$65 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (fight_utils.pas), line = 13

	ldy FP_CURRENTPLAYER
	lda adr.FP_ENERGY,y
	jsr B_CRT.CRT_WRITE.@010180000

; optimize OK (fight_utils.pas), line = 14

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$17
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', fight_utils.pas), line = 15

	inx
	mva #$68 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', fight_utils.pas), line = 16

	inx
	ldy FP_CURRENTPLAYER
	lda adr.FP_WEAPON,y
	asl @
	tay
	lda adr.WEAPONNAMES,y
	sta :STACKORIGIN,x
	lda adr.WEAPONNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100
	jmp l_1EE8
l_1EAF

; optimize OK (fight_utils.pas), line = 20

	lda #$00
	ldy #$13
	sta:rpl $DF5C,y-

; optimize OK (fight_utils.pas), line = 21

	lda #$00
	ldy #$13
	sta:rpl $DF84,y-

; optimize OK (fight_utils.pas), line = 22

	lda #$00
	ldy #$13
	sta:rpl $DFAC,y-

; optimize FAIL ('B_CRT.CRT_WRITERIGHTALIGNED.@02018986000001000180000', fight_utils.pas), line = 23

	inx
	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_NAME,y
	sta :bp2
	lda adr.FP_NAME+1,y
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITERIGHTALIGNED.@02018986000001000180000.adr.S,y+
	inx
	mva #$15 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITERIGHTALIGNED.@02018986000001000180000

; optimize FAIL ('SYSUTILS.INTTOSTR.@010182000', fight_utils.pas), line = 24

	inx
	ldy FP_CURRENTPLAYER
	lda adr.FP_ENERGY,y
	sta :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	jsr SYSUTILS.INTTOSTR.@010182000
	jsr B_CRT.ATASCII2ANTIC.@0101898600000100
	lda #$65
	sta SYSTEM.CONCAT.@0201898600189860.A
	lda #$0C
	sta SYSTEM.CONCAT.@0201898600189860.A+1
	lda B_CRT.ATASCII2ANTIC.@0101898600000100.RESULT
	sta SYSTEM.CONCAT.@0201898600189860.B
	lda B_CRT.ATASCII2ANTIC.@0101898600000100.RESULT+1
	sta SYSTEM.CONCAT.@0201898600189860.B+1
	jsr SYSTEM.CONCAT.@0201898600189860
	inx
	mwy SYSTEM.CONCAT.@0201898600189860.RESULT :bp2
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITERIGHTALIGNED.@02018986000001000180000.adr.S,y+
	inx
	mva #$16 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITERIGHTALIGNED.@02018986000001000180000

; optimize OK (fight_utils.pas), line = 25

	ldy FP_CURRENTPLAYER
	lda adr.FP_WEAPON,y
	asl @
	tay
	lda adr.WEAPONNAMES,y
	sta SYSTEM.CONCAT.@0201898600189860.B
	lda adr.WEAPONNAMES+1,y
	sta SYSTEM.CONCAT.@0201898600189860.B+1
	lda #$68
	sta SYSTEM.CONCAT.@0201898600189860.A
	lda #$0C
	sta SYSTEM.CONCAT.@0201898600189860.A+1
	jsr SYSTEM.CONCAT.@0201898600189860
	inx
	mwy SYSTEM.CONCAT.@0201898600189860.RESULT :bp2
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITERIGHTALIGNED.@02018986000001000180000.adr.S,y+
	inx
	mva #$17 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITERIGHTALIGNED.@02018986000001000180000
l_1EE8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_PUTPLAYER					; PROCEDURE

; optimize OK (fight_utils.pas), line = 37

	lda S
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	sta :STACKORIGIN+9
	lda D
	asl @
	add :STACKORIGIN+9
	sta S

; optimize OK (fight_utils.pas), line = 38

	lda X
	cmp #$01
	jne l_1F3D

; optimize OK (fight_utils.pas), line = 39

	lda S
	add #$04
	sta S
l_1F3D

; optimize OK (fight_utils.pas), line = 40

	lda S
	add #$02
	sta :STACKORIGIN+9
	lda #$DC
	add P+1
	sta :bp+1
	ldy P
	lda :STACKORIGIN+9
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 41

	lda S
	add #$03
	sta :STACKORIGIN+9
	lda #$01
	add P
	tay
	lda #$DC
	adc P+1
	sta :bp+1
	lda :STACKORIGIN+9
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 42

	lda S
	add #$0A
	sta :STACKORIGIN+9
	lda #$28
	add P
	tay
	lda #$DC
	adc P+1
	sta :bp+1
	lda :STACKORIGIN+9
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 43

	lda S
	add #$0B
	sta :STACKORIGIN+9
	lda #$29
	add P
	tay
	lda #$DC
	adc P+1
	sta :bp+1
	lda :STACKORIGIN+9
	sta (:bp),y

; ------------------------------------------------------------

P	= DATAORIGIN+$0BAB
S	= DATAORIGIN+$0BAD
D	= DATAORIGIN+$0BAE
X	= DATAORIGIN+$0BAF

@VarData	= P
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_DRAWCURRENTPLAYER				; PROCEDURE

; optimize OK (fight_utils.pas), line = 52

	lda FP_CURRENTSITE
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	sta :STACKORIGIN+9
	lda FP_CURRENTSITE
	asl @
	add :STACKORIGIN+9
	sta S

; optimize OK (fight_utils.pas), line = 53

	ldy FP_CURRENTPLAYER
	lda adr.FP_SEX,y
	cmp #$01
	jne l_1FBB

; optimize OK (fight_utils.pas), line = 54

	lda S
	add #$04
	sta S
l_1FBB

; optimize OK (fight_utils.pas), line = 55

	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_POSW,y
	sta P
	lda adr.FP_POSW+1,y
	sta P+1

; optimize OK (fight_utils.pas), line = 56

	lda S
	add #$02
	sta :STACKORIGIN+9
	lda #$DC
	add P+1
	sta :bp+1
	ldy P
	lda :STACKORIGIN+9
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 57

	lda S
	add #$03
	sta :STACKORIGIN+9
	lda #$01
	add P
	tay
	lda #$DC
	adc P+1
	sta :bp+1
	lda :STACKORIGIN+9
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 58

	lda S
	add #$0A
	sta :STACKORIGIN+9
	lda #$28
	add P
	tay
	lda #$DC
	adc P+1
	sta :bp+1
	lda :STACKORIGIN+9
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 59

	lda S
	add #$0B
	sta :STACKORIGIN+9
	lda #$29
	add P
	tay
	lda #$DC
	adc P+1
	sta :bp+1
	lda :STACKORIGIN+9
	sta (:bp),y

; ------------------------------------------------------------

P	= DATAORIGIN+$0BB0
S	= DATAORIGIN+$0BB2

@VarData	= P
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_CLEARPLAYER				; PROCEDURE

; optimize OK (fight_utils.pas), line = 65

	lda #$DC
	add P+1
	sta :bp+1
	ldy P
	lda #$00
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 66

	lda #$01
	add P
	tay
	lda #$DC
	adc P+1
	sta :bp+1
	lda #$00
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 67

	lda #$28
	add P
	tay
	lda #$DC
	adc P+1
	sta :bp+1
	lda #$00
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 68

	lda #$29
	add P
	tay
	lda #$DC
	adc P+1
	sta :bp+1
	lda #$00
	sta (:bp),y

; ------------------------------------------------------------

P	= DATAORIGIN+$0BB3

@VarData	= P
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_CLEARCURRENTPLAYER			; PROCEDURE

; optimize OK (fight_utils.pas), line = 75

	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_POSW,y
	sta P
	lda adr.FP_POSW+1,y
	sta P+1

; optimize OK (fight_utils.pas), line = 76

	lda #$DC
	add P+1
	sta :bp+1
	ldy P
	lda #$00
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 77

	lda #$01
	add P
	tay
	lda #$DC
	adc P+1
	sta :bp+1
	lda #$00
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 78

	lda #$28
	add P
	tay
	lda #$DC
	adc P+1
	sta :bp+1
	lda #$00
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 79

	lda #$29
	add P
	tay
	lda #$DC
	adc P+1
	sta :bp+1
	lda #$00
	sta (:bp),y

; ------------------------------------------------------------

P	= DATAORIGIN+$0BB5

@VarData	= P
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_DRAWPLAYERS				; PROCEDURE

; optimize OK (fight_utils.pas), line = 88

	lda #$00
	sta S

l_2089
; --- ForToDoCondition
	lda S
	cmp #$02
	jcs l_2097

; optimize OK (fight_utils.pas), line = 89

	lda #$00
	sta I
	ldy S
	lda adr.FP_N,y
	sub #$01
	sta @FORTMP_20A6_0

l_20A9
; --- ForToDoCondition
	lda @FORTMP_20A6_0::#$00
	cmp I
	jcc l_20B7

; optimize OK (fight_utils.pas), line = 91

	lda S
	asl @
	asl @
	asl @
	asl @
	add I
	sta Q

; optimize OK (fight_utils.pas), line = 92

	tay
	lda adr.FP_ENERGY,y
	jeq l_20DC

; optimize OK (fight_utils.pas), line = 94

	lda adr.FP_SEX,y
	sta FIGHT_PUTPLAYER.X
	lda Q
	asl @
	tay
	lda adr.FP_POSW,y
	sta FIGHT_PUTPLAYER.P
	lda adr.FP_POSW+1,y
	sta FIGHT_PUTPLAYER.P+1
	lda S
	sta FIGHT_PUTPLAYER.S
	sta FIGHT_PUTPLAYER.D
	jsr FIGHT_PUTPLAYER
l_20DC

; --- ForToDoEpilog
	inc I
	jne l_20A9
l_20B7

; --- ForToDoEpilog
	inc S
	jne l_2089
l_2097

; ------------------------------------------------------------

I	= DATAORIGIN+$0BB7
S	= DATAORIGIN+$0BB8
Q	= DATAORIGIN+$0BB9

@VarData	= I
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKHIT					; FUNCTION

; optimize OK (fight_utils.pas), line = 106

	lda #$00
	sta S

l_2108
; --- ForToDoCondition
	lda S
	cmp #$02
	jcs l_2116

; optimize OK (fight_utils.pas), line = 107

	lda #$00
	sta I
	ldy S
	lda adr.FP_N,y
	sub #$01
	sta @FORTMP_2125_0

l_2128
; --- ForToDoCondition
	lda @FORTMP_2125_0::#$00
	cmp I
	jcc l_2136

; optimize OK (fight_utils.pas), line = 110

	lda S
	asl @
	asl @
	asl @
	asl @
	add I
	tay
	lda adr.FP_ENERGY,y
	jne l_2155
	jmp c_2128
l_2155

; optimize OK (fight_utils.pas), line = 112

	lda S
	asl @
	asl @
	asl @
	asl @
	add I
	asl @
	tay
	lda adr.FP_POSW,y
	sta Z
	lda #$DC
	add adr.FP_POSW+1,y
	sta Z+1

; optimize OK (fight_utils.pas), line = 113

	lda S
	asl @
	asl @
	asl @
	asl @
	add I
	sta RESULT

; optimize OK (fight_utils.pas), line = 114

	lda K+1
	cmp Z+1
	bne @+
	lda K
	cmp Z
@
	jeq @exit
l_2190

; optimize OK (fight_utils.pas), line = 115

	inc Z
	sne
	inc Z+1

; optimize OK (fight_utils.pas), line = 116

	lda K+1
	cmp Z+1
	bne @+
	lda K
	cmp Z
@
	jeq @exit
l_21AE

; optimize OK (fight_utils.pas), line = 117

	lda Z
	add #$27
	sta Z
	scc
	inc Z+1

; optimize OK (fight_utils.pas), line = 118

	lda K+1
	cmp Z+1
	bne @+
	lda K
	cmp Z
@
	jeq @exit
l_21CC

; optimize OK (fight_utils.pas), line = 119

	inc Z
	sne
	inc Z+1

; optimize OK (fight_utils.pas), line = 120

	lda K+1
	cmp Z+1
	bne @+
	lda K
	cmp Z
@
	jeq @exit
l_21EA

; --- ForToDoEpilog
c_2128
	inc I
	jne l_2128
l_2136

; --- ForToDoEpilog
	inc S
	jne l_2108
l_2116

; optimize OK (fight_utils.pas), line = 122

	lda #$80
	sta RESULT
@exit

; ------------------------------------------------------------

K	= DATAORIGIN+$0BBB
RESULT	= DATAORIGIN+$0BBD
Z	= DATAORIGIN+$0BBE
S	= DATAORIGIN+$0BC0
I	= DATAORIGIN+$0BC1

@VarData	= K
@VarDataSize	= 6

	rts						; ret
.endl

.local	FIGHT_SETSHOOTSTART				; PROCEDURE

; optimize OK (fight_utils.pas), line = 129

	lda SHOOT_DIFF
	sta @CASETMP_000D
	cmp #$FF
	jne l_220A
@

; optimize OK (fight_utils.pas), line = 130

	lda #$28
	jmp s_2219
l_220A
	cmp #$01
	jne l_2215

; optimize OK (fight_utils.pas), line = 131

	lda #$29
s_2219
	sta SHOOT_START
	lda #$00
	sta SHOOT_START+1
	jmp a_000D
l_2215
	cmp #$D8
	jne l_2220

; optimize OK (fight_utils.pas), line = 132

	lda #$00
	sta SHOOT_START
	sta SHOOT_START+1
	jmp a_000D
l_2220
	cmp #$28
	jne l_222B

; optimize OK (fight_utils.pas), line = 133

	lda #$28
	sta SHOOT_START
	lda #$00
	sta SHOOT_START+1
l_222B
a_000D

; ------------------------------------------------------------

@CASETMP_000D	= DATAORIGIN+$0BC3

@VarData	= @CASETMP_000D
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_SHOOT					; FUNCTION

; optimize FAIL ('FIGHT_SETSHOOTSTART', fight_utils.pas), line = 147

	jsr FIGHT_SETSHOOTSTART

; optimize OK (fight_utils.pas), line = 148

	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_POSW,y
	sta F_CURPOS
	lda #$DC
	add adr.FP_POSW+1,y
	sta F_CURPOS+1

; optimize OK (fight_utils.pas), line = 149

	ldy FP_CURRENTPLAYER
	lda adr.FP_WEAPON,y
	sta E

; optimize OK (fight_utils.pas), line = 150

	tay
	lda adr.WEAPONREACH,y
	sta R

; optimize OK (fight_utils.pas), line = 151

	lda #$00
	sta HITPLAYER

; optimize OK (fight_utils.pas), line = 152

	sta V

l_2265
; --- ForToDoCondition
	lda V
	cmp #$29
	jcs l_2273

; optimize OK (fight_utils.pas), line = 155

	cmp R
	jeq @exit
l_2287

; optimize OK (fight_utils.pas), line = 158

	lda F_CURPOS
	add SHOOT_START
	sta :STACKORIGIN+9
	lda F_CURPOS+1
	adc SHOOT_START+1
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda SHOOT_DIFF
	spl
	dey
	add :STACKORIGIN+9
	sta K
	tya
	adc :STACKORIGIN+STACKWIDTH+9
	sta K+1

; optimize OK (fight_utils.pas), line = 159

	sta :bp+1
	ldy K
	lda (:bp),y
	sta W

; optimize OK (fight_utils.pas), line = 160

	lda SHOOT_DIFF
	cmp #$01
	jeq l_22BEx
	cmp #$FF
	jne l_22BE
l_22BEx

; optimize OK (fight_utils.pas), line = 161

	ldy K+1
	sty :bp+1
	ldy K
	lda #$12
	jmp l_22CC
l_22BE

; optimize OK (fight_utils.pas), line = 163

	ldy K+1
	sty :bp+1
	ldy K
	lda #$13
l_22CC
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 164

	lda #$03
	jsr WAITFRAMES

; optimize OK (fight_utils.pas), line = 165

	lda F_CURPOS
	add SHOOT_START
	sta :STACKORIGIN+10
	lda F_CURPOS+1
	adc SHOOT_START+1
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda SHOOT_DIFF
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+11
	add :STACKORIGIN+10
	tay
	lda :STACKORIGIN+STACKWIDTH+10
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp+1
	lda W
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 167

	lda W
	jne l_22F5

; optimize OK (fight_utils.pas), line = 169

	ldy #$00
	lda SHOOT_DIFF
	spl
	dey
	add SHOOT_START
	sta SHOOT_START
	tya
	adc SHOOT_START+1
	sta SHOOT_START+1
	jmp c_2265
l_22F5

; optimize OK (fight_utils.pas), line = 172

	lda W
	cmp #$01
	jne l_2315
	jmp b_2265
l_2315

; optimize OK (fight_utils.pas), line = 175

	lda K
	sta CHECKHIT.K
	lda K+1
	sta CHECKHIT.K+1
	jsr CHECKHIT
	lda CHECKHIT.RESULT
	sta T

; optimize OK (fight_utils.pas), line = 176

	jmi l_2330

; optimize OK (fight_utils.pas), line = 179

	ldy E
	lda adr.WEAPONSOUND,y
	sta RMT.TRMT.INIT.A
	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.INIT

; optimize FAIL ('RMT.TRMT.PLAY', fight_utils.pas), line = 180

	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.PLAY

; optimize OK (fight_utils.pas), line = 181

	lda #$01
	sta PLAYMUSIC

; optimize OK (fight_utils.pas), line = 187

	lda #$14
	jsr WAITFRAMES

; optimize OK (fight_utils.pas), line = 192

	lda #$08
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta T1

; optimize OK (fight_utils.pas), line = 193

	ldy E
	lda adr.WEAPONPRECISION,y
	asl @
	sta T2

; optimize OK (fight_utils.pas), line = 194

	lda #$0C
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta T3

; optimize OK (fight_utils.pas), line = 195

	ldy FP_CURRENTPLAYER
	lda adr.FP_STRENGTH,y
	lsr @
	lsr @
	lsr @
	add #$01
	sta T4

; optimize OK (fight_utils.pas), line = 196

	lda T2
	cmp T1
	jcs l_2389
	lda T4
	cmp T3
	jcs l_2389
	jmp b_2265
l_2389

; optimize OK (fight_utils.pas), line = 198

	ldy E
	lda adr.WEAPONEFFECT,y
	sta :STACKORIGIN+9
	ldy FP_CURRENTPLAYER
	lda adr.FP_BRUTALITY,y
	lsr @
	lsr @
	lsr @
	add :STACKORIGIN+9
	sta HIT

; optimize FAIL ('RMT.TRMT.STOP', fight_utils.pas), line = 201

	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.STOP

; optimize OK (fight_utils.pas), line = 202

	lda #$00
	sta PLAYMUSIC

; optimize OK (fight_utils.pas), line = 210

	lda HIT
	jne l_23B9
	jmp b_2265
l_23B9

; optimize OK (fight_utils.pas), line = 212

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$14
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (fight_utils.pas), line = 213

	lda FP_CURRENTSITE
	jne l_23D1

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', fight_utils.pas), line = 214

	inx
	mva FIGHT_STRING_1 :STACKORIGIN,x
	mva FIGHT_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jmp l_23DE
l_23D1

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', fight_utils.pas), line = 216

	inx
	mva FIGHT_STRING_7 :STACKORIGIN,x
	mva FIGHT_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
l_23DE
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', fight_utils.pas), line = 217

	inx
	lda T
	asl @
	tay
	lda adr.FP_NAME,y
	sta :STACKORIGIN,x
	lda adr.FP_NAME+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', fight_utils.pas), line = 219

	inx
	mva FIGHT_STRING_2 :STACKORIGIN,x
	mva FIGHT_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (fight_utils.pas), line = 224

	lda #$32
	jsr WAITFRAMES

; optimize OK (fight_utils.pas), line = 225

	ldy T
	lda HIT
	cmp adr.FP_ENERGY,y
	jcc l_2403

; optimize OK (fight_utils.pas), line = 227

	lda #$00
	sta adr.FP_ENERGY,y

; optimize OK (fight_utils.pas), line = 229

	lda #$00
	ldy #256-160
	sta:rne $DF20+160-256,y+

; optimize FAIL ('B_CRT.CRT_WRITECENTERED.@02018986000001000180000', fight_utils.pas), line = 230

	inx
	mwy FIGHT_STRING_3 :bp2
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITECENTERED.@02018986000001000180000.adr.S,y+
	inx
	mva #$15 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED.@02018986000001000180000

; optimize FAIL ('B_CRT.CRT_WRITECENTERED.@02018986000001000180000', fight_utils.pas), line = 231

	inx
	lda T
	asl @
	tay
	lda adr.FP_NAME,y
	sta :bp2
	lda adr.FP_NAME+1,y
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITECENTERED.@02018986000001000180000.adr.S,y+
	inx
	mva #$16 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED.@02018986000001000180000

; optimize FAIL ('B_CRT.CRT_WRITECENTERED.@02018986000001000180000', fight_utils.pas), line = 232

	inx
	mwy FIGHT_STRING_4 :bp2
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITECENTERED.@02018986000001000180000.adr.S,y+
	inx
	mva #$17 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED.@02018986000001000180000

; optimize OK (fight_utils.pas), line = 233

	lda #$46
	jsr WAITFRAMES

; optimize OK (fight_utils.pas), line = 234

	lda #$00
	ldy #256-160
	sta:rne $DF20+160-256,y+

; optimize OK (fight_utils.pas), line = 235

	lda T
	asl @
	tay
	lda adr.FP_POSW,y
	sta FIGHT_CLEARPLAYER.P
	lda adr.FP_POSW+1,y
	sta FIGHT_CLEARPLAYER.P+1
	jsr FIGHT_CLEARPLAYER

; optimize FAIL ('FIGHT_DISPLAYSTATS', fight_utils.pas), line = 236

	jsr FIGHT_DISPLAYSTATS
	jmp l_2434
l_2403

; optimize OK (fight_utils.pas), line = 239

	ldy T
	lda adr.FP_ENERGY,y
	sub HIT
	sta adr.FP_ENERGY,y
l_2434

; optimize OK (fight_utils.pas), line = 240

	lda T
	sta RESULT

; optimize OK (fight_utils.pas), line = 242

	lda #$00
	ldy #$27
	sta:rpl $DF20,y-
	jmp @exit
l_2330

; --- ForToDoEpilog
c_2265
	inc V
	jne l_2265
l_2273
b_2265

; optimize OK (fight_utils.pas), line = 247

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$14
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', fight_utils.pas), line = 248

	inx
	mva FIGHT_STRING_5 :STACKORIGIN,x
	mva FIGHT_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (fight_utils.pas), line = 249

	lda #$32
	jsr WAITFRAMES

; optimize OK (fight_utils.pas), line = 250

	lda HITPLAYER
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0BC4
K	= DATAORIGIN+$0BC5
E	= DATAORIGIN+$0BC7
R	= DATAORIGIN+$0BC8
V	= DATAORIGIN+$0BC9
W	= DATAORIGIN+$0BCA
T	= DATAORIGIN+$0BCB
HIT	= DATAORIGIN+$0BCC
HITPLAYER	= DATAORIGIN+$0BCD
T1	= DATAORIGIN+$0BCE
T2	= DATAORIGIN+$0BCF
T3	= DATAORIGIN+$0BD0
T4	= DATAORIGIN+$0BD1

@VarData	= K
@VarDataSize	= 13

	rts						; ret
.endl

.local	FIGHT_CHECKWINNER				; PROCEDURE

; optimize OK (fight_utils.pas), line = 260

	lda #$00
	sta S

l_2472
; --- ForToDoCondition
	lda S
	cmp #$02
	jcs l_2480

; optimize OK (fight_utils.pas), line = 262

	lda #$01
	sta PARTYDEAD

; optimize OK (fight_utils.pas), line = 263

	lda #$00
	sta I
	ldy S
	lda adr.FP_N,y
	sub #$01
	sta @FORTMP_2493_0

l_2496
; --- ForToDoCondition
	lda @FORTMP_2493_0::#$00
	cmp I
	jcc l_24A4

; optimize OK (fight_utils.pas), line = 265

	lda S
	asl @
	asl @
	asl @
	asl @
	add I
	tay
	lda adr.FP_ENERGY,y
	jne l_24C3
	jmp c_2496
l_24C3

; optimize OK (fight_utils.pas), line = 267

	lda #$00
	sta PARTYDEAD

; --- ForToDoEpilog
c_2496
	inc I
	jne l_2496
l_24A4

; optimize OK (fight_utils.pas), line = 269

	lda PARTYDEAD
	jeq l_24E1

; optimize OK (fight_utils.pas), line = 271

	lda #$01
	sub S
	sta FP_WINNER
	jmp @exit
l_24E1

; --- ForToDoEpilog
	inc S
	jne l_2472
l_2480

; ------------------------------------------------------------

S	= DATAORIGIN+$0BD2
I	= DATAORIGIN+$0BD3
PARTYDEAD	= DATAORIGIN+$0BD4

@VarData	= S
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_MOVECURRENTPLAYER				; PROCEDURE

; optimize OK (fight_utils.pas), line = 282

	lda #$00
	sta FP_VALIDCMD

; optimize OK (fight_utils.pas), line = 283

	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_POSW,y
	sta F_CURPOS
	lda #$DC
	add adr.FP_POSW+1,y
	sta F_CURPOS+1

; optimize OK (fight_utils.pas), line = 284

	lda #$06
	cmp FP_CURRENTCOMMAND
	jne l_2519

; optimize OK (fight_utils.pas), line = 285

	lda F_CURPOS
	sub #$01
	sta :STACKORIGIN+9
	lda F_CURPOS+1
	sbc #$00
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	jne l_2530

; optimize OK (fight_utils.pas), line = 286

	mwy F_CURPOS :bp2
	ldy #$27
	lda (:bp2),y
	jne l_254B

; optimize OK (fight_utils.pas), line = 287

	lda #$FF
	sta FP_VALIDCMD
l_254B
l_2530
l_2519

; optimize OK (fight_utils.pas), line = 289

	lda #$07
	cmp FP_CURRENTCOMMAND
	jne l_2568

; optimize OK (fight_utils.pas), line = 290

	mwy F_CURPOS :bp2
	ldy #$02
	lda (:bp2),y
	jne l_257F

; optimize OK (fight_utils.pas), line = 291

	ldy #$2A
	lda (:bp2),y
	jne l_259A

; optimize OK (fight_utils.pas), line = 292

	lda #$01
	sta FP_VALIDCMD
l_259A
l_257F
l_2568

; optimize OK (fight_utils.pas), line = 294

	lda #$0E
	cmp FP_CURRENTCOMMAND
	jne l_25B7

; optimize OK (fight_utils.pas), line = 295

	lda F_CURPOS
	sub #$28
	sta :STACKORIGIN+9
	lda F_CURPOS+1
	sbc #$00
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	jne l_25CE

; optimize OK (fight_utils.pas), line = 296

	lda F_CURPOS
	add #$D9
	sta :STACKORIGIN+9
	lda F_CURPOS+1
	adc #$FF
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	jne l_25E9

; optimize OK (fight_utils.pas), line = 297

	lda #$D8
	sta FP_VALIDCMD
l_25E9
l_25CE
l_25B7

; optimize OK (fight_utils.pas), line = 299

	lda #$0F
	cmp FP_CURRENTCOMMAND
	jne l_2606

; optimize OK (fight_utils.pas), line = 300

	mwy F_CURPOS :bp2
	ldy #$50
	lda (:bp2),y
	jne l_261D

; optimize OK (fight_utils.pas), line = 301

	iny
	lda (:bp2),y
	jne l_2638

; optimize OK (fight_utils.pas), line = 302

	lda #$28
	sta FP_VALIDCMD
l_2638
l_261D
l_2606

; optimize OK (fight_utils.pas), line = 304

	lda FP_VALIDCMD
	jeq l_2655

; optimize FAIL ('FIGHT_CLEARCURRENTPLAYER', fight_utils.pas), line = 306

	jsr FIGHT_CLEARCURRENTPLAYER

; optimize OK (fight_utils.pas), line = 307

	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_POSW,y
	sta :STACKORIGIN+10
	lda adr.FP_POSW+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda FP_VALIDCMD
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+11
	add :STACKORIGIN+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+STACKWIDTH+10
	lda FP_CURRENTPLAYER
	asl @
	tay
	lda :STACKORIGIN+10
	sta adr.FP_POSW,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.FP_POSW+1,y
l_2655

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_ATTACKCURRENTPLAYER			; PROCEDURE

; optimize OK (fight_utils.pas), line = 318

	lda FP_CURRENTCOMMAND
	cmp #$0C
	jne l_2680

; optimize FAIL ('FIGHT_DRAWCURRENTPLAYER', fight_utils.pas), line = 321

	jsr FIGHT_DRAWCURRENTPLAYER

; optimize OK (fight_utils.pas), line = 324

	lda #$00
	sta CURRENTBLINK

; --- RepeatUntilProlog
l_2687

; optimize FAIL ('B_SYSTEM.WAITFRAME', fight_utils.pas), line = 326

	jsr B_SYSTEM.WAITFRAME

; optimize OK (fight_utils.pas), line = 327

	lda CURRENTBLINK
	cmp #$05
	jne l_269A

; optimize FAIL ('FIGHT_CLEARCURRENTPLAYER', fight_utils.pas), line = 328

	jsr FIGHT_CLEARCURRENTPLAYER
l_269A

; optimize OK (fight_utils.pas), line = 329

	lda CURRENTBLINK
	cmp #$0A
	jne l_26B0

; optimize OK (fight_utils.pas), line = 331

	lda #$00
	sta CURRENTBLINK

; optimize FAIL ('FIGHT_DRAWCURRENTPLAYER', fight_utils.pas), line = 332

	jsr FIGHT_DRAWCURRENTPLAYER
l_26B0

; optimize OK (fight_utils.pas), line = 334

	inc CURRENTBLINK

; optimize FAIL ('CHECKKEYANDSTICK', fight_utils.pas), line = 335

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta CH

; optimize OK (fight_utils.pas), line = 336

	cmp #$0F
	jeq l_2687x
	cmp #$0E
	jeq l_2687x
	cmp #$07
	jeq l_2687x
	cmp #$06
	jeq l_2687x
	cmp #$0C
	jne l_2687
l_2687x

; optimize FAIL ('FIGHT_DRAWPLAYERS', fight_utils.pas), line = 338

	jsr FIGHT_DRAWPLAYERS

; optimize OK (fight_utils.pas), line = 339

	lda CH
	sta @CASETMP_000E
	cmp #$06
	jne l_270F
@

; optimize OK (fight_utils.pas), line = 340

	lda #$FF
	sta SHOOT_DIFF
	jmp a_000E
l_270F
	cmp #$07
	jne l_271A

; optimize OK (fight_utils.pas), line = 341

	lda #$01
	sta SHOOT_DIFF
	jmp a_000E
l_271A
	cmp #$0E
	jne l_2725

; optimize OK (fight_utils.pas), line = 342

	lda #$D8
	sta SHOOT_DIFF
	jmp a_000E
l_2725
	cmp #$0F
	jne l_2730

; optimize OK (fight_utils.pas), line = 343

	lda #$28
	sta SHOOT_DIFF
	jmp a_000E
l_2730
	cmp #$0C
	jne l_273B

; optimize FAIL ('WAITFORKEYRELEASE', fight_utils.pas), line = 346

	jsr WAITFORKEYRELEASE

; optimize OK (fight_utils.pas), line = 347

	lda #$00
	sta FP_VALIDCMD
	jmp @exit
l_273B
a_000E

; optimize FAIL ('FIGHT_SHOOT', fight_utils.pas), line = 351

	jsr FIGHT_SHOOT

; optimize OK (fight_utils.pas), line = 352

	lda #$01
	sta FP_VALIDCMD
	jmp @exit
l_2680

; optimize OK (fight_utils.pas), line = 355

	lda #$00
	sta FP_VALIDCMD

; ------------------------------------------------------------

CH	= DATAORIGIN+$0BD6
CURRENTBLINK	= DATAORIGIN+$0BD7
@CASETMP_000E	= DATAORIGIN+$0BD8

@VarData	= CH
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_WAITFORCOMMAND				; PROCEDURE

; optimize OK (fight_utils.pas), line = 365

	lda #$00
	sta CURRENTBLINK

; --- RepeatUntilProlog
l_275B

; optimize FAIL ('B_SYSTEM.WAITFRAME', fight_utils.pas), line = 367

	jsr B_SYSTEM.WAITFRAME

; optimize OK (fight_utils.pas), line = 368

	lda CURRENTBLINK
	cmp #$1E
	jne l_276E

; optimize FAIL ('FIGHT_CLEARCURRENTPLAYER', fight_utils.pas), line = 369

	jsr FIGHT_CLEARCURRENTPLAYER
l_276E

; optimize OK (fight_utils.pas), line = 370

	lda CURRENTBLINK
	cmp #$3C
	jne l_2784

; optimize OK (fight_utils.pas), line = 372

	lda #$00
	sta CURRENTBLINK

; optimize FAIL ('FIGHT_DRAWCURRENTPLAYER', fight_utils.pas), line = 373

	jsr FIGHT_DRAWCURRENTPLAYER
l_2784

; optimize OK (fight_utils.pas), line = 375

	inc CURRENTBLINK

; optimize FAIL ('CHECKKEYANDSTICK', fight_utils.pas), line = 376

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta CH

; optimize OK (fight_utils.pas), line = 377

	jeq l_275B

; optimize OK (fight_utils.pas), line = 378

	sta FP_CURRENTCOMMAND

; ------------------------------------------------------------

CH	= DATAORIGIN+$0BD9
CURRENTBLINK	= DATAORIGIN+$0BDA

@VarData	= CH
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_PLAYERMOVE				; PROCEDURE

; --- RepeatUntilProlog
l_27B2

; optimize FAIL ('FIGHT_WAITFORCOMMAND', fight_utils.pas), line = 387

	jsr FIGHT_WAITFORCOMMAND

; optimize OK (fight_utils.pas), line = 389

	lda #$0A
	jsr WAITFRAMES

; --- RepeatUntilProlog
l_27B6

; optimize FAIL ('CHECKKEYANDSTICK', fight_utils.pas), line = 391

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta TMPCH

; optimize OK (fight_utils.pas), line = 392

	cmp FP_CURRENTCOMMAND
	jeq l_27B6

; optimize OK (fight_utils.pas), line = 395

	lda FP_CURRENTCOMMAND
	cmp #$21
	jeq @exit
l_27DB

; optimize OK (fight_utils.pas), line = 398

	lda FP_CURRENTCOMMAND
	cmp #$2F
	jne l_27F0

; optimize OK (fight_utils.pas), line = 400

	lda #$01
	sub FP_CURRENTSITE
	sta FP_WINNER
	jmp @exit
l_27F0

; optimize OK (fight_utils.pas), line = 405

	lda FP_CURRENTCOMMAND
	cmp #$0D
	jne l_280F

; optimize OK (fight_utils.pas), line = 406

	ldy FP_CURRENTSITE
	lda #$01
	sta adr.FP_AI,y
l_280F

; optimize OK (fight_utils.pas), line = 409

	lda FP_CURRENTCOMMAND
	cmp #$05
	jne l_282B

; optimize OK (fight_utils.pas), line = 410

	lda FP_CURRENTSITE
	sta FP_WINNER
	jmp @exit
l_282B

; optimize FAIL ('FIGHT_MOVECURRENTPLAYER', fight_utils.pas), line = 415

	jsr FIGHT_MOVECURRENTPLAYER

; optimize OK (fight_utils.pas), line = 417

	lda FP_VALIDCMD
	jne l_2847

; optimize FAIL ('FIGHT_ATTACKCURRENTPLAYER', fight_utils.pas), line = 418

	jsr FIGHT_ATTACKCURRENTPLAYER
l_2847

; optimize OK (fight_utils.pas), line = 419

	lda FP_VALIDCMD
	jeq l_27B2

; ------------------------------------------------------------

TMPCH	= DATAORIGIN+$0BDB

@VarData	= TMPCH
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_CHECKSHOOT				; FUNCTION

; optimize OK (fight_ai.pas), line = 8

	lda #$00
	sta RESULT

; optimize FAIL ('FIGHT_SETSHOOTSTART', fight_ai.pas), line = 9

	jsr FIGHT_SETSHOOTSTART

; optimize OK (fight_ai.pas), line = 10

	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_POSW,y
	sta F_CURPOS
	lda #$DC
	add adr.FP_POSW+1,y
	sta F_CURPOS+1

; optimize OK (fight_ai.pas), line = 11

	ldy FP_CURRENTPLAYER
	lda adr.FP_WEAPON,y
	tay
	lda adr.WEAPONREACH,y
	sta R

; optimize OK (fight_ai.pas), line = 14

	lda #$00
	sta V

l_2882
; --- ForToDoCondition
	lda V
	cmp #$29
	jcs l_2890

; optimize OK (fight_ai.pas), line = 17

	cmp R
	jeq @exit
l_28A4

; optimize OK (fight_ai.pas), line = 19

	lda F_CURPOS
	add SHOOT_START
	sta :STACKORIGIN+9
	lda F_CURPOS+1
	adc SHOOT_START+1
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda SHOOT_DIFF
	spl
	dey
	add :STACKORIGIN+9
	sta K
	tya
	adc :STACKORIGIN+STACKWIDTH+9
	sta K+1

; optimize OK (fight_ai.pas), line = 20

	sta :bp+1
	ldy K
	lda (:bp),y
	sta W

; optimize OK (fight_ai.pas), line = 21

	jne l_28CF

; optimize OK (fight_ai.pas), line = 23

	ldy #$00
	lda SHOOT_DIFF
	spl
	dey
	add SHOOT_START
	sta SHOOT_START
	tya
	adc SHOOT_START+1
	sta SHOOT_START+1
	jmp c_2882
l_28CF

; optimize OK (fight_ai.pas), line = 26

	lda W
	cmp #$01
	jne l_28EF
	jmp b_2882
l_28EF

; optimize OK (fight_ai.pas), line = 29

	lda K
	sta CHECKHIT.K
	lda K+1
	sta CHECKHIT.K+1
	jsr CHECKHIT
	lda CHECKHIT.RESULT
	sta T

; optimize OK (fight_ai.pas), line = 30

	cmp #$80
	jne l_290A
	jmp c_2882
l_290A

; optimize OK (fight_ai.pas), line = 33

	ldy #1
	lda FP_CURRENTSITE
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda T
	cmp #$10
	bcc @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda FP_CURRENTSITE
	cmp #$01
	beq @+
	dey
@
	sty :STACKORIGIN+10

	lda T
	cmp #$10
	lda #$00
	rol @
	and :STACKORIGIN+10
	ora :STACKORIGIN+9
	jeq l_2943

; optimize OK (fight_ai.pas), line = 35

	lda #$00
	sta RESULT
	jmp @exit
l_2943

; optimize OK (fight_ai.pas), line = 40

	lda #$01
	sta RESULT
	jmp @exit

; --- ForToDoEpilog
c_2882
	inc V
	jne l_2882
l_2890
b_2882

; optimize OK (fight_ai.pas), line = 44

	lda #$00
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0BDC
K	= DATAORIGIN+$0BDD
R	= DATAORIGIN+$0BDF
V	= DATAORIGIN+$0BE0
W	= DATAORIGIN+$0BE1
T	= DATAORIGIN+$0BE2

@VarData	= K
@VarDataSize	= 6

	rts						; ret
.endl

.local	FIGHT_AIMOVE					; PROCEDURE

; optimize OK (fight_ai.pas), line = 54

	lda #$00
	sta S

l_2964
; --- ForToDoCondition
	lda S
	cmp #$04
	jcs l_2972

; optimize OK (fight_ai.pas), line = 56

	sta @CASETMP_000F
	cmp #$00
	jne l_297D
@

; optimize OK (fight_ai.pas), line = 57

	lda #$FF
	sta SHOOT_DIFF
	jmp a_000F
l_297D
	cmp #$01
	jne l_2988

; optimize OK (fight_ai.pas), line = 58

	lda #$01
	sta SHOOT_DIFF
	jmp a_000F
l_2988
	cmp #$02
	jne l_2993

; optimize OK (fight_ai.pas), line = 59

	lda #$D8
	sta SHOOT_DIFF
	jmp a_000F
l_2993
	cmp #$03
	jne l_299E

; optimize OK (fight_ai.pas), line = 60

	lda #$28
	sta SHOOT_DIFF
l_299E
a_000F

; optimize FAIL ('FIGHT_CHECKSHOOT', fight_ai.pas), line = 62

	jsr FIGHT_CHECKSHOOT
	lda FIGHT_CHECKSHOOT.RESULT
	jeq l_29B8

; optimize FAIL ('FIGHT_SHOOT', fight_ai.pas), line = 64

	jsr FIGHT_SHOOT
	jmp @exit
l_29B8

; --- ForToDoEpilog
	inc S
	jne l_2964
l_2972

; optimize OK (fight_ai.pas), line = 71

	lda #$00
	sta NE
	sta NE+1

; optimize OK (fight_ai.pas), line = 72

	lda #$E7
	sta ND
	lda #$03
	sta ND+1

; optimize OK (fight_ai.pas), line = 73

	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_POSW,y
	sta CP
	lda adr.FP_POSW+1,y
	sta CP+1

; optimize OK (fight_ai.pas), line = 74

	lda #$00
	sta II
	lda #$01
	sub FP_CURRENTSITE
	tay
	lda adr.FP_N,y
	sub #$01
	sta @FORTMP_29E4_0

l_29E7
; --- ForToDoCondition
	lda @FORTMP_29E4_0::#$00
	cmp II
	jcc l_29F5

; optimize OK (fight_ai.pas), line = 77

	lda #$01
	sbc FP_CURRENTSITE
	asl @
	asl @
	asl @
	asl @
	sta DX

; optimize OK (fight_ai.pas), line = 78

	add II
	tay
	lda adr.FP_ENERGY,y
	jne l_2A1E
	jmp c_29E7
l_2A1E

; optimize OK (fight_ai.pas), line = 79

	ldy #$00
	lda DX
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+9
	add II
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.FP_POSW,y
	sta EP
	lda adr.FP_POSW+1,y
	sta EP+1

; optimize OK (fight_ai.pas), line = 81

	lda #$28
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda CP
	sta @SMALLINT.MOD.A
	lda CP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta :STACKORIGIN+9
	lda #$28
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda EP
	sta @SMALLINT.MOD.A
	lda EP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda :STACKORIGIN+9
	sub @SMALLINT.MOD.RESULT
	sta DX

; optimize OK (fight_ai.pas), line = 82

	lda #$28
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda CP
	sta @SMALLINT.DIV.A
	lda CP+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	lda :eax
	sta :STACKORIGIN+9
	lda #$28
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda EP
	sta @SMALLINT.DIV.A
	lda EP+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	lda :STACKORIGIN+9
	sub :eax
	sta DY

; optimize OK (fight_ai.pas), line = 83

	lda DX
	cmp #$80
	lda #$00
	rol @
	sta :STACKORIGIN+11
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+11
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+11
	lda #$01
	sub :STACKORIGIN+11
	sta :ecx
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+11
	sta :ecx+1
	ldy #$00
	lda DX
	spl
	dey
	sty :eax+1
	sta :eax
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda DY
	cmp #$80
	lda #$00
	rol @
	sta :STACKORIGIN+12
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda :STACKORIGIN+12
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+12
	lda #$01
	sub :STACKORIGIN+12
	sta :ecx
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+12
	sta :ecx+1
	ldy #$00
	lda DY
	spl
	dey
	sty :eax+1
	sta :eax
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta DIST
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta DIST+1

; optimize OK (fight_ai.pas), line = 84

	lda DIST
	cmp ND
	lda DIST+1
	sbc ND+1
	svc
	eor #$80
	jpl l_2A99

; optimize OK (fight_ai.pas), line = 86

	lda II
	sta NE
	lda #$00
	sta NE+1

; optimize OK (fight_ai.pas), line = 87

	lda DIST
	sta ND
	lda DIST+1
	sta ND+1
l_2A99

; --- ForToDoEpilog
c_29E7
	inc II
	jne l_29E7
l_29F5

; optimize OK (fight_ai.pas), line = 96

	lda #$01
	sub FP_CURRENTSITE
	asl @
	asl @
	asl @
	asl @
	sta DX

; optimize OK (fight_ai.pas), line = 97

	add NE
	sta DX

; optimize OK (fight_ai.pas), line = 98

	asl @
	tay
	lda adr.FP_POSW,y
	sta EP
	lda adr.FP_POSW+1,y
	sta EP+1

; optimize OK (fight_ai.pas), line = 99

	lda #$28
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda CP
	sta @SMALLINT.MOD.A
	lda CP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta :STACKORIGIN+9
	lda #$28
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda EP
	sta @SMALLINT.MOD.A
	lda EP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda :STACKORIGIN+9
	sub @SMALLINT.MOD.RESULT
	sta DX

; optimize OK (fight_ai.pas), line = 100

	lda #$28
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda CP
	sta @SMALLINT.DIV.A
	lda CP+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	lda :eax
	sta :STACKORIGIN+9
	lda #$28
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda EP
	sta @SMALLINT.DIV.A
	lda EP+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	lda :STACKORIGIN+9
	sub :eax
	sta DY

; optimize OK (fight_ai.pas), line = 103

	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	cmp #$01
	jne l_2B02

; optimize OK (fight_ai.pas), line = 105

	lda DX
	jpl l_2B15
	lda #$07
	jmp l_2B23
l_2B15
	lda #$06
l_2B23
	jmp l_2B30
l_2B02

; optimize OK (fight_ai.pas), line = 109

	lda DY
	jpl l_2B42
	lda #$0F
	jmp l_2B50
l_2B42
	lda #$0E
l_2B30
l_2B50
	sta FP_CURRENTCOMMAND

; optimize FAIL ('FIGHT_CLEARCURRENTPLAYER', fight_ai.pas), line = 113

	jsr FIGHT_CLEARCURRENTPLAYER

; optimize FAIL ('FIGHT_MOVECURRENTPLAYER', fight_ai.pas), line = 114

	jsr FIGHT_MOVECURRENTPLAYER

; optimize OK (fight_ai.pas), line = 116

	lda FP_VALIDCMD
	jne l_2B68

; optimize OK (fight_ai.pas), line = 118

	lda FP_CURRENTCOMMAND
	sta @CASETMP_0010
	cmp #$0F
	jne l_2B74
@

; optimize OK (fight_ai.pas), line = 119

	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	cmp #$01
	jne l_2B85
	lda #$06
	jmp l_2B93
l_2B85
	lda #$07
l_2B93
	sta FP_CURRENTCOMMAND
	jmp a_0010
l_2B74
	cmp #$0E
	jne l_2B9E

; optimize OK (fight_ai.pas), line = 120

	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	cmp #$01
	jne l_2BAF
	lda #$06
	jmp l_2BBD
l_2BAF
	lda #$07
l_2BBD
	sta FP_CURRENTCOMMAND
	jmp a_0010
l_2B9E
	cmp #$06
	jne l_2BC8

; optimize OK (fight_ai.pas), line = 121

	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	cmp #$01
	jne l_2BD9
	lda #$0F
	jmp l_2BE7
l_2BD9
	lda #$0E
l_2BE7
	sta FP_CURRENTCOMMAND
	jmp a_0010
l_2BC8
	cmp #$07
	jne l_2BF2

; optimize OK (fight_ai.pas), line = 122

	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	cmp #$01
	jne l_2C03
	lda #$0F
	jmp l_2C11
l_2C03
	lda #$0E
l_2C11
	sta FP_CURRENTCOMMAND
l_2BF2
a_0010

; optimize FAIL ('FIGHT_MOVECURRENTPLAYER', fight_ai.pas), line = 124

	jsr FIGHT_MOVECURRENTPLAYER
l_2B68

; ------------------------------------------------------------

S	= DATAORIGIN+$0BE3
DX	= DATAORIGIN+$0BE4
DY	= DATAORIGIN+$0BE5
II	= DATAORIGIN+$0BE6
CP	= DATAORIGIN+$0BE7
EP	= DATAORIGIN+$0BE9
DIST	= DATAORIGIN+$0BEB
NE	= DATAORIGIN+$0BED
ND	= DATAORIGIN+$0BEF
@CASETMP_000F	= DATAORIGIN+$0BF1
@CASETMP_0010	= DATAORIGIN+$0BF3

@VarData	= S
@VarDataSize	= 16

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETUPFIGHTARENA					; FUNCTION

; optimize OK (fight.pas), line = 7

	lda #$00
	sta PLAYERPOS_X

; optimize OK (fight.pas), line = 8

	sta PLAYERPOS_Y

; optimize FAIL ('BLACKCONSOLE', fight.pas), line = 10

	jsr BLACKCONSOLE

; optimize OK (fight.pas), line = 11

	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A
	lda #$DC
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A+1
	lda #$C0
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@03018000001810000188000
	m@INLINE
	.ENDL

; optimize OK (fight.pas), line = 12

	lda FIGHT_MAP_FNAME
	sta LOADXAPL.FNAME
	lda FIGHT_MAP_FNAME+1
	sta LOADXAPL.FNAME+1
	lda #$00
	sta LOADXAPL.OUTPUTPOINTER
	lda #$D8
	sta LOADXAPL.OUTPUTPOINTER+1
	jsr LOADXAPL

; optimize OK (fight.pas), line = 14

	lda #$00
	ldy #256-200
	sta:rne $DEF8+200-256,y+

; optimize FAIL ('ENABLEMAPCONSOLE', fight.pas), line = 15

	jsr ENABLEMAPCONSOLE

; optimize OK (fight.pas), line = 16

	lda #$F4
	sta MAPCOLORB

; optimize OK (fight.pas), line = 18

	lda #$01
	sta DIDFIGHT

; optimize OK (fight.pas), line = 27

	lda #$00
	sta I

l_2C49
; --- ForToDoCondition
	lda I
	cmp #$20
	jcs l_2C57

; optimize OK (fight.pas), line = 28

	asl @
	tay
	lda adr.FPPOSSTART,y
	sta adr.FP_POSW,y
	lda adr.FPPOSSTART+1,y
	sta adr.FP_POSW+1,y

; --- ForToDoEpilog
	inc I
	jne l_2C49
l_2C57

; optimize OK (fight.pas), line = 30

	lda #$00
	sta C

; optimize FAIL ('B_CRT.CRT_WRITERIGHTALIGNED.@02018986000001000180000', fight.pas), line = 31

	inx
	lda adr.FP_GANG+$02
	sta :bp2
	lda adr.FP_GANG+1+$02
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITERIGHTALIGNED.@02018986000001000180000.adr.S,y+
	inx
	mva #$13 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITERIGHTALIGNED.@02018986000001000180000

; optimize OK (fight.pas), line = 32

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$13
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', fight.pas), line = 33

	inx
	lda adr.FP_GANG+$00
	sta :STACKORIGIN,x
	lda adr.FP_GANG+1+$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (fight.pas), line = 34

	lda #$00
	sta B_CRT.CRT_INVERT.X
	lda #$13
	sta B_CRT.CRT_INVERT.Y
	lda B_CRT.CRT_SCREENWIDTH
	sta B_CRT.CRT_INVERT.WIDTH
	jsr B_CRT.CRT_INVERT

; optimize OK (fight.pas), line = 36

	lda #$63
	sta FP_WINNER

; --- RepeatUntilProlog
l_2C82

; optimize OK (fight.pas), line = 38

	lda #$00
	sta FP_CURRENTSITE

l_2C8B
; --- ForToDoCondition
	lda FP_CURRENTSITE
	cmp #$02
	jcs l_2C99

; optimize OK (fight.pas), line = 40

	lda #$00
	sta I
	ldy FP_CURRENTSITE
	lda adr.FP_N,y
	sub #$01
	sta @FORTMP_2CA8_0

l_2CAB
; --- ForToDoCondition
	lda @FORTMP_2CA8_0::#$00
	cmp I
	jcc l_2CB9

; optimize OK (fight.pas), line = 42

	lda FP_CURRENTSITE
	asl @
	asl @
	asl @
	asl @
	add I
	sta FP_CURRENTPLAYER

; optimize OK (fight.pas), line = 43

	tay
	lda adr.FP_ENERGY,y
	jne l_2CDE
	jmp c_2CAB
l_2CDE

; optimize FAIL ('FIGHT_DISPLAYSTATS', fight.pas), line = 44

	jsr FIGHT_DISPLAYSTATS

; optimize FAIL ('FIGHT_DRAWPLAYERS', fight.pas), line = 45

	jsr FIGHT_DRAWPLAYERS

; optimize OK (fight.pas), line = 46

	lda #$05
	jsr WAITFRAMES

; optimize OK (fight.pas), line = 48

	ldy FP_CURRENTSITE
	lda adr.FP_AI,y
	cmp #$01
	jne l_2CFA
	jsr FIGHT_AIMOVE
	jmp l_2D05
l_2CFA

; optimize FAIL ('FIGHT_PLAYERMOVE', fight.pas), line = 49

	jsr FIGHT_PLAYERMOVE
l_2D05

; optimize FAIL ('FIGHT_CHECKWINNER', fight.pas), line = 51

	jsr FIGHT_CHECKWINNER

; optimize OK (fight.pas), line = 52

	lda FP_WINNER
	cmp #$63
	jeq l_2D19
	jmp b_2CAB
l_2D19

; --- ForToDoEpilog
c_2CAB
	inc I
	jne l_2CAB
l_2CB9
b_2CAB

; optimize OK (fight.pas), line = 54

	lda FP_WINNER
	cmp #$63
	jeq l_2D33
	jmp b_2C8B
l_2D33

; --- ForToDoEpilog
	inc FP_CURRENTSITE
	jne l_2C8B
l_2C99
b_2C8B

; optimize OK (fight.pas), line = 56

	lda FP_WINNER
	cmp #$63
	jeq l_2C82

; optimize OK (fight.pas), line = 59

	lda #$00
	ldy #256-200
	sta:rne $DEF8+200-256,y+

; optimize FAIL ('B_CRT.CRT_WRITECENTERED.@02018986000001000180000', fight.pas), line = 60

	inx
	mwy FIGHT_STRING_6 :bp2
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITECENTERED.@02018986000001000180000.adr.S,y+
	inx
	mva #$15 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED.@02018986000001000180000

; optimize FAIL ('B_CRT.CRT_WRITECENTERED.@02018986000001000180000', fight.pas), line = 61

	inx
	lda FP_WINNER
	asl @
	tay
	lda adr.FP_GANG,y
	sta :bp2
	lda adr.FP_GANG+1,y
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITECENTERED.@02018986000001000180000.adr.S,y+
	inx
	mva #$16 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED.@02018986000001000180000

; optimize FAIL ('CRT_READKEYORFIRE', fight.pas), line = 62

	jsr CRT_READKEYORFIRE

; optimize OK (fight.pas), line = 63

	lda FP_WINNER
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0BF4
I	= DATAORIGIN+$0BF5
C	= DATAORIGIN+$0BF6

@VarData	= I
@VarDataSize	= 2

	rts						; ret
.endl

.local	DOFIGHT						; FUNCTION

; optimize OK (fight.pas), line = 71

	lda #$01
	sta RESULT

; optimize OK (fight.pas), line = 74

	lda #$00
	sta J

l_2D6F
; --- ForToDoCondition
	ldy J
	cpy #$02
	jcs l_2D7D

; optimize OK (fight.pas), line = 75

	lda adr.FP_AI,y
	cmp #$01
	jne l_2D92

; optimize OK (fight.pas), line = 77

	lda #$00
	sta K
	lda adr.FP_N,y
	sub #$01
	sta @FORTMP_2DA2_0

l_2DA5
; --- ForToDoCondition
	lda @FORTMP_2DA2_0::#$00
	cmp K
	jcc l_2DB3

; optimize OK (fight.pas), line = 78

	lda J
	asl @
	asl @
	asl @
	asl @
	add K
	tay
	lda #$1E
	sta adr.FP_STRENGTH,y

; optimize OK (fight.pas), line = 79

	lda J
	asl @
	asl @
	asl @
	asl @
	add K
	tay
	lda #$1E
	sta adr.FP_BRUTALITY,y

; --- ForToDoEpilog
	inc K
	jne l_2DA5
l_2DB3
l_2D92

; --- ForToDoEpilog
	inc J
	jne l_2D6F
l_2D7D

; optimize OK (fight.pas), line = 84

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	sta adr.FP_N

; optimize OK (fight.pas), line = 85

	tya
	asl @
	tay
	lda adr.PLGANG,y
	sta @move.src
	lda adr.PLGANG+1,y
	sta @move.src+1
	lda adr.FP_GANG
	sta @move.dst
	lda adr.FP_GANG+1
	sta @move.dst+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (fight.pas), line = 86

	lda #$00
	sta adr.FP_AI

; optimize OK (fight.pas), line = 88

	sta K

; optimize OK (fight.pas), line = 89

	sta J

l_2E06
; --- ForToDoCondition
	ldy J
	cpy #$20
	jcs l_2E14

; optimize OK (fight.pas), line = 91

	lda adr.PLGANGSTERS,y
	cmp CURRENTPLAYER
	jne l_2E2B

; optimize OK (fight.pas), line = 93

	lda J
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta @move.src
	lda adr.GANGSTERNAMES+1,y
	sta @move.src+1
	lda K
	asl @
	tay
	lda adr.FP_NAME,y
	sta @move.dst
	lda adr.FP_NAME+1,y
	sta @move.dst+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (fight.pas), line = 94

	ldy J
	lda adr.GANGSTERHEALTH,y
	ldy K
	sta adr.FP_ENERGY,y

; optimize OK (fight.pas), line = 95

	ldy J
	lda adr.GANGSTERWEAPON,y
	ldy K
	sta adr.FP_WEAPON,y

; optimize OK (fight.pas), line = 96

	ldy J
	lda adr.GANGSTERSTR,y
	ldy K
	sta adr.FP_STRENGTH,y

; optimize OK (fight.pas), line = 97

	ldy J
	lda adr.GANGSTERBRUT,y
	ldy K
	sta adr.FP_BRUTALITY,y

; optimize OK (fight.pas), line = 98

	ldy J
	lda adr.GANGSTERSEX,y
	ldy K
	sta adr.FP_SEX,y

; optimize OK (fight.pas), line = 99

	inc K
l_2E2B

; --- ForToDoEpilog
	inc J
	jne l_2E06
l_2E14

; optimize FAIL ('SETUPFIGHTARENA', fight.pas), line = 104

	jsr SETUPFIGHTARENA
	lda SETUPFIGHTARENA.RESULT
	sta W

; optimize OK (fight.pas), line = 107

	lda #$00
	sta K

; optimize OK (fight.pas), line = 108

	sta J

l_2E95
; --- ForToDoCondition
	ldy J
	cpy #$20
	jcs l_2EA3

; optimize OK (fight.pas), line = 110

	lda adr.PLGANGSTERS,y
	cmp CURRENTPLAYER
	jne l_2EBA

; optimize OK (fight.pas), line = 112

	ldy K
	lda adr.FP_ENERGY,y
	ldy J
	sta adr.GANGSTERHEALTH,y

; optimize OK (fight.pas), line = 114

	cmp #$05
	jcs l_2EDC
	lda #$05
	sta adr.GANGSTERHEALTH,y
l_2EDC

; optimize OK (fight.pas), line = 115

	inc K
l_2EBA

; --- ForToDoEpilog
	inc J
	jne l_2E95
l_2EA3

; optimize OK (fight.pas), line = 119

	lda W
	sta RESULT

; optimize FAIL ('ENABLEMAPCONSOLE', fight.pas), line = 121

	jsr ENABLEMAPCONSOLE
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0BF8
J	= DATAORIGIN+$0BF9
K	= DATAORIGIN+$0BFA
W	= DATAORIGIN+$0BFB

@VarData	= J
@VarDataSize	= 3

	rts						; ret
.endl

.local	FIGHTPOLICE					; FUNCTION

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', helpers_fight.pas), line = 4

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', helpers_fight.pas), line = 5

	inx
	mva POLICE_STRING_1 :STACKORIGIN,x
	mva POLICE_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('WAITFORKEY', helpers_fight.pas), line = 6

	jsr WAITFORKEY

; optimize FAIL ('PREPAREFIGHTAGAINSTPOLICE', helpers_fight.pas), line = 7

	jsr PREPAREFIGHTAGAINSTPOLICE

; optimize FAIL ('DOFIGHT', helpers_fight.pas), line = 8

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_2F18

; optimize FAIL ('GOTCAUGHT', helpers_fight.pas), line = 10

	jsr GOTCAUGHT

; optimize OK (helpers_fight.pas), line = 11

	lda #$11
	sta RESULT
	jmp @exit
l_2F18

; optimize OK (helpers_fight.pas), line = 14

	lda #$01
	jsr ADDPOINTS
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0BFD

	rts						; ret
.endl

.local	INCREASECURRENTGANGSTER				; PROCEDURE

; optimize OK (armsdealer.pas), line = 4

	ldy CURRENTGANGSTER
	lda adr.GANGSTERSTR,y
	add INC_ST
	sta adr.GANGSTERSTR,y

; optimize OK (armsdealer.pas), line = 5

	cmp #$64
	jcc l_2F4D

; optimize OK (armsdealer.pas), line = 6

	lda #$63
	sta adr.GANGSTERSTR,y
l_2F4D

; optimize OK (armsdealer.pas), line = 8

	ldy CURRENTGANGSTER
	lda adr.GANGSTERINT,y
	add INC_IN
	sta adr.GANGSTERINT,y

; optimize OK (armsdealer.pas), line = 9

	cmp #$64
	jcc l_2F7E

; optimize OK (armsdealer.pas), line = 10

	lda #$63
	sta adr.GANGSTERINT,y
l_2F7E

; optimize OK (armsdealer.pas), line = 12

	ldy CURRENTGANGSTER
	lda adr.GANGSTERBRUT,y
	add INC_BT
	sta adr.GANGSTERBRUT,y

; optimize OK (armsdealer.pas), line = 13

	cmp #$64
	jcc l_2FAF

; optimize OK (armsdealer.pas), line = 14

	lda #$63
	sta adr.GANGSTERBRUT,y
l_2FAF

; optimize OK (armsdealer.pas), line = 17

	lda #$13
	jsr CRT_WRITELN_LOCSTR

; optimize OK (armsdealer.pas), line = 18

	lda #$14
	jsr CRT_WRITELN_LOCSTR

; ------------------------------------------------------------

INC_ST	= DATAORIGIN+$0BFE
INC_IN	= DATAORIGIN+$0BFF
INC_BT	= DATAORIGIN+$0C00

@VarData	= INC_ST
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ARMSDEALERCHOICES				; FUNCTION

; optimize OK (armsdealer.pas), line = 35

	lda CURRENTCHOICE
	cmp #$01
	jne l_2FD3

; optimize FAIL ('SHOWLOCATIONHEADER', armsdealer.pas), line = 37

	jsr SHOWLOCATIONHEADER

; optimize OK (armsdealer.pas), line = 39

	lda #$01
	jsr CRT_WRITELN2_LOCSTR

; optimize OK (armsdealer.pas), line = 40

	lda #$01
	sta MINWEAPON

; optimize OK (armsdealer.pas), line = 41

	lda #$05
	sta MAXWEAPON

; optimize OK (armsdealer.pas), line = 42

	lda CURRENTSUBLOCATION
	cmp #$02
	jne l_2FF1

; optimize OK (armsdealer.pas), line = 45

	lda #$07
	sta MAXWEAPON

; optimize FAIL (1, armsdealer.pas), line = 46

	inx
	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	ldy #1
	cmp #$06
	bcs @+
	dey
@
	sty :STACKORIGIN,x
	lda #$04
	jsr SYSTEM.RANDOM.@010180000
	dex
	ldy #1
	lda SYSTEM.RANDOM.@010180000.RESULT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_3016

; optimize OK (armsdealer.pas), line = 48

	lda #$02
	jsr CRT_WRITELN_LOCSTR

; optimize OK (armsdealer.pas), line = 49

	lda #$03
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', armsdealer.pas), line = 50

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (armsdealer.pas), line = 51

	lda #$08
	sta MAXWEAPON
l_3016

; optimize OK (armsdealer.pas), line = 53

	lda #$03
	sta MINWEAPON
l_2FF1

; optimize OK (armsdealer.pas), line = 56

	lda CURRENTSUBLOCATION
	cmp #$01
	jne l_303A
	lda #$05
	sta MAXWEAPON
l_303A

; optimize OK (armsdealer.pas), line = 57

	lda CURRENTSUBLOCATION
	cmp #$04
	jne l_3053

; optimize OK (armsdealer.pas), line = 59

	lda #$02
	sta MINWEAPON

; optimize OK (armsdealer.pas), line = 60

	lda #$06
	sta MAXWEAPON
l_3053

; optimize OK (armsdealer.pas), line = 64

	lda MINWEAPON
	sta R

l_306B
; --- ForToDoCondition
	lda R
	cmp MAXWEAPON
	scc
	jne l_3079

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', armsdealer.pas), line = 66

	inx
	mva #$6B :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (armsdealer.pas), line = 67

	lda R
	jsr B_CRT.CRT_WRITE.@010180000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', armsdealer.pas), line = 68

	inx
	mva #$76 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', armsdealer.pas), line = 69

	inx
	lda R
	asl @
	tay
	lda adr.WEAPONNAMES,y
	sta :STACKORIGIN,x
	lda adr.WEAPONNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', armsdealer.pas), line = 70

	inx
	mva #$85 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (armsdealer.pas), line = 71

	lda R
	asl @
	tay
	lda adr.WEAPONPRICES,y
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda adr.WEAPONPRICES+1,y
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', armsdealer.pas), line = 72

	jsr B_CRT.CRT_NEWLINE.@00

; --- ForToDoEpilog
	inc R
	jne l_306B
l_3079

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', armsdealer.pas), line = 74

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (armsdealer.pas), line = 75

	lda #$04
	jsr CRT_WRITE_LOCSTR

; optimize OK (armsdealer.pas), line = 76

	lda MINWEAPON
	sta READVALUE.MINVALUE
	lda #$00
	sta READVALUE.MINVALUE+1
	lda MAXWEAPON
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta SELECTEDWEAPON

; optimize OK (armsdealer.pas), line = 77

	jeq @exit
l_30B4

; optimize FAIL ('SHOWLOCATIONHEADER', armsdealer.pas), line = 81

	jsr SHOWLOCATIONHEADER

; optimize OK (armsdealer.pas), line = 82

	lda #$17
	jsr CRT_WRITE_LOCSTR

; optimize OK (armsdealer.pas), line = 83

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$03
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (armsdealer.pas), line = 85

	lda #$01
	sta SHOWWEAPONS

; optimize FAIL ('SELECTGANGSTER', armsdealer.pas), line = 86

	jsr SELECTGANGSTER

; optimize OK (armsdealer.pas), line = 87

	lda CURRENTGANGSTER
	cmp #$63
	jeq @exit
l_30D4

; optimize FAIL ('SHOWLOCATIONHEADER', armsdealer.pas), line = 88

	jsr SHOWLOCATIONHEADER

; optimize OK (armsdealer.pas), line = 90

	lda #$00
	sta GA

; optimize OK (armsdealer.pas), line = 93

	ldy SELECTEDWEAPON
	lda adr.WEAPONREACH,y
	cmp #$0C
	jcc l_30F1

; optimize OK (armsdealer.pas), line = 94

	ldy CURRENTGANGSTER
	lda adr.GANGSTERSTR,y
	cmp #$28
	jcs l_3107

; optimize OK (armsdealer.pas), line = 95

	lda #$06
	jsr CRT_WRITE_LOCSTR

; optimize OK (armsdealer.pas), line = 96

	lda #$FF
	sta GA
l_3107
l_30F1

; optimize OK (armsdealer.pas), line = 101

	ldy SELECTEDWEAPON
	lda adr.WEAPONPRECISION,y
	cmp #$05
	jcc l_3127

; optimize OK (armsdealer.pas), line = 102

	ldy CURRENTGANGSTER
	lda adr.GANGSTERINT,y
	cmp #$28
	jcs l_313D

; optimize OK (armsdealer.pas), line = 103

	lda #$05
	jsr CRT_WRITE_LOCSTR

; optimize OK (armsdealer.pas), line = 104

	lda #$FF
	sta GA
l_313D
l_3127

; optimize OK (armsdealer.pas), line = 109

	ldy SELECTEDWEAPON
	lda adr.WEAPONEFFECT,y
	cmp #$0A
	jcc l_315D

; optimize OK (armsdealer.pas), line = 110

	ldy CURRENTGANGSTER
	lda adr.GANGSTERBRUT,y
	cmp #$28
	jcs l_3173

; optimize OK (armsdealer.pas), line = 111

	lda #$07
	jsr CRT_WRITE_LOCSTR

; optimize OK (armsdealer.pas), line = 112

	lda #$FF
	sta GA
l_3173
l_315D

; optimize OK (armsdealer.pas), line = 117

	lda GA
	jpl l_3190

; optimize FAIL ('WAITFORKEY', armsdealer.pas), line = 119

	jsr WAITFORKEY
	jmp @exit
l_3190

; optimize OK (armsdealer.pas), line = 149

	lda SELECTEDWEAPON
	asl @
	tay
	lda adr.WEAPONPRICES,y
	sta PAYMONEY.PRICE
	lda adr.WEAPONPRICES+1,y
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_31A9

; optimize OK (armsdealer.pas), line = 151

	ldy CURRENTGANGSTER
	lda adr.GANGSTERWEAPON,y
	sta GA

; optimize OK (armsdealer.pas), line = 152

	jeq l_31C7

; optimize FAIL (1, armsdealer.pas), line = 154

	inx
	lda GA
	asl @
	tay
	lda adr.WEAPONPRICES,y
	sta :STACKORIGIN,x
	lda adr.WEAPONPRICES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$02 :STACKORIGIN,x
	jsr @shrAX_CL
	dex
	lda #$F4
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda #$01
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM.@010184000.RESULT
	sta OLDWEAPONPRICE
	lda :STACKORIGIN+STACKWIDTH,x
	adc SYSTEM.RANDOM.@010184000.RESULT+1
	sta OLDWEAPONPRICE+1
	dex

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', armsdealer.pas), line = 155

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (armsdealer.pas), line = 156

	lda #$08
	jsr CRT_WRITE_LOCSTR

; optimize OK (armsdealer.pas), line = 157

	lda OLDWEAPONPRICE
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda OLDWEAPONPRICE+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', armsdealer.pas), line = 158

	inx
	mva #$88 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (armsdealer.pas), line = 159

	lda #$09
	jsr CRT_WRITELN_LOCSTR

; optimize OK (armsdealer.pas), line = 160

	lda #$0A
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', armsdealer.pas), line = 161

	inx
	lda GA
	asl @
	tay
	lda adr.WEAPONNAMES,y
	sta :STACKORIGIN,x
	lda adr.WEAPONNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('CRT_WRITELN', armsdealer.pas), line = 162

	inx
	mva #$8B :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (armsdealer.pas), line = 163

	lda #$0B
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('GETYESNO', armsdealer.pas), line = 165

	jsr GETYESNO
	lda GETYESNO.RESULT
	sta R

; optimize OK (armsdealer.pas), line = 166

	jne l_3205

; optimize OK (armsdealer.pas), line = 169

	lda SELECTEDWEAPON
	asl @
	tay
	lda adr.WEAPONPRICES,y
	sta ADDMONEY.AMOUNT
	lda adr.WEAPONPRICES+1,y
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (armsdealer.pas), line = 170

	lda #$16
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('WAITFORKEY', armsdealer.pas), line = 171

	jsr WAITFORKEY
	jmp @exit
l_3205
l_31C7

; optimize OK (armsdealer.pas), line = 178

	ldy CURRENTGANGSTER
	lda adr.GANGSTERWEAPON,y
	cmp SELECTEDWEAPON
	jcs l_322A

; optimize OK (armsdealer.pas), line = 179

	lda #$01
	jsr ADDPOINTS
	jmp l_3236
l_322A

; optimize OK (armsdealer.pas), line = 181

	lda #$01
	jsr REMOVEPOINTS
l_3236

; optimize OK (armsdealer.pas), line = 183

	lda OLDWEAPONPRICE
	sta ADDMONEY.AMOUNT
	lda OLDWEAPONPRICE+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (armsdealer.pas), line = 184

	ldy CURRENTGANGSTER
	lda SELECTEDWEAPON
	sta adr.GANGSTERWEAPON,y

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', armsdealer.pas), line = 185

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (armsdealer.pas), line = 186

	lda #$0C
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('WAITFORKEY', armsdealer.pas), line = 187

	jsr WAITFORKEY
l_2FD3

; optimize OK (armsdealer.pas), line = 191

	lda CURRENTCHOICE
	cmp #$02
	jne l_325C

; optimize FAIL ('SHOWLOCATIONHEADER', armsdealer.pas), line = 193

	jsr SHOWLOCATIONHEADER

; optimize OK (armsdealer.pas), line = 195

	lda LASTACTION
	cmp #$02
	jne l_3270

; optimize OK (armsdealer.pas), line = 197

	lda #$18
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', armsdealer.pas), line = 198

	jsr WAITFORKEY
	jmp @exit
l_3270

; optimize OK (armsdealer.pas), line = 202

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$02
	jcc l_328B

; optimize OK (armsdealer.pas), line = 203

	lda #$0D
	jsr CRT_WRITELN_LOCSTR
l_328B

; optimize OK (armsdealer.pas), line = 205

	lda #$00
	sta SHOWWEAPONS

; optimize FAIL ('SELECTGANGSTER', armsdealer.pas), line = 206

	jsr SELECTGANGSTER

; optimize OK (armsdealer.pas), line = 207

	lda CURRENTGANGSTER
	cmp #$63
	jeq @exit
l_32A7

; optimize FAIL ('SHOWLOCATIONHEADER', armsdealer.pas), line = 209

	jsr SHOWLOCATIONHEADER

; optimize OK (armsdealer.pas), line = 210

	lda #$00
	sta CAMP

; optimize OK (armsdealer.pas), line = 212

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$05
	jcc l_32C4

; optimize OK (armsdealer.pas), line = 214

	lda #$0E
	jsr CRT_WRITELN_LOCSTR

; optimize OK (armsdealer.pas), line = 215

	lda #$15
	jsr CRT_WRITE_LOCSTR

; optimize OK (armsdealer.pas), line = 216

	lda #$3E
	sta GETANSWERCHAR.AKEY
	lda #$08
	sta GETANSWERCHAR.BKEY
	lda #$33
	sta GETANSWERCHAR.A
	lda #$2F
	sta GETANSWERCHAR.B
	jsr GETANSWERCHAR
	lda GETANSWERCHAR.RESULT
	sta R

; optimize OK (armsdealer.pas), line = 217

	cmp #$01
	jne l_32E3
	lda #$01
	sta CAMP
l_32E3
l_32C4

; optimize OK (armsdealer.pas), line = 221

	lda CAMP
	jne l_32FE

; optimize OK (armsdealer.pas), line = 222

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	sta :ecx
	lda #$C8
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add #$20
	sta PRICE
	lda :eax+1
	adc #$03
	jmp l_3319
l_32FE

; optimize OK (armsdealer.pas), line = 224

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	sta :eax
	lda #$00
	sta :eax+1
	lda #$F4
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add #$C4
	sta PRICE
	lda :eax+1
	adc #$09
l_3319
	sta PRICE+1

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', armsdealer.pas), line = 226

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (armsdealer.pas), line = 227

	lda #$0F
	jsr CRT_WRITE_LOCSTR

; optimize OK (armsdealer.pas), line = 228

	lda PRICE
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda PRICE+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (armsdealer.pas), line = 229

	lda #$10
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('GETYESNO', armsdealer.pas), line = 230

	jsr GETYESNO
	lda GETYESNO.RESULT
	sta GA

; optimize OK (armsdealer.pas), line = 231

	jeq @exit
l_3348

; optimize OK (armsdealer.pas), line = 232

	lda PRICE
	sta PAYMONEY.PRICE
	lda PRICE+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_335D

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', armsdealer.pas), line = 234

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', armsdealer.pas), line = 235

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', armsdealer.pas), line = 236

	inx
	lda CURRENTGANGSTER
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (armsdealer.pas), line = 237

	lda CAMP
	jne l_337A

; optimize OK (armsdealer.pas), line = 239

	lda #$11
	jsr CRT_WRITE_LOCSTR

; optimize OK (armsdealer.pas), line = 240

	lda #$05
	sta INC_ST

; optimize OK (armsdealer.pas), line = 241

	ldy #1
	lda CURRENTSUBLOCATION
	cmp #$01
	beq @+
	dey
@
	tya
	asl @
	add #$03
	sta INC_IN

; optimize OK (armsdealer.pas), line = 242

	ldy #1
	lda CURRENTSUBLOCATION
	cmp #$03
	beq @+
	dey
@
	tya
	sta :STACKORIGIN+10
	asl @
	add :STACKORIGIN+10
	add #$02
	sta INC_BT

; optimize OK (armsdealer.pas), line = 243

	lda #$01
	jsr ADDPOINTS
	jmp l_33B4
l_337A

; optimize OK (armsdealer.pas), line = 248

	lda #$12
	jsr CRT_WRITE_LOCSTR

; optimize OK (armsdealer.pas), line = 249

	lda #$08
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	add #$08
	sta INC_ST

; optimize OK (armsdealer.pas), line = 250

	lda #$08
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	add #$08
	sta INC_IN

; optimize OK (armsdealer.pas), line = 251

	lda #$08
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	add #$08
	sta INC_BT
l_33B4

; optimize FAIL ('EFFECTWAIT', armsdealer.pas), line = 254

	jsr EFFECTWAIT

; optimize OK (armsdealer.pas), line = 255

	lda #$02
	sta LASTACTION

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', armsdealer.pas), line = 257

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', armsdealer.pas), line = 258

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (armsdealer.pas), line = 259

	ldy CURRENTGANGSTER
	lda adr.GANGSTERSTR,y
	cmp #$63
	jne l_340B
	lda adr.GANGSTERINT,y
	cmp #$63
	jne l_340B
	lda adr.GANGSTERBRUT,y
	cmp #$63
	jne l_340B

; optimize OK (armsdealer.pas), line = 261

	lda #$19
	jsr CRT_WRITELN_LOCSTR
	jmp l_3417
l_340B

; optimize OK (armsdealer.pas), line = 265

	lda INC_ST
	sta INCREASECURRENTGANGSTER.INC_ST
	lda INC_IN
	sta INCREASECURRENTGANGSTER.INC_IN
	lda INC_BT
	sta INCREASECURRENTGANGSTER.INC_BT
	jsr INCREASECURRENTGANGSTER

; optimize OK (armsdealer.pas), line = 266

	lda #$01
	jsr ADDPOINTS
l_3417

; optimize FAIL ('WAITFORKEY', armsdealer.pas), line = 268

	jsr WAITFORKEY
l_325C
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C01
R	= DATAORIGIN+$0C02
MAXWEAPON	= DATAORIGIN+$0C03
MINWEAPON	= DATAORIGIN+$0C04
SELECTEDWEAPON	= DATAORIGIN+$0C05
GA	= DATAORIGIN+$0C06
PRICE	= DATAORIGIN+$0C07
INC_IN	= DATAORIGIN+$0C09
INC_BT	= DATAORIGIN+$0C0A
INC_ST	= DATAORIGIN+$0C0B
OLDWEAPONPRICE	= DATAORIGIN+$0C0C
CAMP	= DATAORIGIN+$0C0E

@VarData	= R
@VarDataSize	= 13

	rts						; ret
.endl

.local	BANKCHOICES					; FUNCTION

; optimize OK (bank.pas), line = 18

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$02
	sta TMPOPPORTUNITY

; optimize OK (bank.pas), line = 20

	lda adr.PLOPPORTUNITY,y
	and #$FD
	sta adr.PLOPPORTUNITY,y

; optimize OK (bank.pas), line = 22

	lda #$01
	sta RESULT

; optimize OK (bank.pas), line = 23

	jsr LOADLOCATION

; optimize FAIL ('SHOWLOCATIONHEADER', bank.pas), line = 24

	jsr SHOWLOCATIONHEADER

; optimize OK (bank.pas), line = 26

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$01
	jcs l_3463

; optimize OK (bank.pas), line = 28

	lda #$0D
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('WAITFORKEY', bank.pas), line = 29

	jsr WAITFORKEY
	jmp @exit
l_3463

; optimize OK (bank.pas), line = 36

	lda LASTLOCATION
	cmp #$01
	jne l_347B

; optimize FAIL ('PREPAREFIGHTAGAINSTPOLICE', bank.pas), line = 38

	jsr PREPAREFIGHTAGAINSTPOLICE

; optimize FAIL ('DOFIGHT', bank.pas), line = 39

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_348D

; optimize FAIL ('GOTCAUGHT', bank.pas), line = 41

	jsr GOTCAUGHT

; optimize OK (bank.pas), line = 42

	lda #$11
	sta RESULT
	jmp @exit
l_348D
	jmp @exit
l_347B

; optimize OK (bank.pas), line = 48

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$02
	jcs l_34AC

; optimize OK (bank.pas), line = 50

	lda #$06
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$01
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL ('WAITFORKEY', bank.pas), line = 51

	jsr WAITFORKEY

; optimize OK (bank.pas), line = 52

	lda #$0F
	sta LASTLOCATION
	jmp @exit
l_34AC

; optimize OK (bank.pas), line = 57

	lda CURRENTCHOICE
	cmp #$01
	jne l_34C9

; optimize OK (bank.pas), line = 59

	lda #$03
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	jne l_34DB

; optimize OK (bank.pas), line = 61

	lda #$02
	jsr CRT_WRITELN_LOCSTR

; optimize OK (bank.pas), line = 62

	lda #$03
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', bank.pas), line = 63

	jsr WAITFORKEY

; -------------------  ASM Block 00000159  -------------------

 
                lda loc_string_4
                sta adr.FP_GANG+$02
                lda loc_string_4+1
                sta adr.FP_GANG+1+$02
            
; optimize OK (bank.pas), line = 73

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (bank.pas), line = 74

	lda #$03
	sta adr.FP_N+$01

; optimize OK (bank.pas), line = 75

	lda CURRENTMAP
	cmp #$01
	jne l_34FD

; optimize OK (bank.pas), line = 76

	inc adr.FP_N+$01
l_34FD

; -------------------  ASM Block 00000160  -------------------

                ldy #$00
            @:
                tya 
                asl 
                tay

                lda loc_string_4
                sta adr.FP_NAME+$20,y
                lda loc_string_4+1
                sta adr.FP_NAME+1+$20,y

                tya
                lsr 
                tay

                lda #$1E
                sta adr.FP_ENERGY+$10,y
                lda #$06
                sta adr.FP_WEAPON+$10,y
                iny
                cpy adr.FP_N+$01
                bne @- 
            
; optimize FAIL ('DOFIGHT', bank.pas), line = 108

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_351C

; optimize FAIL ('GOTCAUGHT', bank.pas), line = 110

	jsr GOTCAUGHT

; optimize OK (bank.pas), line = 111

	lda #$11
	sta RESULT
	jmp @exit
l_351C
l_34DB

; optimize OK (bank.pas), line = 115

	lda #$01
	sta CRACKEDBANK.P
	lda #$00
	sta CRACKEDBANK.P+1
	jsr CRACKEDBANK
l_34C9

; optimize OK (bank.pas), line = 119

	lda CURRENTCHOICE
	cmp #$02
	jne l_353C

; optimize FAIL ('SHOWLOCATIONHEADER', bank.pas), line = 121

	jsr SHOWLOCATIONHEADER

; optimize OK (bank.pas), line = 122

	lda CURRENTPLAYER
	asl @
	asl @
	asl @
	sta K

; optimize OK (bank.pas), line = 123

	tay
	lda adr.GANGSTERBRUT,y
	cmp #$19
	jcc l_357Bx
	lda adr.GANGSTERSTR,y
	cmp #$19
	jcc l_357Bx
	lda adr.GANGSTERINT,y
	cmp #$28
	jcs l_357B
l_357Bx

; optimize OK (bank.pas), line = 125

	lda #$06
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$05
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL ('WAITFORKEY', bank.pas), line = 126

	jsr WAITFORKEY
	jmp @exit
l_357B

; optimize OK (bank.pas), line = 130

	lda #$06
	jsr CRT_WRITELN_LOCSTR

; optimize OK (bank.pas), line = 131

	lda #$00
	sta SHOWWEAPONS

; optimize FAIL ('SELECTGANGSTER', bank.pas), line = 132

	jsr SELECTGANGSTER

; optimize OK (bank.pas), line = 133

	lda CURRENTGANGSTER
	cmp #$63
	jeq @exit
l_359B

; optimize FAIL ('SHOWLOCATIONHEADER', bank.pas), line = 135

	jsr SHOWLOCATIONHEADER

; optimize OK (bank.pas), line = 136

	lda #$07
	jsr CRT_WRITELN_LOCSTR

; optimize OK (bank.pas), line = 137

	lda #$08
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', bank.pas), line = 138

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (bank.pas), line = 141

	lda CURRENTPLAYER
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda adr.GANGSTERINT,y
	lsr @
	lsr @
	lsr @
	lsr @
	add #$0D
	sta :STACKORIGIN+9
	lda CURRENTSUBLOCATION
	asl @
	add :STACKORIGIN+9
	sta NATTEMPTS

; optimize OK (bank.pas), line = 142

	ldy CURRENTPLAYER
	lda adr.PLSTUFF,y
	and #$20
	jeq l_35DC

; optimize OK (bank.pas), line = 144

	lda NATTEMPTS
	add #$09
	sta NATTEMPTS

; optimize OK (bank.pas), line = 145

	lda adr.PLSTUFF,y
	and #$DF
	sta adr.PLSTUFF,y
l_35DC

; optimize FAIL ('WAITFORKEY', bank.pas), line = 148

	jsr WAITFORKEY

; optimize FAIL ('BLACKCONSOLE', bank.pas), line = 151

	jsr BLACKCONSOLE

; optimize OK (bank.pas), line = 152

	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A
	lda #$DC
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A+1
	lda #$C0
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@03018000001810000188000
	m@INLINE
	.ENDL

; optimize OK (bank.pas), line = 153

	lda SAFECLMFNAME
	sta LOADXAPL.FNAME
	lda SAFECLMFNAME+1
	sta LOADXAPL.FNAME+1
	lda #$00
	sta LOADXAPL.OUTPUTPOINTER
	lda #$D8
	sta LOADXAPL.OUTPUTPOINTER+1
	jsr LOADXAPL

; optimize OK (bank.pas), line = 154

	lda #$00
	ldy #$4F
	sta:rpl $DEA8,y-

; optimize FAIL ('ENABLEMAPCONSOLE', bank.pas), line = 155

	jsr ENABLEMAPCONSOLE

; optimize OK (bank.pas), line = 156

	lda #$04
	sta MAPCOLORA

; optimize OK (bank.pas), line = 157

	lda #$0A
	sta MAPCOLORB

; optimize OK (bank.pas), line = 158

	lda #$01
	sta DIDFIGHT

; optimize FAIL (1, bank.pas), line = 159

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	jsr SYSTEM.RANDOM.@010180000
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta adr.T,y

; optimize FAIL (1, bank.pas), line = 160

	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	jsr SYSTEM.RANDOM.@010180000
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta adr.T,y

; optimize FAIL (1, bank.pas), line = 161

	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	jsr SYSTEM.RANDOM.@010180000
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta adr.T,y

; optimize FAIL (1, bank.pas), line = 162

	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	jsr SYSTEM.RANDOM.@010180000
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta adr.C,y

; optimize FAIL (1, bank.pas), line = 163

	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	jsr SYSTEM.RANDOM.@010180000
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta adr.C,y

; optimize FAIL (1, bank.pas), line = 164

	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	jsr SYSTEM.RANDOM.@010180000
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta adr.C,y
	dex

; optimize OK (bank.pas), line = 166

	lda #$00
	sta SAFEOPEN

; optimize OK (bank.pas), line = 167

	sta WHPOS

; optimize OK (bank.pas), line = 168

	sta BASE
	lda #$DD
	sta BASE+1

; --- RepeatUntilProlog
l_3645

; optimize OK (bank.pas), line = 171

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda WHPOS
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add BASE
	tay
	lda BASE+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp+1
	lda #$6E
	sta (:bp),y

; optimize OK (bank.pas), line = 172

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda WHPOS
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add BASE
	sta :STACKORIGIN+10
	lda BASE+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$02
	add :STACKORIGIN+10
	tay
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda #$6F
	sta (:bp),y

; optimize OK (bank.pas), line = 173

	lda #$00
	sta K

l_366E
; --- ForToDoCondition
	ldy K
	cpy #$03
	jcs l_367C

; optimize OK (bank.pas), line = 174

	lda #$70
	adc adr.C,y
	sta :STACKORIGIN+9
	lda BASE
	add #$01
	sta :STACKORIGIN+10
	lda BASE+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda K
	add :STACKORIGIN+10
	sta :bp2
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	lda :STACKORIGIN+9
	sta (:bp2),y
	inc K
	jne l_366E
l_367C

; --- RepeatUntilProlog
l_369F

; optimize FAIL ('CHECKKEYANDSTICK', bank.pas), line = 176

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta CH

; optimize OK (bank.pas), line = 177

	cmp #$0F
	jeq l_369Fx
	cmp #$0E
	jeq l_369Fx
	cmp #$07
	jeq l_369Fx
	cmp #$06
	jeq l_369Fx
	cmp #$2F
	jne l_369F
l_369Fx

; optimize FAIL ('WAITFORKEYRELEASE', bank.pas), line = 178

	jsr WAITFORKEYRELEASE

; optimize OK (bank.pas), line = 179

	lda #$05
	jsr WAITFRAMES

; optimize OK (bank.pas), line = 180

	lda CH
	sta @CASETMP_0011
	cmp #$0F
	jne l_36EE
@

; optimize OK (bank.pas), line = 181

	ldy WHPOS
	lda adr.C,y
	sub #$01
	sta adr.C,y
	jmp a_0011
l_36EE
	cmp #$0E
	jne l_3705

; optimize OK (bank.pas), line = 182

	ldy WHPOS
	lda adr.C,y
	add #$01
	sta adr.C,y
l_3705
a_0011

; optimize OK (bank.pas), line = 185

	lda CH
	cmp #$07
	jeq l_3737x
	cmp #$06
	jne l_3737
l_3737x

; optimize OK (bank.pas), line = 187

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda WHPOS
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add BASE
	tay
	lda BASE+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp+1
	lda #$00
	sta (:bp),y

; optimize OK (bank.pas), line = 188

	sta :STACKORIGIN+STACKWIDTH+11
	lda WHPOS
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add BASE
	sta :STACKORIGIN+10
	lda BASE+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$02
	add :STACKORIGIN+10
	tay
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda #$00
	sta (:bp),y

; optimize OK (bank.pas), line = 189

	lda CH
	cmp #$07
	jne l_376A

; optimize OK (bank.pas), line = 191

	lda WHPOS
	cmp #$02
	jcs l_377D
	inc WHPOS
l_377D
l_376A

; optimize OK (bank.pas), line = 193

	lda CH
	cmp #$06
	jne l_379E

; optimize OK (bank.pas), line = 195

	lda WHPOS
	jeq l_37B1
	dec WHPOS
l_37B1
l_379E
l_3737

; optimize OK (bank.pas), line = 199

	lda CURRENTPLAYER
	asl @
	asl @
	asl @
	tay
	lda adr.GANGSTERINT,y
	jsr SYSTEM.RANDOM.@010180000
	ldy #1
	lda SYSTEM.RANDOM.@010180000.RESULT
	cmp #$04
	bcc @+
	dey
@
	tya
	sta HOPS

; optimize OK (bank.pas), line = 200

	lda CH
	cmp #$0F
	jeq l_37F4x
	cmp #$0E
	jne l_37F4
l_37F4x

; optimize OK (bank.pas), line = 202

	ldy WHPOS
	lda adr.C,y
	sub #$0A
	svc
	eor #$80
	jmi l_380A
	lda #$00
	sta adr.C,y
l_380A

; optimize OK (bank.pas), line = 203

	ldy WHPOS
	lda adr.C,y
	jpl l_3829
	lda #$09
	sta adr.C,y
l_3829

; optimize OK (bank.pas), line = 204

	dec NATTEMPTS

; optimize OK (bank.pas), line = 207

	lda HOPS
	jne l_3863
	ldy WHPOS
	lda adr.T,y
	cmp adr.C,y
	jne l_3863

; optimize OK (bank.pas), line = 208

	lda #$0A
	jmp l_386F
l_3863

; optimize OK (bank.pas), line = 210

	lda #$0C
l_386F
	sta RMT.TRMT.INIT.A
	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.INIT

; optimize FAIL ('RMT.TRMT.PLAY', bank.pas), line = 211

	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.PLAY

; optimize OK (bank.pas), line = 212

	lda #$01
	sta PLAYMUSIC

; optimize OK (bank.pas), line = 213

	lda #$0A
	jsr WAITFRAMES

; optimize FAIL ('RMT.TRMT.STOP', bank.pas), line = 214

	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.STOP

; optimize OK (bank.pas), line = 215

	lda #$00
	sta PLAYMUSIC
l_37F4

; optimize OK (bank.pas), line = 228

	lda HOPS
	jne l_38C1
	lda adr.C
	cmp adr.T
	jne l_38C1
	lda adr.C+$01
	cmp adr.T+$01
	jne l_38C1
	lda adr.C+$02
	cmp adr.T+$02
	jne l_38C1
	lda #$01
	sta SAFEOPEN
l_38C1

; optimize OK (bank.pas), line = 229

	lda CH
	cmp #$2F
	jeq l_3645x
	lda NATTEMPTS
	jeq l_3645x
	lda SAFEOPEN
	cmp #$01
	jne l_3645
l_3645x

; optimize OK (bank.pas), line = 231

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$15
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (bank.pas), line = 232

	lda CH
	cmp #$2F
	jne l_3902

; optimize OK (bank.pas), line = 234

	lda #$15
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$09
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (bank.pas), line = 235

	lda #$64
	jsr WAITFRAMES

; optimize FAIL ('WAITFORKEY', bank.pas), line = 236

	jsr WAITFORKEY

; optimize FAIL ('ENABLECONSOLE', bank.pas), line = 237

	jsr ENABLECONSOLE

; optimize OK (bank.pas), line = 238

	lda #$88
	sta MAPCOLORA

; optimize OK (bank.pas), line = 239

	lda #$06
	sta MAPCOLORB
	jmp @exit
l_3902

; optimize OK (bank.pas), line = 243

	lda SAFEOPEN
	cmp #$01
	jne l_3926

; optimize OK (bank.pas), line = 244

	lda #$15
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0A
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (bank.pas), line = 246

	lda #$3C
	jsr WAITFRAMES

; optimize FAIL ('WAITFORKEY', bank.pas), line = 247

	jsr WAITFORKEY

; optimize OK (bank.pas), line = 248

	lda #$88
	sta MAPCOLORA

; optimize OK (bank.pas), line = 249

	lda #$06
	sta MAPCOLORB

; optimize OK (bank.pas), line = 250

	lda #$01
	sta CRACKEDBANK.P
	lda #$00
	sta CRACKEDBANK.P+1
	jsr CRACKEDBANK
	jmp @exit
l_3926

; optimize OK (bank.pas), line = 255

	lda #$14
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0B
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (bank.pas), line = 256

	lda #$15
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0C
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (bank.pas), line = 257

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$15
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (bank.pas), line = 259

	lda #$01
	sta PLAYMUSIC

; optimize OK (bank.pas), line = 260

	lda #$08
	sta RMT.TRMT.INIT.A
	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.INIT

; optimize FAIL ('RMT.TRMT.PLAY', bank.pas), line = 261

	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.PLAY

; optimize OK (bank.pas), line = 262

	lda #$00
	sta K

l_3952
; --- ForToDoCondition
	lda K
	cmp #$07
	jcs l_3960

; optimize OK (bank.pas), line = 264

	lda #$34
	sta LOCCOLBK

; optimize OK (bank.pas), line = 265

	lda #$0F
	jsr WAITFRAMES

; optimize OK (bank.pas), line = 266

	lda #$00
	sta LOCCOLBK

; optimize OK (bank.pas), line = 267

	lda #$0F
	jsr WAITFRAMES

; --- ForToDoEpilog
	inc K
	jne l_3952
l_3960

; optimize FAIL ('RMT.TRMT.STOP', bank.pas), line = 269

	lda MSX
	ldy MSX+1
	jsr RMT.TRMT.STOP

; optimize OK (bank.pas), line = 270

	lda #$00
	sta PLAYMUSIC

; optimize FAIL ('WAITFORKEY', bank.pas), line = 272

	jsr WAITFORKEY

; optimize OK (bank.pas), line = 273

	lda #$88
	sta MAPCOLORA

; optimize OK (bank.pas), line = 274

	lda #$06
	sta MAPCOLORB

; optimize FAIL ('PREPAREFIGHTAGAINSTPOLICE', bank.pas), line = 275

	jsr PREPAREFIGHTAGAINSTPOLICE

; optimize FAIL ('DOFIGHT', bank.pas), line = 276

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_3990

; optimize FAIL ('GOTCAUGHT', bank.pas), line = 278

	jsr GOTCAUGHT

; optimize OK (bank.pas), line = 279

	lda #$11
	sta RESULT
	jmp @exit
l_3990
l_353C
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C30
K	= DATAORIGIN+$0C31
NATTEMPTS	= DATAORIGIN+$0C32
adr.T	= [DATAORIGIN+$0C33] .array [3]
.var T	= adr.T .word
adr.C	= [DATAORIGIN+$0C36] .array [3]
.var C	= adr.C .word
CH	= DATAORIGIN+$0C39
SAFEOPEN	= DATAORIGIN+$0C3A
BASE	= DATAORIGIN+$0C3B
WHPOS	= DATAORIGIN+$0C3D
HOPS	= DATAORIGIN+$0C3E
@CASETMP_0011	= DATAORIGIN+$0C3F

@VarData	= K
@VarDataSize	= 15

	rts						; ret
.endl

.local	CHECKBOOZE					; PROCEDURE

; optimize OK (cardealer.pas), line = 6

	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	sta R

; optimize OK (cardealer.pas), line = 7

	lda adr.PLALCOHOL,y
	sta :STACKORIGIN+9
	ldy R
	lda adr.CARCARGO,y
	cmp :STACKORIGIN+9
	jcs l_39C1

; optimize OK (cardealer.pas), line = 9

	ldy CURRENTPLAYER
	sta adr.PLALCOHOL,y

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', cardealer.pas), line = 10

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (cardealer.pas), line = 11

	lda #$14
	jsr CRT_WRITE_LOCSTR

; optimize OK (cardealer.pas), line = 12

	lda #$15
	jsr CRT_WRITE_LOCSTR
l_39C1

; ------------------------------------------------------------

R	= DATAORIGIN+$0C40

@VarData	= R
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CARDEALERCHOICES				; FUNCTION

; optimize OK (cardealer.pas), line = 26

	lda CURRENTCHOICE
	cmp #$01
	jne l_39EB

; optimize FAIL ('SHOWLOCATIONHEADER', cardealer.pas), line = 28

	jsr SHOWLOCATIONHEADER

; optimize OK (cardealer.pas), line = 29

	lda #$01
	jsr CRT_WRITELN_LOCSTR

; optimize OK (cardealer.pas), line = 30

	lda #$02
	jsr CRT_WRITELN_LOCSTR

; optimize OK (cardealer.pas), line = 33

	lda #$04
	sta MAXCAR

; optimize OK (cardealer.pas), line = 34

	lda CURRENTSUBLOCATION
	cmp #$03
	jcc l_3A07

; optimize OK (cardealer.pas), line = 35

	lda #$05
	sta MAXCAR
l_3A07

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', cardealer.pas), line = 38

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (cardealer.pas), line = 39

	lda #$01
	sta R

l_3A1A
; --- ForToDoCondition
	lda R
	cmp MAXCAR
	scc
	jne l_3A28

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', cardealer.pas), line = 41

	inx
	mva #$6B :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (cardealer.pas), line = 42

	lda R
	jsr B_CRT.CRT_WRITE.@010180000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', cardealer.pas), line = 43

	inx
	mva #$76 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', cardealer.pas), line = 44

	inx
	lda R
	asl @
	tay
	lda adr.CARNAMES,y
	sta :STACKORIGIN,x
	lda adr.CARNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', cardealer.pas), line = 45

	inx
	mva #$9A :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (cardealer.pas), line = 46

	lda R
	asl @
	tay
	lda adr.CARPRICES,y
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda adr.CARPRICES+1,y
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('CRT_WRITELN', cardealer.pas), line = 47

	inx
	mva #$9D :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; --- ForToDoEpilog
	inc R
	jne l_3A1A
l_3A28

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', cardealer.pas), line = 50

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (cardealer.pas), line = 51

	lda #$03
	jsr CRT_WRITE_LOCSTR

; optimize OK (cardealer.pas), line = 52

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda MAXCAR
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta NEWCAR

; optimize OK (cardealer.pas), line = 53

	jeq @exit
l_3A62

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', cardealer.pas), line = 54

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (cardealer.pas), line = 55

	lda NEWCAR
	asl @
	tay
	lda adr.CARPRICES,y
	sta PRICE
	lda adr.CARPRICES+1,y
	sta PRICE+1

; optimize OK (cardealer.pas), line = 56

	lda PRICE
	sta PAYMONEY.PRICE
	lda PRICE+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_3A80

; optimize OK (cardealer.pas), line = 58

	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	sta R

; optimize OK (cardealer.pas), line = 59

	jeq l_3A9E

; optimize OK (cardealer.pas), line = 61

	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta TMP

; optimize OK (cardealer.pas), line = 62

	lda #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH+10
	lda TMP
	ldy #$09
	beq l_0000_e
l_0000_b
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	rol :STACKORIGIN+STACKWIDTH*2+10
	rol :STACKORIGIN+STACKWIDTH*3+10
	dey
	bne l_0000_b
l_0000_e
	add #$E8
	sta OLDPRICE
	lda #$03
	adc :STACKORIGIN+STACKWIDTH+10
	sta OLDPRICE+1

; optimize OK (cardealer.pas), line = 63

	lda #$00
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta TMP

; optimize OK (cardealer.pas), line = 64

	lda OLDPRICE
	add TMP
	sta OLDPRICE
	scc
	inc OLDPRICE+1

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', cardealer.pas), line = 66

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (cardealer.pas), line = 67

	lda #$04
	jsr CRT_WRITE_LOCSTR

; optimize OK (cardealer.pas), line = 68

	lda OLDPRICE
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda OLDPRICE+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (cardealer.pas), line = 69

	lda #$05
	jsr CRT_WRITELN_LOCSTR

; optimize OK (cardealer.pas), line = 70

	lda #$12
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('GETYESNO', cardealer.pas), line = 72

	jsr GETYESNO
	lda GETYESNO.RESULT
	sta R

; optimize OK (cardealer.pas), line = 73

	jeq @exit
l_3AE4

; optimize OK (cardealer.pas), line = 74

	lda OLDPRICE
	sta ADDMONEY.AMOUNT
	lda OLDPRICE+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', cardealer.pas), line = 75

	jsr B_CRT.CRT_NEWLINE.@00
l_3A9E

; optimize OK (cardealer.pas), line = 78

	lda #$06
	jsr CRT_WRITELN_LOCSTR

; optimize OK (cardealer.pas), line = 79

	lda OLDPRICE+1
	ora OLDPRICE
	jeq l_3B00

; optimize OK (cardealer.pas), line = 81

	lda #$07
	jsr CRT_WRITE_LOCSTR

; optimize OK (cardealer.pas), line = 82

	lda OLDPRICE
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda OLDPRICE+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (cardealer.pas), line = 83

	lda #$05
	jsr CRT_WRITELN_LOCSTR
l_3B00

; optimize OK (cardealer.pas), line = 86

	ldy CURRENTPLAYER
	lda NEWCAR
	sta adr.PLCAR,y

; optimize FAIL ('CHECKBOOZE', cardealer.pas), line = 87

	jsr CHECKBOOZE

; optimize FAIL ('WAITFORKEY', cardealer.pas), line = 88

	jsr WAITFORKEY
	jmp @exit
l_39EB

; optimize OK (cardealer.pas), line = 93

	lda CURRENTCHOICE
	cmp #$02
	jne l_3B29

; optimize FAIL ('SHOWLOCATIONHEADER', cardealer.pas), line = 95

	jsr SHOWLOCATIONHEADER

; optimize OK (cardealer.pas), line = 98

	lda #$03
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta TMP

; optimize OK (cardealer.pas), line = 99

	lda CURRENTSUBLOCATION
	cmp #$02
	jcs l_3B4E
	lda TMP
	jeq l_3B4E

; optimize OK (cardealer.pas), line = 101

	lda #$08
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('WAITFORKEY', cardealer.pas), line = 102

	jsr WAITFORKEY

; optimize OK (cardealer.pas), line = 103

	lda #$06
	sta RESULT
	jmp @exit
l_3B4E

; optimize OK (cardealer.pas), line = 107

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$02
	jcc l_3B6D

; optimize OK (cardealer.pas), line = 108

	lda #$09
	jsr CRT_WRITE_LOCSTR
l_3B6D

; optimize OK (cardealer.pas), line = 109

	lda #$00
	sta SHOWWEAPONS

; optimize FAIL ('SELECTGANGSTER', cardealer.pas), line = 110

	jsr SELECTGANGSTER

; optimize OK (cardealer.pas), line = 111

	lda CURRENTGANGSTER
	cmp #$63
	jeq @exit
l_3B89

; optimize OK (cardealer.pas), line = 114

	ldy CURRENTGANGSTER
	lda adr.GANGSTERINT,y
	lsr @
	lsr @
	sta R

; optimize OK (cardealer.pas), line = 116

	lda adr.GANGSTERSTR,y
	lsr @
	lsr @
	sta MAXCAR

; optimize OK (cardealer.pas), line = 117

	add R
	add R
	add R
	sta MAXCAR

; optimize OK (cardealer.pas), line = 118

	lda #$64
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	cmp MAXCAR
	jcs l_3BD1

; optimize OK (cardealer.pas), line = 121

	lda #$0A
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', cardealer.pas), line = 122

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (cardealer.pas), line = 124

	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	jne l_3BEA

; optimize OK (cardealer.pas), line = 126

	lda #$0B
	jsr CRT_WRITELN_LOCSTR
	jmp l_3BF6
l_3BEA

; optimize OK (cardealer.pas), line = 130

	lda #$0C
	jsr CRT_WRITELN_LOCSTR

; optimize OK (cardealer.pas), line = 131

	lda #$0D
	jsr CRT_WRITE_LOCSTR
l_3BF6

; optimize FAIL (1, cardealer.pas), line = 134

	inx
	mva #$01 :STACKORIGIN,x
	lda #$05
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM.@010180000.RESULT
	sta R
	dex

; optimize OK (cardealer.pas), line = 135

	ldy CURRENTPLAYER
	lda R
	sta adr.PLCAR,y

; optimize FAIL ('CHECKBOOZE', cardealer.pas), line = 136

	jsr CHECKBOOZE

; optimize FAIL ('WAITFORKEY', cardealer.pas), line = 137

	jsr WAITFORKEY
	jmp @exit
l_3BD1

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', cardealer.pas), line = 142

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (cardealer.pas), line = 143

	lda #$0E
	jsr CRT_WRITELN_LOCSTR

; optimize OK (cardealer.pas), line = 144

	lda #$11
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', cardealer.pas), line = 145

	jsr WAITFORKEY

; optimize OK (cardealer.pas), line = 146

	lda #$00
	sta R

; -------------------  ASM Block 00000161  -------------------

 
            lda loc_string_19
            sta adr.FP_GANG+$02
            lda loc_string_19+1
            sta adr.FP_GANG+1+$02
        
; optimize OK (cardealer.pas), line = 156

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (cardealer.pas), line = 157

	sta adr.FP_N+$01

; -------------------  ASM Block 00000162  -------------------

 
            lda loc_string_19
            sta adr.fp_Name+16*2
            lda loc_string_19+1
            sta adr.fp_Name+1+16*2
        
; optimize OK (cardealer.pas), line = 165

	lda #$05
	sta adr.FP_WEAPON+$10

; optimize OK (cardealer.pas), line = 166

	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta TMP

; optimize OK (cardealer.pas), line = 167

	sta adr.FP_SEX+$10

; optimize OK (cardealer.pas), line = 168

	lda #$1E
	sta adr.FP_ENERGY+$10

; optimize FAIL ('DOFIGHT', cardealer.pas), line = 170

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_3C4A

; optimize FAIL ('GOTCAUGHT', cardealer.pas), line = 172

	jsr GOTCAUGHT

; optimize OK (cardealer.pas), line = 173

	lda #$11
	sta RESULT
	jmp @exit
l_3C4A

; optimize FAIL ('ENABLECONSOLE', cardealer.pas), line = 177

	jsr ENABLECONSOLE

; optimize FAIL ('SHOWLOCATIONHEADER', cardealer.pas), line = 178

	jsr SHOWLOCATIONHEADER

; optimize OK (cardealer.pas), line = 179

	lda #$0F
	jsr CRT_WRITELN_LOCSTR

; optimize OK (cardealer.pas), line = 180

	lda #$10
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', cardealer.pas), line = 181

	jsr WAITFORKEY

; optimize OK (cardealer.pas), line = 182

	lda #$06
	sta RESULT
l_3B29
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C41
R	= DATAORIGIN+$0C42
MAXCAR	= DATAORIGIN+$0C43
PRICE	= DATAORIGIN+$0C44
OLDPRICE	= DATAORIGIN+$0C46
NEWCAR	= DATAORIGIN+$0C48

@VarData	= R
@VarDataSize	= 7

	rts						; ret
.endl

.local	FORGERYCHOICES					; FUNCTION

; optimize OK (forgery.pas), line = 13

	lda CURRENTCHOICE
	cmp #$01
	jne l_3C75

; optimize FAIL ('SHOWLOCATIONHEADER', forgery.pas), line = 15

	jsr SHOWLOCATIONHEADER

; optimize OK (forgery.pas), line = 18

	ldy CURRENTPLAYER
	lda adr.PLFORGEDID,y
	jeq l_3C8C

; optimize OK (forgery.pas), line = 20

	lda #$01
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', forgery.pas), line = 21

	jsr WAITFORKEY
	jmp @exit
l_3C8C

; optimize OK (forgery.pas), line = 25

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	sta R

; optimize OK (forgery.pas), line = 26

	lda #$E8
	sta :ecx
	lda #$03
	sta :ecx+1
	lda R
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta C
	lda :eax+1
	sta C+1

; optimize OK (forgery.pas), line = 27

	lda #$02
	jsr CRT_WRITE_LOCSTR

; optimize OK (forgery.pas), line = 28

	lda #$03
	jsr CRT_WRITE_LOCSTR

; optimize OK (forgery.pas), line = 29

	lda R
	cmp #$02
	jcc l_3CBB

; optimize OK (forgery.pas), line = 30

	lda #$04
	jsr CRT_WRITE_LOCSTR
l_3CBB

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', forgery.pas), line = 31

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (forgery.pas), line = 32

	lda #$05
	jsr CRT_WRITE_LOCSTR

; optimize OK (forgery.pas), line = 33

	lda C
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda C+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('CRT_WRITELN', forgery.pas), line = 34

	inx
	mva #$A0 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', forgery.pas), line = 35

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (forgery.pas), line = 36

	lda #$06
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('GETYESNO', forgery.pas), line = 38

	jsr GETYESNO
	lda GETYESNO.RESULT
	sta R

; optimize OK (forgery.pas), line = 39

	jeq @exit
l_3CE1

; optimize OK (forgery.pas), line = 40

	lda C
	sta PAYMONEY.PRICE
	lda C+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_3CF6

; optimize FAIL ('CRT_NEWLINE2', forgery.pas), line = 42

	jsr CRT_NEWLINE2

; optimize OK (forgery.pas), line = 43

	lda #$07
	jsr CRT_WRITELN_LOCSTR

; optimize OK (forgery.pas), line = 44

	ldy CURRENTPLAYER
	lda #$01
	sta adr.PLFORGEDID,y

; optimize OK (forgery.pas), line = 45

	jsr ADDPOINTS

; optimize FAIL ('WAITFORKEY', forgery.pas), line = 46

	jsr WAITFORKEY
l_3C75

; optimize OK (forgery.pas), line = 50

	lda CURRENTCHOICE
	cmp #$02
	jne l_3D1A

; optimize FAIL ('SHOWLOCATIONHEADER', forgery.pas), line = 52

	jsr SHOWLOCATIONHEADER

; optimize OK (forgery.pas), line = 53

	ldy CURRENTPLAYER
	lda adr.PLFAKEMONEY,y
	jeq l_3D31

; optimize OK (forgery.pas), line = 55

	lda #$08
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', forgery.pas), line = 56

	jsr WAITFORKEY
	jmp @exit
l_3D31

; optimize OK (forgery.pas), line = 60

	lda #$09
	jsr CRT_WRITELN_LOCSTR

; optimize OK (forgery.pas), line = 61

	lda #$0A
	jsr CRT_WRITE_LOCSTR

; optimize OK (forgery.pas), line = 63

	lda #$88
	sta M
	lda #$13
	sta M+1

; optimize OK (forgery.pas), line = 65

	lda M
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda M+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', forgery.pas), line = 66

	inx
	mva #$A3 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (forgery.pas), line = 67

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda M
	sta READVALUE.MAXVALUE
	lda M+1
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta C
	lda READVALUE.RESULT+1
	sta C+1

; optimize OK (forgery.pas), line = 68

	ora C
	jeq @exit
l_3D5C

; optimize OK (forgery.pas), line = 71

	lda #$00
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta TMP

; optimize OK (forgery.pas), line = 72

	lda C
	add C
	sta :STACKORIGIN+9
	lda C+1
	adc C+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add TMP
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	tay
	lda :STACKORIGIN+9
	add TMP
	scc
	iny
	add TMP
	sta P
	scc
	iny
	sty P+1

; optimize FAIL ('CRT_NEWLINE2', forgery.pas), line = 73

	jsr CRT_NEWLINE2

; optimize OK (forgery.pas), line = 74

	lda #$0B
	jsr CRT_WRITE_LOCSTR

; optimize OK (forgery.pas), line = 75

	lda P
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda P+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (forgery.pas), line = 76

	lda #$0C
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('GETYESNO', forgery.pas), line = 78

	jsr GETYESNO
	lda GETYESNO.RESULT
	sta R

; optimize OK (forgery.pas), line = 79

	jeq @exit
l_3D9E

; optimize OK (forgery.pas), line = 80

	lda C
	sta PAYMONEY.PRICE
	lda C+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_3DB3

; optimize FAIL ('CRT_NEWLINE2', forgery.pas), line = 82

	jsr CRT_NEWLINE2

; optimize OK (forgery.pas), line = 83

	lda #$0D
	jsr CRT_WRITELN_LOCSTR

; optimize OK (forgery.pas), line = 85

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (forgery.pas), line = 86

	ldy CURRENTPLAYER
	lda #$06
	sta adr.PLFAKEMONEY,y

; optimize OK (forgery.pas), line = 87

	lda #$01
	jsr ADDPOINTS

; optimize FAIL ('WAITFORKEY', forgery.pas), line = 88

	jsr WAITFORKEY
l_3D1A
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C49
R	= DATAORIGIN+$0C4A
C	= DATAORIGIN+$0C4B
P	= DATAORIGIN+$0C4D
M	= DATAORIGIN+$0C4F

@VarData	= R
@VarDataSize	= 7

	rts						; ret
.endl

.local	GAMBLINGCHOICES					; FUNCTION

; optimize FAIL ('SHOWLOCATIONHEADER', gambling.pas), line = 9

	jsr SHOWLOCATIONHEADER

; optimize OK (gambling.pas), line = 11

	lda #$01
	jsr CRT_WRITELN2_LOCSTR

; optimize OK (gambling.pas), line = 13

	lda #$02
	jsr CRT_WRITELN_LOCSTR

; optimize OK (gambling.pas), line = 14

	lda #$03
	jsr CRT_WRITELN_LOCSTR

; optimize OK (gambling.pas), line = 15

	lda #$04
	jsr CRT_WRITELN2_LOCSTR

; optimize OK (gambling.pas), line = 17

	lda #$05
	jsr CRT_WRITE_LOCSTR

; optimize OK (gambling.pas), line = 18

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda #$03
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta GAME

; optimize OK (gambling.pas), line = 19

	jeq @exit
l_3DEF

; optimize FAIL ('CRT_NEWLINE2', gambling.pas), line = 20

	jsr CRT_NEWLINE2

; optimize OK (gambling.pas), line = 21

	lda #$06
	jsr CRT_WRITE_LOCSTR

; optimize OK (gambling.pas), line = 22

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sta B_CRT.CRT_WRITE.@010185000.NUM
	lda adr.PLMONEY+1,y
	sta B_CRT.CRT_WRITE.@010185000.NUM+1
	lda adr.PLMONEY+2,y
	sta B_CRT.CRT_WRITE.@010185000.NUM+2
	lda adr.PLMONEY+3,y
	sta B_CRT.CRT_WRITE.@010185000.NUM+3
	jsr B_CRT.CRT_WRITE.@010185000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', gambling.pas), line = 23

	inx
	mva #$A0 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', gambling.pas), line = 24

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (gambling.pas), line = 25

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sta EINSATZ
	lda adr.PLMONEY+1,y
	sta EINSATZ+1

; optimize OK (gambling.pas), line = 27

	cmp #$27
	bne @+
	lda EINSATZ
	cmp #$11
@
	jcc l_3E15

; optimize OK (gambling.pas), line = 28

	lda #$10
	sta EINSATZ
	lda #$27
	sta EINSATZ+1
l_3E15

; optimize OK (gambling.pas), line = 29

	lda #$07
	jsr CRT_WRITE_LOCSTR

; optimize OK (gambling.pas), line = 30

	lda EINSATZ
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda EINSATZ+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', gambling.pas), line = 31

	inx
	mva #$A6 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (gambling.pas), line = 32

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda EINSATZ
	sta READVALUE.MAXVALUE
	lda EINSATZ+1
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta EINSATZ
	lda READVALUE.RESULT+1
	sta EINSATZ+1

; optimize OK (gambling.pas), line = 33

	ora EINSATZ
	jeq @exit
l_3E3B

; optimize OK (gambling.pas), line = 35

	lda EINSATZ
	sta PAYMONEY.PRICE
	lda EINSATZ+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_3E50

; optimize FAIL ('CRT_NEWLINE2', gambling.pas), line = 37

	jsr CRT_NEWLINE2

; optimize OK (gambling.pas), line = 38

	lda #$08
	jsr CRT_WRITELN2_LOCSTR

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', gambling.pas), line = 39

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('EFFECTWAIT', gambling.pas), line = 41

	jsr EFFECTWAIT

; optimize OK (gambling.pas), line = 42

	lda GAME
	add #$02
	sta GAME

; optimize OK (gambling.pas), line = 43

	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	jne l_3E75

; optimize OK (gambling.pas), line = 46

	lda EINSATZ+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda EINSATZ
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta GEWINN
	lda :STACKORIGIN+STACKWIDTH+9
	sta GEWINN+1

; optimize OK (gambling.pas), line = 47

	lda GAME
	sta :eax
	lda #$00
	sta :eax+1
	lda GEWINN
	sta :ecx
	lda GEWINN+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add EINSATZ
	sta GEWINN
	lda :eax+1
	adc EINSATZ+1
	sta GEWINN+1

; optimize OK (gambling.pas), line = 48

	lda #$09
	jsr CRT_WRITE_LOCSTR

; optimize OK (gambling.pas), line = 49

	lda GEWINN
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda GEWINN+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (gambling.pas), line = 50

	lda #$0A
	jsr CRT_WRITE_LOCSTR

; optimize OK (gambling.pas), line = 51

	lda GEWINN
	sta ADDMONEY.AMOUNT
	lda GEWINN+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY
	jmp l_3EA2
l_3E75

; optimize OK (gambling.pas), line = 54

	lda #$0B
	jsr CRT_WRITE_LOCSTR
l_3EA2

; optimize FAIL ('WAITFORKEY', gambling.pas), line = 55

	jsr WAITFORKEY
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C51
GAME	= DATAORIGIN+$0C52
EINSATZ	= DATAORIGIN+$0C53
GEWINN	= DATAORIGIN+$0C55
CH	= DATAORIGIN+$0C57

@VarData	= GAME
@VarDataSize	= 6

	rts						; ret
.endl

.local	HIDEOUTCHOICES					; FUNCTION

; optimize OK (hideout.pas), line = 9

	lda #$0A
	sta RESULT

; optimize FAIL ('SHOWLOCATIONHEADER', hideout.pas), line = 10

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', hideout.pas), line = 11

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (hideout.pas), line = 14

	lda CURRENTCHOICE
	cmp #$03
	jne l_3EC1

; optimize OK (hideout.pas), line = 16

	ldy CURRENTSUBLOCATION
	lda adr.PLRENT,y
	sta PL

; optimize OK (hideout.pas), line = 18

	lda #$04
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0C
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL ('EFFECTWAIT', hideout.pas), line = 19

	jsr EFFECTWAIT

; optimize OK (hideout.pas), line = 21

	lda PL
	cmp #$63
	jeq l_3EEFx
	cmp CURRENTPLAYER
	jne l_3EEF
l_3EEFx

; optimize OK (hideout.pas), line = 23

	lda #$06
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0D
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL ('WAITFORKEY', hideout.pas), line = 24

	jsr WAITFORKEY
	jmp @exit
l_3EEF

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', hideout.pas), line = 28

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', hideout.pas), line = 29

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (hideout.pas), line = 30

	lda #$0E
	jsr CRT_WRITE_LOCSTR

; optimize OK (hideout.pas), line = 31

	lda PL
	asl @
	asl @
	asl @
	sta TMP

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', hideout.pas), line = 32

	inx
	lda TMP
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 33

	inx
	mva #$AB :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('EFFECTWAIT', hideout.pas), line = 34

	jsr EFFECTWAIT

; optimize OK (hideout.pas), line = 37

	lda #$03
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta TMP

; optimize OK (hideout.pas), line = 38

	ldy PL
	lda TMP
	add adr.PLJOB,y
	sta TMP

; optimize OK (hideout.pas), line = 39

	add adr.PLPRISON,y
	sta TMP

; optimize OK (hideout.pas), line = 40

	jeq l_3F42

; optimize OK (hideout.pas), line = 42

	lda #$0F
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', hideout.pas), line = 43

	jsr WAITFORKEY
	jmp @exit
l_3F42

; optimize OK (hideout.pas), line = 49

	ldy PL
	lda adr.PLNGANGSTERS,y
	sta adr.FP_N+$01

; optimize OK (hideout.pas), line = 50

	tya
	asl @
	tay
	lda adr.PLGANG,y
	sta @move.src
	lda adr.PLGANG+1,y
	sta @move.src+1
	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (hideout.pas), line = 51

	lda #$00
	sta adr.FP_AI+$01

; optimize OK (hideout.pas), line = 53

	sta K

; optimize OK (hideout.pas), line = 54

	sta J

l_3F6D
; --- ForToDoCondition
	ldy J
	cpy #$20
	jcs l_3F7B

; optimize OK (hideout.pas), line = 56

	lda adr.PLGANGSTERS,y
	cmp PL
	jne l_3F92

; optimize OK (hideout.pas), line = 58

	lda J
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta @move.src
	lda adr.GANGSTERNAMES+1,y
	sta @move.src+1
	lda K
	asl @
	tay
	lda adr.FP_NAME+$20,y
	sta @move.dst
	lda adr.FP_NAME+1+$20,y
	sta @move.dst+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (hideout.pas), line = 59

	ldy J
	lda adr.GANGSTERHEALTH,y
	ldy K
	sta adr.FP_ENERGY+$10,y

; optimize OK (hideout.pas), line = 60

	ldy J
	lda adr.GANGSTERWEAPON,y
	ldy K
	sta adr.FP_WEAPON+$10,y

; optimize OK (hideout.pas), line = 61

	ldy J
	lda adr.GANGSTERSEX,y
	ldy K
	sta adr.FP_SEX+$10,y

; optimize OK (hideout.pas), line = 62

	ldy J
	lda adr.GANGSTERSTR,y
	ldy K
	sta adr.FP_STRENGTH+$10,y

; optimize OK (hideout.pas), line = 63

	ldy J
	lda adr.GANGSTERBRUT,y
	ldy K
	sta adr.FP_BRUTALITY+$10,y

; optimize OK (hideout.pas), line = 64

	inc K
l_3F92

; --- ForToDoEpilog
	inc J
	jne l_3F6D
l_3F7B

; optimize FAIL ('DOFIGHT', hideout.pas), line = 68

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	sta W

; optimize FAIL ('ENABLECONSOLE', hideout.pas), line = 69

	jsr ENABLECONSOLE

; optimize FAIL ('SHOWLOCATIONHEADER', hideout.pas), line = 71

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', hideout.pas), line = 72

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (hideout.pas), line = 73

	lda #$04
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0C
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL ('CRT_NEWLINE2', hideout.pas), line = 74

	jsr CRT_NEWLINE2

; optimize OK (hideout.pas), line = 76

	lda PL
	lsr @
	lsr @
	lsr @
	sta TMP

; optimize OK (hideout.pas), line = 77

	lda W
	cmp #$01
	jne l_402A

; optimize OK (hideout.pas), line = 80

	lda #$10
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', hideout.pas), line = 81

	inx
	lda TMP
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (hideout.pas), line = 82

	lda #$00
	jsr B_CRT.CRT_WRITE.@010186000

; optimize OK (hideout.pas), line = 83

	lda #$11
	jsr CRT_WRITELN_LOCSTR

; optimize OK (hideout.pas), line = 84

	lda #$12
	jsr CRT_WRITE_LOCSTR

; optimize OK (hideout.pas), line = 85

	lda PL
	sta M

; optimize OK (hideout.pas), line = 86

	lda CURRENTPLAYER
	jmp l_404E
l_402A

; optimize OK (hideout.pas), line = 91

	lda #$13
	jsr CRT_WRITELN_LOCSTR

; optimize OK (hideout.pas), line = 92

	lda #$14
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 93

	inx
	lda TMP
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (hideout.pas), line = 94

	lda #$15
	jsr CRT_WRITE_LOCSTR

; optimize OK (hideout.pas), line = 95

	lda CURRENTPLAYER
	sta M

; optimize OK (hideout.pas), line = 96

	lda PL
l_404E
	sta K

; optimize OK (hideout.pas), line = 100

	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sta :STACKORIGIN+9
	lda adr.PLMONEY+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.PLMONEY+2,y
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda adr.PLMONEY+3,y
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Z
	lda :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize FAIL (1, hideout.pas), line = 101

	inx
	mva Z :STACKORIGIN,x
	mva Z+1 :STACKORIGIN+STACKWIDTH,x
	lda #$04
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	inx
	mva Z :STACKORIGIN,x
	mva Z+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$02 :STACKORIGIN,x
	jsr @shrAX_CL
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr imulWORD
	dex
	dex
	lda :STACKORIGIN,x
	add :eax
	sta Z
	lda :STACKORIGIN+STACKWIDTH,x
	adc :eax+1
	sta Z+1
	dex

; optimize OK (hideout.pas), line = 102

	lda Z
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda Z+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 103

	inx
	mva #$73 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (hideout.pas), line = 104

	lda M
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	add Z
	sta adr.PLMONEY,y
	lda adr.PLMONEY+1,y
	adc Z+1
	sta adr.PLMONEY+1,y
	lda adr.PLMONEY+2,y
	adc #$00
	sta adr.PLMONEY+2,y
	lda adr.PLMONEY+3,y
	adc #$00
	sta adr.PLMONEY+3,y

; optimize OK (hideout.pas), line = 105

	lda K
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sub Z
	sta adr.PLMONEY,y
	lda adr.PLMONEY+1,y
	sbc Z+1
	sta adr.PLMONEY+1,y
	lda adr.PLMONEY+2,y
	sbc #$00
	sta adr.PLMONEY+2,y
	lda adr.PLMONEY+3,y
	sbc #$00
	sta adr.PLMONEY+3,y

; optimize OK (hideout.pas), line = 107

	ldy K
	lda adr.PLALCOHOL,y
	jeq l_40BC

; optimize OK (hideout.pas), line = 109

	lda W
	cmp #$01
	jne l_40CF

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 110

	inx
	mva LOC_STRING_22 :STACKORIGIN,x
	mva LOC_STRING_22+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp l_40DC
l_40CF

; optimize OK (hideout.pas), line = 112

	lda #$17
	jsr CRT_WRITELN_LOCSTR
l_40DC

; optimize OK (hideout.pas), line = 113

	ldy M
	lda adr.PLALCOHOL,y
	ldy K
	add adr.PLALCOHOL,y
	ldy M
	sta adr.PLALCOHOL,y

; optimize OK (hideout.pas), line = 114

	ldy K
	lda #$00
	sta adr.PLALCOHOL,y

; optimize OK (hideout.pas), line = 115

	lda adr.PLCAR,y
	sta R

; optimize OK (hideout.pas), line = 116

	ldy M
	lda adr.PLALCOHOL,y
	sta :STACKORIGIN+9
	ldy R
	lda adr.CARCARGO,y
	cmp :STACKORIGIN+9
	jcs l_411D
	ldy M
	sta adr.PLALCOHOL,y
l_411D
l_40BC

; optimize OK (hideout.pas), line = 119

	ldy K
	lda adr.PLCAR,y
	jeq l_4143

; optimize OK (hideout.pas), line = 121

	lda W
	cmp #$01
	jne l_4156

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 122

	inx
	mva LOC_STRING_24 :STACKORIGIN,x
	mva LOC_STRING_24+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp l_4163
l_4156

; optimize OK (hideout.pas), line = 124

	lda #$19
	jsr CRT_WRITELN_LOCSTR
l_4163

; optimize OK (hideout.pas), line = 125

	ldy K
	lda #$00
	sta adr.PLCAR,y
l_4143

; optimize OK (hideout.pas), line = 127

	ldy M
	lda adr.PLNEWPOINTS,y
	add #$03
	sta adr.PLNEWPOINTS,y

; optimize OK (hideout.pas), line = 128

	ldy K
	lda adr.PLNEWPOINTS,y
	sub #$01
	sta adr.PLNEWPOINTS,y

; optimize FAIL ('WAITFORKEY', hideout.pas), line = 129

	jsr WAITFORKEY

; optimize OK (hideout.pas), line = 130

	lda #$11
	sta RESULT
	jmp @exit
l_3EC1

; optimize OK (hideout.pas), line = 136

	lda CURRENTCHOICE
	cmp #$01
	jne l_41A7

; optimize OK (hideout.pas), line = 138

	ldy CURRENTSUBLOCATION
	lda adr.PLRENT,y
	cmp #$63
	jeq l_41BD

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', hideout.pas), line = 140

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (hideout.pas), line = 141

	ldy CURRENTSUBLOCATION
	lda adr.PLRENT,y
	cmp CURRENTPLAYER
	jne l_41D6

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', hideout.pas), line = 142

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100
	jmp l_41E3
l_41D6

; optimize OK (hideout.pas), line = 144

	lda #$02
	jsr CRT_WRITE_LOCSTR
l_41E3

; optimize FAIL ('WAITFORKEY', hideout.pas), line = 145

	jsr WAITFORKEY
	jmp @exit
l_41BD

; optimize OK (hideout.pas), line = 151

	lda #$00
	sta R

l_41F1
; --- ForToDoCondition
	ldy R
	cpy #$04
	jcs l_41FF

; optimize OK (hideout.pas), line = 152

	lda adr.PLRENT,y
	cmp CURRENTPLAYER
	jne l_4216

; optimize OK (hideout.pas), line = 154

	lda #$03
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('WAITFORKEY', hideout.pas), line = 155

	jsr WAITFORKEY
	jmp @exit
l_4216

; --- ForToDoEpilog
	inc R
	jne l_41F1
l_41FF
l_41A7

; optimize OK (hideout.pas), line = 160

	lda CURRENTCHOICE
	cmp #$02
	jne l_4235

; optimize OK (hideout.pas), line = 162

	ldy CURRENTSUBLOCATION
	lda adr.PLRENT,y
	cmp CURRENTPLAYER
	jeq l_424D

; optimize OK (hideout.pas), line = 164

	lda #$04
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('WAITFORKEY', hideout.pas), line = 165

	jsr WAITFORKEY
	jmp @exit
l_424D
l_4235

; optimize OK (hideout.pas), line = 170

	lda #$32
	sta PRICE

; optimize OK (hideout.pas), line = 171

	lda CURRENTSUBLOCATION
	cmp #$02
	jcc l_426B

; optimize OK (hideout.pas), line = 172

	lda PRICE
	add #$32
	sta PRICE
l_426B

; optimize OK (hideout.pas), line = 173

	lda CURRENTSUBLOCATION
	cmp #$01
	jne l_428A

; optimize OK (hideout.pas), line = 174

	lda PRICE
	add #$32
	sta PRICE
l_428A

; optimize OK (hideout.pas), line = 176

	lda #$05
	jsr CRT_WRITE_LOCSTR

; optimize OK (hideout.pas), line = 177

	lda PRICE
	jsr B_CRT.CRT_WRITE.@010180000

; optimize OK (hideout.pas), line = 178

	lda #$06
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', hideout.pas), line = 179

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (hideout.pas), line = 180

	lda #$07
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('CRT_NEWLINE2', hideout.pas), line = 181

	jsr CRT_NEWLINE2

; optimize OK (hideout.pas), line = 183

	ldy CURRENTPLAYER
	lda adr.PLRENTMONTHS,y
	jeq l_42B8

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', hideout.pas), line = 185

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (hideout.pas), line = 186

	lda #$08
	jsr CRT_WRITE_LOCSTR

; optimize OK (hideout.pas), line = 187

	ldy CURRENTPLAYER
	lda adr.PLRENTMONTHS,y
	jsr B_CRT.CRT_WRITE.@010180000

; optimize OK (hideout.pas), line = 188

	lda #$09
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', hideout.pas), line = 189

	jsr B_CRT.CRT_NEWLINE.@00
l_42B8

; optimize OK (hideout.pas), line = 191

	lda #$0A
	jsr CRT_WRITE_LOCSTR

; optimize OK (hideout.pas), line = 192

	ldy CURRENTPLAYER
	lda #$24
	sub adr.PLRENTMONTHS,y
	sta READVALUE.MAXVALUE
	lda #$00
	sbc #$00
	sta READVALUE.MAXVALUE+1
	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta M

; optimize OK (hideout.pas), line = 194

	jeq @exit
l_42EB

; optimize OK (hideout.pas), line = 195

	lda M
	sta :ecx
	lda PRICE
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	sta PAYMONEY.PRICE
	lda :eax+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_4307

; optimize OK (hideout.pas), line = 198

	ldy CURRENTPLAYER
	lda adr.PLRENTMONTHS,y
	add M
	sta adr.PLRENTMONTHS,y

; optimize OK (hideout.pas), line = 199

	lda PRICE
	sta adr.PLRENTCOST,y

; optimize OK (hideout.pas), line = 200

	ldy CURRENTSUBLOCATION
	lda CURRENTPLAYER
	sta adr.PLRENT,y

; optimize FAIL ('CRT_NEWLINE2', hideout.pas), line = 202

	jsr CRT_NEWLINE2

; optimize OK (hideout.pas), line = 203

	lda #$0B
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('WAITFORKEY', hideout.pas), line = 204

	jsr WAITFORKEY
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C58
R	= DATAORIGIN+$0C59
K	= DATAORIGIN+$0C5A
J	= DATAORIGIN+$0C5B
W	= DATAORIGIN+$0C5C
M	= DATAORIGIN+$0C5D
PRICE	= DATAORIGIN+$0C5E
PL	= DATAORIGIN+$0C5F
Z	= DATAORIGIN+$0C60

@VarData	= R
@VarDataSize	= 9

	rts						; ret
.endl

.local	LOANSHARKCHOICES				; FUNCTION

; optimize OK (loanshark.pas), line = 8

	lda #$04
	sta RESULT

; optimize FAIL ('SHOWLOCATIONHEADER', loanshark.pas), line = 9

	jsr SHOWLOCATIONHEADER

; optimize OK (loanshark.pas), line = 11

	lda CURRENTCHOICE
	cmp #$01
	jne l_434D

; optimize OK (loanshark.pas), line = 13

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN+1,y
	jmi l_4362
	ora adr.PLLOAN,y
	jeq l_4362

; optimize OK (loanshark.pas), line = 15

	lda #$01
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('B_CRT.CRT_READCHAR', loanshark.pas), line = 16

	jsr B_CRT.CRT_READCHAR
	jmp @exit
l_4362

; optimize OK (loanshark.pas), line = 20

	ldy CURRENTPLAYER
	lda adr.PLLOANSHARK,y
	cmp #$63
	jeq l_437D

; optimize OK (loanshark.pas), line = 22

	lda #$25
	jsr CRT_WRITELN_LOCSTR

; optimize OK (loanshark.pas), line = 23

	lda #$26
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 24

	jsr WAITFORKEY
	jmp @exit
l_437D

; optimize OK (loanshark.pas), line = 28

	lda #$02
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', loanshark.pas), line = 29

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (loanshark.pas), line = 30

	lda #$03
	jsr CRT_WRITE_LOCSTR

; optimize OK (loanshark.pas), line = 31

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda #$88
	sta READVALUE.MAXVALUE
	lda #$13
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta LOAN
	lda READVALUE.RESULT+1
	sta LOAN+1

; optimize OK (loanshark.pas), line = 32

	ora LOAN
	jeq @exit
l_43A1

; optimize FAIL ('CRT_NEWLINE2', loanshark.pas), line = 35

	jsr CRT_NEWLINE2

; optimize OK (loanshark.pas), line = 36

	lda #$04
	jsr CRT_WRITELN_LOCSTR

; optimize OK (loanshark.pas), line = 37

	lda #$05
	jsr CRT_WRITELN_LOCSTR

; optimize OK (loanshark.pas), line = 38

	lda LOAN
	sta P
	lda LOAN+1
	sta P+1

; optimize OK (loanshark.pas), line = 39

	sta :STACKORIGIN+STACKWIDTH+9
	lda P
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta P
	lda :STACKORIGIN+STACKWIDTH+9
	sta P+1

; optimize OK (loanshark.pas), line = 40

	lda CURRENTPLAYER
	asl @
	tay
	lda LOAN
	add P
	sta adr.PLLOAN,y
	lda LOAN+1
	adc P+1
	sta adr.PLLOAN+1,y

; optimize OK (loanshark.pas), line = 41

	lda #$04
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta TMP

; optimize OK (loanshark.pas), line = 42

	add #$06
	sta TMP

; optimize OK (loanshark.pas), line = 43

	ldy CURRENTPLAYER
	sta adr.PLLOANTIME,y

; optimize OK (loanshark.pas), line = 44

	lda LOAN
	sta ADDMONEY.AMOUNT
	lda LOAN+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 45

	jsr WAITFORKEY
	jmp @exit
l_434D

; optimize OK (loanshark.pas), line = 49

	lda CURRENTCHOICE
	cmp #$02
	jne l_43F4

; optimize OK (loanshark.pas), line = 51

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN+1,y
	bne @+
	lda adr.PLLOAN,y
@
	jne l_4409

; optimize OK (loanshark.pas), line = 53

	lda #$06
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 54

	jsr WAITFORKEY
	jmp @exit
l_4409

; optimize OK (loanshark.pas), line = 58

	lda #$07
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', loanshark.pas), line = 59

	inx
	mva #$AF :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (loanshark.pas), line = 60

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN,y
	sta B_CRT.CRT_WRITE.@010185000.NUM
	lda adr.PLLOAN+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta B_CRT.CRT_WRITE.@010185000.NUM+1
	sty B_CRT.CRT_WRITE.@010185000.NUM+2
	sty B_CRT.CRT_WRITE.@010185000.NUM+3
	jsr B_CRT.CRT_WRITE.@010185000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', loanshark.pas), line = 61

	inx
	mva #$A6 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (loanshark.pas), line = 62

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN,y
	sta READVALUE.MAXVALUE
	lda adr.PLLOAN+1,y
	sta READVALUE.MAXVALUE+1
	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta LOAN
	lda READVALUE.RESULT+1
	sta LOAN+1

; optimize OK (loanshark.pas), line = 63

	ora LOAN
	jeq @exit
l_4436

; optimize OK (loanshark.pas), line = 66

	lda LOAN
	sta PAYMONEY.PRICE
	lda LOAN+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_444B

; optimize OK (loanshark.pas), line = 67

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN,y
	sub LOAN
	sta adr.PLLOAN,y
	lda adr.PLLOAN+1,y
	sbc LOAN+1
	sta adr.PLLOAN+1,y

; optimize OK (loanshark.pas), line = 68

	cmp #$00
	bne @+
	lda adr.PLLOAN,y
@
	jne l_4472

; optimize FAIL ('CRT_NEWLINE2', loanshark.pas), line = 70

	jsr CRT_NEWLINE2

; optimize OK (loanshark.pas), line = 71

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLLOANTIME,y

; optimize OK (loanshark.pas), line = 72

	lda #$08
	jsr CRT_WRITELN_LOCSTR
	jmp l_4486
l_4472

; optimize FAIL ('CRT_NEWLINE2', loanshark.pas), line = 76

	jsr CRT_NEWLINE2

; optimize OK (loanshark.pas), line = 77

	lda #$09
	jsr CRT_WRITE_LOCSTR

; optimize OK (loanshark.pas), line = 78

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN,y
	sta B_CRT.CRT_WRITE.@010185000.NUM
	lda adr.PLLOAN+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta B_CRT.CRT_WRITE.@010185000.NUM+1
	sty B_CRT.CRT_WRITE.@010185000.NUM+2
	sty B_CRT.CRT_WRITE.@010185000.NUM+3
	jsr B_CRT.CRT_WRITE.@010185000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', loanshark.pas), line = 79

	inx
	mva #$88 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (loanshark.pas), line = 80

	lda #$0A
	jsr CRT_WRITE_LOCSTR
l_4486

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 82

	jsr WAITFORKEY
l_43F4

; optimize OK (loanshark.pas), line = 86

	lda CURRENTCHOICE
	cmp #$03
	jne l_44A8

; optimize OK (loanshark.pas), line = 89

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN+1,y
	bne @+
	lda adr.PLLOAN,y
@
	jeq l_44BD

; optimize OK (loanshark.pas), line = 90

	lda #$15
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 91

	jsr WAITFORKEY
	jmp @exit
l_44BD

; optimize OK (loanshark.pas), line = 95

	lda #$0B
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta TMP

; optimize OK (loanshark.pas), line = 96

	sta :ecx
	lda #$64
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta P+1
	lda :eax
	sta P

; optimize OK (loanshark.pas), line = 97

	ldy CURRENTPLAYER
	lda adr.PLLOANSHARK,y
	cmp CURRENTSUBLOCATION
	jne l_44E9

; optimize OK (loanshark.pas), line = 100

	lda P
	add #$94
	sta P
	lda P+1
	adc #$11
	sta P+1

; optimize OK (loanshark.pas), line = 101

	lda #$16
	jsr CRT_WRITE_LOCSTR

; optimize OK (loanshark.pas), line = 102

	lda P
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda P+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (loanshark.pas), line = 103

	lda #$17
	jsr CRT_WRITELN_LOCSTR

; optimize OK (loanshark.pas), line = 104

	lda #$18
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('GETYESNO', loanshark.pas), line = 105

	jsr GETYESNO
	lda GETYESNO.RESULT
	jeq @exit
l_450C

; optimize OK (loanshark.pas), line = 106

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (loanshark.pas), line = 107

	ldy CURRENTPLAYER
	lda #$63
	sta adr.PLLOANSHARK,y

; optimize OK (loanshark.pas), line = 108

	tya
	asl @
	tay
	lda #$00
	sta adr.PLLOANINVEST,y
	sta adr.PLLOANINVEST+1,y

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', loanshark.pas), line = 109

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (loanshark.pas), line = 110

	lda #$19
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 111

	jsr WAITFORKEY
	jmp @exit
l_44E9

; optimize OK (loanshark.pas), line = 116

	ldy CURRENTPLAYER
	lda adr.PLLOANSHARK,y
	cmp #$63
	jeq l_4542

; optimize OK (loanshark.pas), line = 118

	lda #$0B
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 119

	jsr WAITFORKEY
	jmp @exit
l_4542

; optimize OK (loanshark.pas), line = 122

	lda #$00
	sta R

l_4551
; --- ForToDoCondition
	ldy R
	cpy #$04
	jcs l_455F

; optimize OK (loanshark.pas), line = 124

	lda adr.PLLOANSHARK,y
	cmp CURRENTSUBLOCATION
	jne l_4576

; optimize OK (loanshark.pas), line = 125

	lda #$1A
	jsr CRT_WRITE_LOCSTR

; optimize OK (loanshark.pas), line = 126

	lda R
	asl @
	asl @
	asl @
	sta K

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', loanshark.pas), line = 127

	inx
	lda K
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 128

	inx
	mva #$B3 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 129

	jsr WAITFORKEY
	jmp @exit
l_4576

; --- ForToDoEpilog
	inc R
	jne l_4551
l_455F

; optimize OK (loanshark.pas), line = 135

	lda P
	add #$88
	sta P
	lda P+1
	adc #$13
	sta P+1

; optimize OK (loanshark.pas), line = 136

	lda #$1B
	jsr CRT_WRITE_LOCSTR

; optimize OK (loanshark.pas), line = 137

	lda P
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda P+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (loanshark.pas), line = 138

	lda #$1C
	jsr CRT_WRITELN_LOCSTR

; optimize OK (loanshark.pas), line = 139

	lda #$1D
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('GETYESNO', loanshark.pas), line = 140

	jsr GETYESNO
	lda GETYESNO.RESULT
	jeq @exit
l_45B5

; optimize OK (loanshark.pas), line = 141

	lda P
	sta PAYMONEY.PRICE
	lda P+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_45CA

; optimize OK (loanshark.pas), line = 142

	ldy CURRENTPLAYER
	lda CURRENTSUBLOCATION
	sta adr.PLLOANSHARK,y

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', loanshark.pas), line = 143

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (loanshark.pas), line = 144

	lda #$1E
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 145

	jsr WAITFORKEY
l_452D
l_44A8

; optimize OK (loanshark.pas), line = 150

	lda CURRENTCHOICE
	cmp #$04
	jne l_45EE

; optimize OK (loanshark.pas), line = 152

	ldy CURRENTPLAYER
	lda adr.PLLOANSHARK,y
	cmp CURRENTSUBLOCATION
	jeq l_4606

; optimize OK (loanshark.pas), line = 154

	lda #$0C
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 155

	jsr WAITFORKEY
	jmp @exit
l_4606

; optimize OK (loanshark.pas), line = 158

	lda #$1F
	jsr CRT_WRITE_LOCSTR

; optimize OK (loanshark.pas), line = 159

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOANINVEST,y
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda adr.PLLOANINVEST+1,y
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (loanshark.pas), line = 160

	lda #$20
	jsr CRT_WRITELN_LOCSTR

; optimize OK (loanshark.pas), line = 161

	lda #$21
	jsr CRT_WRITELN_LOCSTR

; optimize OK (loanshark.pas), line = 162

	lda #$22
	jsr CRT_WRITE_LOCSTR

; optimize OK (loanshark.pas), line = 164

	lda CURRENTPLAYER
	asl @
	tay
	lda #$88
	sub adr.PLLOANINVEST,y
	sta READVALUE.MAXVALUE
	lda #$13
	sbc adr.PLLOANINVEST+1,y
	sta READVALUE.MAXVALUE+1
	lda #$00
	sub adr.PLLOANINVEST,y
	sta READVALUE.MINVALUE
	lda #$00
	sbc adr.PLLOANINVEST+1,y
	sta READVALUE.MINVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta LOAN
	lda READVALUE.RESULT+1
	sta LOAN+1

; optimize OK (loanshark.pas), line = 165

	ora LOAN
	jeq @exit
l_4640

; optimize OK (loanshark.pas), line = 166

	lda LOAN
	sta PAYMONEY.PRICE
	lda LOAN+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_4655

; optimize OK (loanshark.pas), line = 167

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOANINVEST,y
	add LOAN
	sta adr.PLLOANINVEST,y
	lda adr.PLLOANINVEST+1,y
	adc LOAN+1
	sta adr.PLLOANINVEST+1,y

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', loanshark.pas), line = 168

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (loanshark.pas), line = 169

	lda #$23
	jsr CRT_WRITE_LOCSTR

; optimize OK (loanshark.pas), line = 170

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOANINVEST,y
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda adr.PLLOANINVEST+1,y
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', loanshark.pas), line = 171

	inx
	mva #$88 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (loanshark.pas), line = 172

	lda #$24
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 173

	jsr WAITFORKEY
l_45EE

; optimize OK (loanshark.pas), line = 176

	lda CURRENTCHOICE
	cmp #$05
	jne l_468A

; optimize OK (loanshark.pas), line = 178

	ldy CURRENTPLAYER
	lda adr.PLLOANSHARK,y
	cmp CURRENTSUBLOCATION
	jeq l_46A2

; optimize OK (loanshark.pas), line = 180

	lda #$0C
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 181

	jsr WAITFORKEY
	jmp @exit
l_46A2

; optimize OK (loanshark.pas), line = 186

	lda #$00
	sta ALLPAID

; optimize OK (loanshark.pas), line = 187

	lda #$03
	jsr SYSTEM.RANDOM.@010180000
	inx
	inx
	ldy #1
	lda SYSTEM.RANDOM.@010180000.RESULT
	bne @+
	dey
@
	sty :STACKORIGIN-1,x
	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOANINVEST,y
	sta :STACKORIGIN,x
	lda adr.PLLOANINVEST+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	ldy #1
	lda :STACKORIGIN-1+STACKWIDTH,x
	ora :STACKORIGIN-1,x
	bne @+
	dey
@
	dex
	sty :STACKORIGIN,x
	dex
	dex
	lda :STACKORIGIN+1,x
	and :STACKORIGIN+2,x
	jeq l_46CB
	lda #$01
	sta ALLPAID
l_46CB

; optimize OK (loanshark.pas), line = 188

	lda ALLPAID
	jne l_46E4

; optimize OK (loanshark.pas), line = 190

	lda #$0D
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 191

	jsr WAITFORKEY
	jmp @exit
l_46E4

; optimize OK (loanshark.pas), line = 195

	lda #$0E
	jsr CRT_WRITELN_LOCSTR

; optimize OK (loanshark.pas), line = 196

	lda #$0F
	jsr CRT_WRITELN_LOCSTR

; optimize OK (loanshark.pas), line = 197

	lda #$10
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 198

	jsr WAITFORKEY

; -------------------  ASM Block 00000163  -------------------

 
            lda loc_string_17
            sta adr.FP_GANG+$02
            lda loc_string_17+1
            sta adr.FP_GANG+1+$02
        
; optimize OK (loanshark.pas), line = 206

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (loanshark.pas), line = 207

	sta adr.FP_N+$01

; optimize OK (loanshark.pas), line = 208

	lda adr.FP_NAME+$20
	sta @move.dst
	lda adr.FP_NAME+1+$20
	sta @move.dst+1
	lda LOC_STRING_17
	sta @move.src
	lda LOC_STRING_17+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (loanshark.pas), line = 209

	lda #$06
	sta adr.FP_WEAPON+$10

; optimize FAIL (1, loanshark.pas), line = 210

	inx
	mva #$10 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta adr.FP_SEX,y
	dex

; optimize OK (loanshark.pas), line = 211

	lda #$23
	sta adr.FP_ENERGY+$10

; optimize FAIL ('DOFIGHT', loanshark.pas), line = 214

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_4721

; optimize OK (loanshark.pas), line = 215

	lda #$01
	jsr REMOVEPOINTS
	jmp @exit
l_4721

; optimize FAIL (1, loanshark.pas), line = 219

	inx
	mva #$F4 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	jsr @shlEAX_CL.BYTE
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sta LOAN
	lda :STACKORIGIN+STACKWIDTH,x
	sta LOAN+1
	dex

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', loanshark.pas), line = 220

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('SHOWLOCATIONHEADER', loanshark.pas), line = 223

	jsr SHOWLOCATIONHEADER

; optimize OK (loanshark.pas), line = 224

	lda #$12
	jsr CRT_WRITELN_LOCSTR

; optimize OK (loanshark.pas), line = 225

	lda #$13
	jsr CRT_WRITE_LOCSTR

; optimize OK (loanshark.pas), line = 226

	lda LOAN
	sta B_CRT.CRT_WRITE.@010185000.NUM
	ldy #$00
	lda LOAN+1
	spl
	dey
	sta B_CRT.CRT_WRITE.@010185000.NUM+1
	sty B_CRT.CRT_WRITE.@010185000.NUM+2
	sty B_CRT.CRT_WRITE.@010185000.NUM+3
	jsr B_CRT.CRT_WRITE.@010185000

; optimize OK (loanshark.pas), line = 227

	lda #$14
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 228

	jsr WAITFORKEY

; optimize OK (loanshark.pas), line = 229

	lda #$02
	jsr ADDPOINTS

; optimize OK (loanshark.pas), line = 230

	lda LOAN
	sta ADDMONEY.AMOUNT
	lda LOAN+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY
l_468A
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C62
R	= DATAORIGIN+$0C63
K	= DATAORIGIN+$0C64
ALLPAID	= DATAORIGIN+$0C65
LOAN	= DATAORIGIN+$0C66
P	= DATAORIGIN+$0C68

@VarData	= R
@VarDataSize	= 7

	rts						; ret
.endl

.local	POLICECHOICES					; FUNCTION

; optimize OK (police.pas), line = 9

	lda #$05
	sta RESULT

; optimize OK (police.pas), line = 10

	lda CURRENTCHOICE
	cmp #$01
	jne l_4760

; optimize FAIL ('GOTOCOURT', police.pas), line = 12

	jsr GOTOCOURT

; optimize OK (police.pas), line = 13

	lda #$11
	sta RESULT
	jmp @exit
l_4760

; optimize OK (police.pas), line = 17

	lda CURRENTCHOICE
	cmp #$02
	jne l_477A

; optimize FAIL ('SHOWLOCATIONHEADER', police.pas), line = 19

	jsr SHOWLOCATIONHEADER

; optimize OK (police.pas), line = 20

	lda #$01
	jsr CRT_WRITELN_LOCSTR

; optimize OK (police.pas), line = 21

	lda #$02
	jsr CRT_WRITE_LOCSTR

; optimize OK (police.pas), line = 22

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda #$0C
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta M

; optimize OK (police.pas), line = 23

	jeq @exit
l_4798

; optimize OK (police.pas), line = 24

	lda #$E8
	sta :ecx
	lda #$03
	sta :ecx+1
	lda M
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta PAYMONEY.PRICE
	lda :eax+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_47B2

; optimize OK (police.pas), line = 27

	ldy CURRENTPLAYER
	lda adr.PLBRIBE,y
	add M
	sta adr.PLBRIBE,y

; optimize OK (police.pas), line = 28

	lda #$02
	jsr ADDPOINTS

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', police.pas), line = 30

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', police.pas), line = 31

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (police.pas), line = 32

	lda #$03
	jsr CRT_WRITELN_LOCSTR

; optimize OK (police.pas), line = 33

	lda #$04
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', police.pas), line = 34

	jsr WAITFORKEY
	jmp @exit
l_477A

; optimize OK (police.pas), line = 38

	lda CURRENTCHOICE
	cmp #$03
	jne l_47E4

; optimize FAIL ('SHOWLOCATIONHEADER', police.pas), line = 40

	jsr SHOWLOCATIONHEADER

; optimize OK (police.pas), line = 42

	lda #$05
	jsr CRT_WRITELN2_LOCSTR

; optimize OK (police.pas), line = 43

	lda #$00
	sta R

; optimize OK (police.pas), line = 44

	sta M
	ldy NPLAYERS
	dey
	sty @FORTMP_47F8_0

l_47FB
; --- ForToDoCondition
	lda @FORTMP_47F8_0::#$00
	cmp M
	jcc l_4809

; optimize OK (police.pas), line = 46

	ldy M
	lda adr.PLPRISON,y
	jeq l_481E

; optimize OK (police.pas), line = 47

	lda #$00
	jsr B_CRT.CRT_WRITE.@010186000

; optimize OK (police.pas), line = 48

	lda M
	add #$01
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda #$00
	adc #$00
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', police.pas), line = 49

	inx
	mva #$76 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (police.pas), line = 50

	lda M
	asl @
	asl @
	asl @
	sta TMP

; optimize FAIL ('CRT_WRITELN', police.pas), line = 51

	inx
	lda TMP
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (police.pas), line = 52

	inc R
l_481E

; --- ForToDoEpilog
	inc M
	jne l_47FB
l_4809

; optimize OK (police.pas), line = 55

	lda R
	jne l_485E

; optimize OK (police.pas), line = 56

	lda #$06
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', police.pas), line = 57

	jsr WAITFORKEY
	jmp @exit
l_485E

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', police.pas), line = 61

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (police.pas), line = 62

	lda #$07
	jsr CRT_WRITELN_LOCSTR

; --- RepeatUntilProlog
l_4868

; optimize OK (police.pas), line = 64

	lda #$01
	sta READVALUE.MINVALUE
	lda #$00
	sta READVALUE.MINVALUE+1
	lda NPLAYERS
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta R

; optimize OK (police.pas), line = 66

	tay
	lda adr.PLPRISON-$01,y
	jeq l_4868

; optimize OK (police.pas), line = 67

	dec R

; optimize OK (police.pas), line = 68

	lda #$05
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	inx
	mva #$09 :STACKORIGIN,x
	jsr @shlEAX_CL.BYTE
	mva #$B8 :STACKORIGIN,x
	mva #$0B :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sta P
	lda :STACKORIGIN+STACKWIDTH,x
	sta P+1
	dex

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', police.pas), line = 69

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', police.pas), line = 70

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (police.pas), line = 71

	lda #$08
	jsr CRT_WRITE_LOCSTR

; optimize OK (police.pas), line = 72

	lda P
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda P+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (police.pas), line = 73

	lda #$09
	jsr CRT_WRITELN_LOCSTR

; optimize OK (police.pas), line = 74

	lda #$0A
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', police.pas), line = 75

	jsr WAITFORKEY

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', police.pas), line = 76

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', police.pas), line = 77

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (police.pas), line = 78

	lda P
	sta PAYMONEY.PRICE
	lda P+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_48BB

; optimize OK (police.pas), line = 79

	lda #$0B
	jsr CRT_WRITELN_LOCSTR

; optimize OK (police.pas), line = 80

	lda #$0C
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', police.pas), line = 81

	jsr WAITFORKEY

; optimize OK (police.pas), line = 82

	ldy R
	lda CURRENTPLAYER
	sta adr.PLFREED,y

; optimize OK (police.pas), line = 83

	lda #$00
	sta adr.PLPRISON,y
l_47E4
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C6A
R	= DATAORIGIN+$0C6B
M	= DATAORIGIN+$0C6C
P	= DATAORIGIN+$0C6D
TMP	= DATAORIGIN+$0C6F

@VarData	= R
@VarDataSize	= 5

	rts						; ret
.endl

.local	PUBCHOICES					; FUNCTION

; optimize OK (pub.pas), line = 13

	lda #$07
	sta RESULT

; optimize FAIL ('SHOWLOCATIONHEADER', pub.pas), line = 14

	jsr SHOWLOCATIONHEADER

; optimize OK (pub.pas), line = 17

	lda CURRENTCHOICE
	cmp #$01
	jne l_48F0

; optimize OK (pub.pas), line = 19

	lda CURRENTSUBLOCATION
	cmp #$02
	jcc l_4903

; optimize OK (pub.pas), line = 21

	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	inx
	inx
	ldy #1
	lda SYSTEM.RANDOM.@010180000.RESULT
	beq @+
	dey
@
	sty :STACKORIGIN-1,x
	ldy CURRENTPLAYER
	lda adr.PLALCOHOL,y
	sta :STACKORIGIN,x
	inx
	ldy #1
	lda :STACKORIGIN-1,x
	bne @+
	dey
@
	dex
	sty :STACKORIGIN,x
	dex
	dex
	lda :STACKORIGIN+1,x
	and :STACKORIGIN+2,x
	jeq l_4924

; optimize OK (pub.pas), line = 23

	lda #$14
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	add #$0A
	sta P
	lda #$00
	adc #$00
	sta P+1

; optimize OK (pub.pas), line = 24

	lda #$01
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 25

	lda #$02
	jsr CRT_WRITE_LOCSTR

; optimize OK (pub.pas), line = 26

	lda P
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda P+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (pub.pas), line = 27

	lda #$03
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 29

	lda #$04
	jsr CRT_WRITE_LOCSTR

; optimize OK (pub.pas), line = 30

	ldy CURRENTPLAYER
	lda adr.PLALCOHOL,y
	jsr B_CRT.CRT_WRITE.@010180000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', pub.pas), line = 31

	inx
	mva #$A3 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (pub.pas), line = 32

	ldy CURRENTPLAYER
	lda adr.PLALCOHOL,y
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta AL
	lda READVALUE.RESULT+1
	sta AL+1

; optimize OK (pub.pas), line = 33

	ora AL
	jeq @exit
l_495E

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', pub.pas), line = 35

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (pub.pas), line = 36

	lda #$05
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 37

	lda P
	sta :ecx
	lda P+1
	sta :ecx+1
	lda AL
	sta :eax
	lda AL+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta ADDMONEY.AMOUNT
	lda :eax+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (pub.pas), line = 38

	ldy CURRENTPLAYER
	lda adr.PLALCOHOL,y
	sub AL
	sta adr.PLALCOHOL,y
	jmp l_4986
l_4924

; optimize OK (pub.pas), line = 42

	lda #$06
	jsr CRT_WRITELN_LOCSTR
l_4986

; optimize FAIL ('WAITFORKEY', pub.pas), line = 44

	jsr WAITFORKEY
	jmp @exit
l_4903

; optimize OK (pub.pas), line = 47

	lda #$C8
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	add #$64
	sta AL
	lda #$00
	adc #$00
	sta AL+1

; optimize OK (pub.pas), line = 48

	lda #$0A
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	add #$05
	sta P
	lda #$00
	adc #$00
	sta P+1

; optimize OK (pub.pas), line = 49

	lda #$07
	jsr CRT_WRITE_LOCSTR

; optimize OK (pub.pas), line = 50

	lda P
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda P+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 51

	inx
	mva #$A0 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (pub.pas), line = 54

	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	tay
	lda adr.CARCARGO,y
	ldy CURRENTPLAYER
	sub adr.PLALCOHOL,y
	sta W
	lda #$00
	sbc #$00
	sta W+1

; optimize OK (pub.pas), line = 55

	bmi @+
	ora W
	jne l_49CA
@

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', pub.pas), line = 56

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (pub.pas), line = 57

	lda #$08
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 58

	lda #$09
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', pub.pas), line = 59

	jsr WAITFORKEY
	jmp @exit
l_49CA

; optimize OK (pub.pas), line = 62

	lda W
	cmp AL
	lda W+1
	sbc AL+1
	svc
	eor #$80
	jpl l_49E5
	lda W
	sta AL
	lda W+1
	sta AL+1
l_49E5

; optimize OK (pub.pas), line = 63

	lda #$0A
	jsr CRT_WRITE_LOCSTR

; optimize OK (pub.pas), line = 64

	lda AL
	sta B_CRT.CRT_WRITE.@010185000.NUM
	ldy #$00
	lda AL+1
	spl
	dey
	sta B_CRT.CRT_WRITE.@010185000.NUM+1
	sty B_CRT.CRT_WRITE.@010185000.NUM+2
	sty B_CRT.CRT_WRITE.@010185000.NUM+3
	jsr B_CRT.CRT_WRITE.@010185000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', pub.pas), line = 65

	inx
	mva #$A3 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (pub.pas), line = 66

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda AL
	sta READVALUE.MAXVALUE
	lda AL+1
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta W
	lda READVALUE.RESULT+1
	sta W+1

; optimize OK (pub.pas), line = 67

	bmi @+
	ora W
	jne l_4A0C
@
	jmp @exit
l_4A0C

; optimize OK (pub.pas), line = 68

	lda P
	sta :ecx
	lda P+1
	sta :ecx+1
	lda W
	sta :eax
	lda W+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta P
	lda :eax+1
	sta P+1

; optimize OK (pub.pas), line = 69

	lda P
	sta PAYMONEY.PRICE
	lda P+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_4A2B

; optimize OK (pub.pas), line = 70

	ldy CURRENTPLAYER
	lda adr.PLALCOHOL,y
	add W
	sta adr.PLALCOHOL,y

; optimize OK (pub.pas), line = 71

	lda #$02
	jsr ADDPOINTS
l_48F0

; optimize OK (pub.pas), line = 75

	lda CURRENTCHOICE
	cmp #$02
	jne l_4A55

; optimize FAIL ('SHOWLOCATIONHEADER', pub.pas), line = 77

	jsr SHOWLOCATIONHEADER

; optimize OK (pub.pas), line = 79

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$05
	jcs l_4A6C

; optimize OK (pub.pas), line = 81

	lda #$0B
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', pub.pas), line = 82

	inx
	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	asl @
	tay
	lda adr.RANKNAMES,y
	sta :STACKORIGIN,x
	lda adr.RANKNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (pub.pas), line = 83

	lda #$0C
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 84

	lda #$0D
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', pub.pas), line = 85

	jsr WAITFORKEY
	jmp @exit
l_4A6C

; optimize OK (pub.pas), line = 91

	lda #$00
	tay

l_4A88
; --- ForToDoCondition
	cpy #$04
	jcs l_4A96

; optimize OK (pub.pas), line = 92

	lda adr.PLRENT,y
	cmp CURRENTPLAYER
	jne l_4AAD
	lda #$01
	sta HASHIDEOUT
l_4AAD

; --- ForToDoEpilog
	iny
	jne l_4A88
l_4A96
	sty R

; optimize OK (pub.pas), line = 94

	lda HASHIDEOUT
	jne l_4ACB

; optimize OK (pub.pas), line = 96

	lda #$0E
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 97

	lda #$0F
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', pub.pas), line = 98

	jsr WAITFORKEY
	jmp @exit
l_4ACB

; optimize OK (pub.pas), line = 102

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$08
	jcc l_4AE8

; optimize OK (pub.pas), line = 104

	lda #$10
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 105

	lda #$11
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', pub.pas), line = 106

	jsr WAITFORKEY
	jmp @exit
l_4AE8

; optimize OK (pub.pas), line = 114

	lda #$63
	sta G

; optimize OK (pub.pas), line = 115

	lda #$00
	sta K

l_4AFD
; --- ForToDoCondition
	lda K
	cmp #$05
	jcs l_4B0B

; optimize OK (pub.pas), line = 117

	lda #$2A
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta R

; optimize OK (pub.pas), line = 118

	cmp #$20
	jcc l_4B22
	jmp b_4AFD
l_4B22

; optimize OK (pub.pas), line = 119

	ldy R
	lda adr.PLGANGSTERS,y
	cmp #$63
	jne l_4B3A

; optimize OK (pub.pas), line = 120

	lda R
	sta G
	jmp b_4AFD
l_4B3A

; --- ForToDoEpilog
	inc K
	jne l_4AFD
l_4B0B
b_4AFD

; optimize OK (pub.pas), line = 125

	lda G
	cmp #$63
	jne l_4B5A

; optimize OK (pub.pas), line = 127

	lda #$12
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', pub.pas), line = 128

	jsr WAITFORKEY
	jmp @exit
l_4B5A

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', pub.pas), line = 133

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (pub.pas), line = 134

	lda G
	jsr LOADGANGSTER

; optimize OK (pub.pas), line = 135

	lda #$27
	jsr CRT_WRITE_LOCSTR

; optimize OK (pub.pas), line = 136

	lda BUF_GANGSTERPRICE
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda BUF_GANGSTERPRICE+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (pub.pas), line = 137

	lda #$28
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', pub.pas), line = 138

	inx
	mva BUF_GANGSTERANREDE :STACKORIGIN,x
	mva BUF_GANGSTERANREDE+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (pub.pas), line = 139

	lda #$29
	jsr CRT_WRITELN2_LOCSTR

; optimize FAIL ('GETYESNO', pub.pas), line = 140

	jsr GETYESNO
	lda GETYESNO.RESULT
	jeq @exit
l_4B81

; optimize OK (pub.pas), line = 141

	lda BUF_GANGSTERPRICE
	sta PAYMONEY.PRICE
	lda BUF_GANGSTERPRICE+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_4B96

; optimize OK (pub.pas), line = 142

	ldy G
	lda CURRENTPLAYER
	sta adr.PLGANGSTERS,y

; optimize OK (pub.pas), line = 143

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	sta Z

; optimize OK (pub.pas), line = 144

	add #$01
	sta adr.PLNGANGSTERS,y

; optimize OK (pub.pas), line = 145

	ldy G
	lda #$0A
	sta adr.GANGSTERHEALTH,y

; optimize OK (pub.pas), line = 146

	tya
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta @move.dst
	lda adr.GANGSTERNAMES+1,y
	sta @move.dst+1
	lda BUF_GANGSTERNAME
	sta @move.src
	lda BUF_GANGSTERNAME+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (pub.pas), line = 147

	ldy G
	lda BUF_GANGSTERSTR
	sta adr.GANGSTERSTR,y

; optimize OK (pub.pas), line = 148

	lda BUF_GANGSTERBRUT
	sta adr.GANGSTERBRUT,y

; optimize OK (pub.pas), line = 149

	lda BUF_GANGSTERINT
	sta adr.GANGSTERINT,y

; optimize OK (pub.pas), line = 150

	lda BUF_GANGSTERWEAPON
	sta adr.GANGSTERWEAPON,y

; optimize OK (pub.pas), line = 151

	lda BUF_GANGSTERSEX
	sta adr.GANGSTERSEX,y

; optimize OK (pub.pas), line = 153

	lda #$13
	jsr CRT_WRITE_LOCSTR

; optimize OK (pub.pas), line = 154

	lda #$00
	jsr B_CRT.CRT_WRITE.@010186000

; optimize OK (pub.pas), line = 155

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	sub #$01
	sta TMP

; optimize OK (pub.pas), line = 156

	jsr B_CRT.CRT_WRITE.@010180000

; optimize OK (pub.pas), line = 157

	lda #$14
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', pub.pas), line = 158

	jsr WAITFORKEY
l_4A55

; optimize OK (pub.pas), line = 162

	lda CURRENTCHOICE
	cmp #$03
	jne l_4C20

; optimize OK (pub.pas), line = 165

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$04
	jcs l_4C36

; optimize OK (pub.pas), line = 167

	lda #$15
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', pub.pas), line = 168

	jsr WAITFORKEY
	jmp @exit
l_4C36

; optimize OK (pub.pas), line = 173

	lda #$03
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	jne l_4C4D

; optimize OK (pub.pas), line = 174

	lda #$16
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', pub.pas), line = 175

	jsr WAITFORKEY
	jmp @exit
l_4C4D

; optimize OK (pub.pas), line = 179

	lda #$04
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	inx
	mva #$F4 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	mva #$E8 :STACKORIGIN,x
	mva #$03 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sta P
	lda :STACKORIGIN+STACKWIDTH,x
	sta P+1
	dex

; optimize OK (pub.pas), line = 180

	lda #$17
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 181

	lda #$18
	jsr CRT_WRITE_LOCSTR

; optimize OK (pub.pas), line = 182

	lda P
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda P+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (pub.pas), line = 183

	lda #$19
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('GETYESNO', pub.pas), line = 184

	jsr GETYESNO
	lda GETYESNO.RESULT
	jeq @exit
l_4C79

; optimize OK (pub.pas), line = 185

	lda P
	sta PAYMONEY.PRICE
	lda P+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_4C8E

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', pub.pas), line = 187

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (pub.pas), line = 188

	lda #$05
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta TIPP

; optimize OK (pub.pas), line = 190

	lda #$01
	ldy TIPP
	beq l_0001_e
l_0001_b
	asl @
	dey
	bne l_0001_b
l_0001_e
	sta TMP

; optimize OK (pub.pas), line = 191

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and TMP
	sta TMP

; optimize OK (pub.pas), line = 192

	jeq l_4CC2
	lda #$00
	sta TIPP
l_4CC2

; optimize OK (pub.pas), line = 193

	lda TIPP
	sta @CASETMP_0012
	jne l_4CD4
@

; optimize OK (pub.pas), line = 195

	lda #$1A
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 196

	lda #$1B
	jmp s_4CE3
l_4CD4
	cmp #$01
	jne l_4CDF

; optimize OK (pub.pas), line = 199

	lda #$1C
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 200

	lda #$1D
s_4CE3
	jmp s_4CF0
l_4CDF
	cmp #$02
	jne l_4CEA

; optimize OK (pub.pas), line = 203

	lda #$1E
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 204

	lda #$1F
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 205

	lda #$20
s_4CF0
	jmp s_4D25
l_4CEA
	cmp #$03
	jne l_4CF7

; optimize OK (pub.pas), line = 208

	lda #$21
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 209

	lda #$22
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('GETYESNO', pub.pas), line = 210

	jsr GETYESNO
	lda GETYESNO.RESULT
	jeq @exit
l_4D0B

; optimize OK (pub.pas), line = 211

	lda P
	sta PAYMONEY.PRICE
	lda P+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_4D20

; optimize OK (pub.pas), line = 212

	lda #$23
s_4D25
	jmp s_4D32
l_4CF7
	cmp #$04
	jne l_4D2C

; optimize OK (pub.pas), line = 215

	lda #$24
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 216

	lda #$25
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 217

	lda #$26
s_4D32
	jsr CRT_WRITELN_LOCSTR
l_4D2C
a_0012

; optimize OK (pub.pas), line = 220

	lda #$01
	ldy TIPP
	beq l_0002_e
l_0002_b
	asl @
	dey
	bne l_0002_b
l_0002_e
	sta TMP

; optimize OK (pub.pas), line = 221

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	ora TMP
	sta TMP

; optimize OK (pub.pas), line = 222

	sta adr.PLOPPORTUNITY,y

; optimize FAIL ('WAITFORKEY', pub.pas), line = 223

	jsr WAITFORKEY
	jmp @exit
l_4C20

; optimize OK (pub.pas), line = 229

	lda CURRENTCHOICE
	cmp #$04
	jne l_4D70

; optimize OK (pub.pas), line = 232

	lda #$14
	jsr LOADLOCATION

; optimize OK (pub.pas), line = 234

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	sta TMP

; optimize OK (pub.pas), line = 235

	cmp #$04
	jcc l_4D8E

; optimize OK (pub.pas), line = 237

	lda #$01
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', pub.pas), line = 238

	inx
	lda TMP
	asl @
	tay
	lda adr.RANKNAMES,y
	sta :STACKORIGIN,x
	lda adr.RANKNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (pub.pas), line = 239

	lda #$02
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', pub.pas), line = 240

	jsr WAITFORKEY
	jmp @exit
l_4D8E

; optimize OK (pub.pas), line = 245

	lda #$05
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	jne l_4DAD

; optimize OK (pub.pas), line = 247

	lda #$03
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', pub.pas), line = 248

	jsr WAITFORKEY
	jmp @exit
l_4DAD

; optimize OK (pub.pas), line = 253

	lda #$03
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	inx
	mva #$F4 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	dex
	lda :STACKORIGIN,x
	sta WAGE
	lda :STACKORIGIN+STACKWIDTH,x
	sta WAGE+1
	dex

; optimize OK (pub.pas), line = 254

	lda #$04
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta @CASETMP_0013
	jne l_4DC6
@

; optimize OK (pub.pas), line = 257

	lda #$04
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 258

	lda #$05
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 259

	lda #$06
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 260

	lda #$07
	sta JOBLOCATION

; optimize OK (pub.pas), line = 261

	lda #$03
	sta DURATION

; optimize OK (pub.pas), line = 262

	lda WAGE
	add #$DC
	sta WAGE
	lda WAGE+1
	adc #$05
	sta WAGE+1
	jmp a_0013
l_4DC6
	cmp #$01
	jne l_4DE4

; optimize OK (pub.pas), line = 266

	lda #$07
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 267

	lda #$08
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 268

	lda #$02
	sta DURATION

; optimize OK (pub.pas), line = 269

	lda WAGE
	add #$E8
	sta WAGE
	lda WAGE+1
	adc #$03
	sta WAGE+1

; optimize OK (pub.pas), line = 270

	lda #$0B
	sta JOBLOCATION
	jmp a_0013
l_4DE4
	cmp #$02
	jne l_4E00

; optimize OK (pub.pas), line = 274

	lda #$09
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 275

	lda #$0A
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 276

	lda #$02
	sta DURATION

; optimize OK (pub.pas), line = 277

	lda WAGE
	add #$D0
	sta WAGE
	lda WAGE+1
	adc #$07
	sta WAGE+1

; optimize OK (pub.pas), line = 278

	lda #$0A
	sta JOBLOCATION
	jmp a_0013
l_4E00
	cmp #$03
	jne l_4E1C

; optimize OK (pub.pas), line = 282

	lda #$0B
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 283

	lda #$0C
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 284

	lda #$0D
	jsr CRT_WRITELN_LOCSTR

; optimize OK (pub.pas), line = 285

	lda #$01
	sta DURATION

; optimize OK (pub.pas), line = 286

	lda WAGE
	add #$DC
	sta WAGE
	lda WAGE+1
	adc #$05
	sta WAGE+1

; optimize OK (pub.pas), line = 287

	lda #$10
	sta JOBLOCATION
l_4E1C
a_0013

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', pub.pas), line = 291

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (pub.pas), line = 292

	lda #$0E
	jsr CRT_WRITE_LOCSTR

; optimize OK (pub.pas), line = 293

	lda WAGE
	sta B_CRT.CRT_WRITE.@010185000.NUM
	ldy #$00
	lda WAGE+1
	spl
	dey
	sta B_CRT.CRT_WRITE.@010185000.NUM+1
	sty B_CRT.CRT_WRITE.@010185000.NUM+2
	sty B_CRT.CRT_WRITE.@010185000.NUM+3
	jsr B_CRT.CRT_WRITE.@010185000

; optimize FAIL ('CRT_WRITELN2', pub.pas), line = 294

	inx
	mva #$A0 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize OK (pub.pas), line = 295

	lda #$0F
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('GETYESNO', pub.pas), line = 296

	jsr GETYESNO
	lda GETYESNO.RESULT
	cmp #$01
	jne l_4E53

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', pub.pas), line = 298

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (pub.pas), line = 299

	lda #$10
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', pub.pas), line = 300

	jsr WAITFORKEY

; optimize OK (pub.pas), line = 302

	ldy CURRENTPLAYER
	lda DURATION
	sta adr.PLJOB,y

; optimize OK (pub.pas), line = 303

	tya
	asl @
	tay
	lda WAGE
	sta adr.PLJOBWAGE,y
	lda WAGE+1
	sta adr.PLJOBWAGE+1,y

; optimize OK (pub.pas), line = 304

	lda JOBLOCATION
	sta adr.PLJOBLOCATION,y
	lda #$00
	sta adr.PLJOBLOCATION+1,y

; optimize OK (pub.pas), line = 305

	lda #$11
	sta RESULT
l_4E53
l_4D70
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C71
R	= DATAORIGIN+$0C72
WAGE	= DATAORIGIN+$0C73
DURATION	= DATAORIGIN+$0C75
JOBLOCATION	= DATAORIGIN+$0C76
G	= DATAORIGIN+$0C77
K	= DATAORIGIN+$0C78
Z	= DATAORIGIN+$0C79
TIPP	= DATAORIGIN+$0C7A
HASHIDEOUT	= DATAORIGIN+$0C7B
P	= DATAORIGIN+$0C7C
AL	= DATAORIGIN+$0C7E
W	= DATAORIGIN+$0C80
@CASETMP_0012	= DATAORIGIN+$0C82
@CASETMP_0013	= DATAORIGIN+$0C83

@VarData	= R
@VarDataSize	= 18

	rts						; ret
.endl

.local	STORECHOICES					; FUNCTION

; optimize FAIL ('SHOWLOCATIONHEADER', store.pas), line = 7

	jsr SHOWLOCATIONHEADER

; optimize OK (store.pas), line = 8

	lda #$09
	sta RESULT

; optimize OK (store.pas), line = 12

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$02
	jcs l_4E98

; optimize OK (store.pas), line = 14

	lda #$01
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', store.pas), line = 15

	jsr WAITFORKEY
	jmp @exit
l_4E98

; optimize OK (store.pas), line = 22

	lda LASTLOCATION
	cmp #$09
	jne l_4EB0

; optimize FAIL ('FIGHTPOLICE', store.pas), line = 24

	jsr FIGHTPOLICE
	lda FIGHTPOLICE.RESULT
	sta RESULT
	jmp @exit
l_4EB0

; optimize OK (store.pas), line = 29

	lda CURRENTCHOICE
	cmp #$01
	jne l_4EC9

; optimize OK (store.pas), line = 31

	lda CURRENTPLAYER
	lsr @
	lsr @
	lsr @
	sta TMP

; optimize OK (store.pas), line = 32

	tay
	lda adr.GANGSTERBRUT,y
	cmp #$1E
	jcc l_4EF5x
	lda CURRENTSUBLOCATION
	cmp #$01
	jne l_4EF5
l_4EF5x

; optimize OK (store.pas), line = 33

	lda #$02
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', store.pas), line = 34

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (store.pas), line = 35

	lda #$03
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', store.pas), line = 36

	jsr WAITFORKEY

; optimize FAIL ('FIGHTPOLICE', store.pas), line = 37

	jsr FIGHTPOLICE
	lda FIGHTPOLICE.RESULT
	sta RESULT
	jmp @exit
l_4EF5
l_4EC9

; optimize OK (store.pas), line = 43

	lda CURRENTCHOICE
	cmp #$02
	jne l_4F16

; optimize OK (store.pas), line = 45

	lda CURRENTSUBLOCATION
	cmp #$04
	jeq l_4F35x
	cmp #$03
	jne l_4F35
l_4F35x

; optimize OK (store.pas), line = 46

	lda #$04
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', store.pas), line = 47

	jsr WAITFORKEY
	jmp @exit
l_4F35
l_4F16

; optimize OK (store.pas), line = 53

	lda CURRENTCHOICE
	cmp #$03
	jne l_4F4F

; optimize OK (store.pas), line = 54

	lda CURRENTSUBLOCATION
	cmp #$02
	jeq l_4F6Ex
	cmp #$01
	jne l_4F6E
l_4F6Ex

; optimize OK (store.pas), line = 55

	lda #$05
	jsr CRT_WRITELN_LOCSTR

; optimize OK (store.pas), line = 56

	lda #$06
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', store.pas), line = 57

	jsr WAITFORKEY

; -------------------  ASM Block 00000164  -------------------

 
                lda loc_string_35
                sta adr.FP_GANG+$02
                lda loc_string_35+1
                sta adr.FP_GANG+1+$02
            
; optimize OK (store.pas), line = 66

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (store.pas), line = 67

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	ldy #1
	cmp #$06
	bcs @+
	dey
@
	sty :STACKORIGIN+11
	asl :STACKORIGIN+11
	lda #$03
	add :STACKORIGIN+11
	sta adr.FP_N+$01

; optimize OK (store.pas), line = 68

	lda #$00
	sta K
	ldy adr.FP_N+$01
	dey
	sty @FORTMP_4F9E_0

l_4FA1
; --- ForToDoCondition
	lda @FORTMP_4F9E_0::#$00
	cmp K
	jcc l_4FAF

; optimize FAIL (1, store.pas), line = 69

	inx
	mva K :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta adr.FP_SEX,y
	dex

; --- ForToDoEpilog
	inc K
	jne l_4FA1
l_4FAF

; -------------------  ASM Block 00000165  -------------------

                ldy #$00
            @:
                tya 
                asl 
                tay

                lda loc_string_36
                sta adr.FP_NAME+$20,y
                lda loc_string_36+1
                sta adr.FP_NAME+1+$20,y

                tya
                lsr 
                tay

                lda #30
                sta adr.FP_ENERGY+$10,y
                lda #07
                sta adr.FP_WEAPON+$10,y
                iny
                cpy adr.FP_N+$01
                bne @- 
            
; optimize FAIL ('DOFIGHT', store.pas), line = 102

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_4FCC

; optimize OK (store.pas), line = 104

	lda #$11
	sta RESULT
	jmp @exit
l_4FCC

; optimize FAIL ('SHOWLOCATIONHEADER', store.pas), line = 107

	jsr SHOWLOCATIONHEADER

; optimize OK (store.pas), line = 108

	lda #$07
	jsr CRT_WRITELN_LOCSTR

; optimize OK (store.pas), line = 109

	lda #$08
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', store.pas), line = 110

	jsr WAITFORKEY
l_4F6E
l_4F4F

; optimize OK (store.pas), line = 115

	lda CURRENTCHOICE
	cmp #$04
	jne l_4FEF

; optimize OK (store.pas), line = 116

	lda CURRENTPLAYER
	asl @
	asl @
	asl @
	sta TMP

; optimize OK (store.pas), line = 117

	lda CURRENTSUBLOCATION
	cmp #$03
	jeq l_501Bx
	ldy TMP
	lda adr.GANGSTERINT,y
	cmp #$1E
	jcs l_501B
l_501Bx

; optimize OK (store.pas), line = 118

	lda #$09
	jsr CRT_WRITELN_LOCSTR

; optimize OK (store.pas), line = 119

	lda #$0A
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', store.pas), line = 120

	jsr WAITFORKEY
	jmp @exit
l_501B
l_4FEF

; optimize FAIL ('SHOWLOCATIONHEADER', store.pas), line = 126

	jsr SHOWLOCATIONHEADER

; optimize OK (store.pas), line = 127

	lda #$01
	jsr ADDPOINTS

; optimize OK (store.pas), line = 128

	lda #$C8
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	add #$20
	sta P
	lda #$00
	adc #$03
	sta P+1

; optimize OK (store.pas), line = 129

	lda CURRENTSUBLOCATION
	cmp #$02
	jeq l_504Fx
	cmp #$03
	jne l_504F
l_504Fx

; optimize OK (store.pas), line = 130

	lda P
	sub #$C8
	sta P
	scs
	dec P+1
l_504F

; optimize OK (store.pas), line = 131

	lda CURRENTCHOICE
	cmp #$02
	jne l_506D
	lda P
	add #$58
	sta P
	lda P+1
	adc #$02
	sta P+1
l_506D

; optimize OK (store.pas), line = 133

	lda CURRENTCHOICE
	cmp #$01
	jne l_508B

; optimize OK (store.pas), line = 134

	lda #$0B
	jsr CRT_WRITELN_LOCSTR

; optimize OK (store.pas), line = 135

	lda #$0C
	jsr CRT_WRITE_LOCSTR

; optimize OK (store.pas), line = 136

	lda P
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda P+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('CRT_WRITELN', store.pas), line = 137

	inx
	mva #$73 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
l_508B

; optimize OK (store.pas), line = 140

	lda CURRENTCHOICE
	cmp #$02
	jne l_50A9

; optimize OK (store.pas), line = 141

	lda #$0D
	jsr CRT_WRITELN_LOCSTR

; optimize OK (store.pas), line = 142

	lda P
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda P+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('CRT_WRITELN', store.pas), line = 143

	inx
	mva #$73 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
l_50A9

; optimize OK (store.pas), line = 147

	lda CURRENTCHOICE
	cmp #$03
	jne l_50C5

; optimize OK (store.pas), line = 148

	lda #$0E
	jsr CRT_WRITE_LOCSTR

; optimize OK (store.pas), line = 149

	lda P
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda P+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (store.pas), line = 150

	lda #$0F
	jsr CRT_WRITELN_LOCSTR
l_50C5

; optimize OK (store.pas), line = 153

	lda CURRENTCHOICE
	cmp #$04
	jne l_50E1

; optimize OK (store.pas), line = 154

	lda #$10
	jsr CRT_WRITELN_LOCSTR

; optimize OK (store.pas), line = 155

	lda #$11
	jsr CRT_WRITE_LOCSTR

; optimize OK (store.pas), line = 156

	lda P
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda P+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('CRT_WRITELN', store.pas), line = 157

	inx
	mva #$73 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
l_50E1

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', store.pas), line = 161

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (store.pas), line = 162

	lda #$12
	jsr CRT_WRITELN2_LOCSTR

; optimize OK (store.pas), line = 163

	lda #$13
	jsr CRT_WRITELN_LOCSTR

; optimize OK (store.pas), line = 164

	lda #$14
	jsr CRT_WRITELN_LOCSTR

; optimize OK (store.pas), line = 165

	lda #$15
	jsr CRT_WRITELN2_LOCSTR

; optimize OK (store.pas), line = 166

	lda #$16
	jsr CRT_WRITE_LOCSTR

; optimize OK (store.pas), line = 167

	lda #$01
	sta READVALUE.MINVALUE
	lda #$00
	sta READVALUE.MINVALUE+1
	lda #$03
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta R

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', store.pas), line = 168

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', store.pas), line = 169

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (store.pas), line = 172

	lda R
	cmp #$01
	jne l_5112

; optimize OK (store.pas), line = 173

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (store.pas), line = 174

	lda #$17
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', store.pas), line = 175

	jsr WAITFORKEY
	jmp @exit
l_5112

; optimize OK (store.pas), line = 179

	lda R
	cmp #$02
	jne l_512D

; optimize OK (store.pas), line = 180

	lda CURRENTSUBLOCATION
	jeq l_514Cx
	cmp #$02
	jne l_514C
l_514Cx

; optimize OK (store.pas), line = 181

	lda #$18
	jsr CRT_WRITELN_LOCSTR

; optimize OK (store.pas), line = 182

	lda #$19
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', store.pas), line = 183

	jsr WAITFORKEY

; -------------------  ASM Block 00000166  -------------------

 
                lda loc_string_26
                sta adr.FP_GANG+$02
                lda loc_string_26+1
                sta adr.FP_GANG+1+$02
            
; optimize OK (store.pas), line = 192

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (store.pas), line = 193

	lda #$05
	sta adr.FP_N+$01

; -------------------  ASM Block 00000167  -------------------

                ldy #$00
            @:
                tya 
                asl 
                tay

                lda loc_string_37
                sta adr.FP_NAME+$20,y
                lda loc_string_37+1
                sta adr.FP_NAME+1+$20,y

                tya
                lsr 
                tay

                lda #30
                sta adr.FP_ENERGY+$10,y
                lda #03
                sta adr.FP_WEAPON+$10,y
                iny
                cpy adr.FP_N+$01
                bne @- 
            
; optimize FAIL ('DOFIGHT', store.pas), line = 226

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_516C

; optimize OK (store.pas), line = 228

	lda #$11
	sta RESULT
	jmp @exit
l_516C

; optimize OK (store.pas), line = 231

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY
	jmp l_517F
l_514C

; optimize OK (store.pas), line = 235

	lda #$C8
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	add #$2C
	sta Q
	lda #$00
	adc #$01
	sta Q+1

; optimize OK (store.pas), line = 236

	lda #$1B
	jsr CRT_WRITELN_LOCSTR

; optimize OK (store.pas), line = 237

	lda #$1C
	jsr CRT_WRITELN_LOCSTR

; optimize OK (store.pas), line = 238

	lda Q
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda Q+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('CRT_WRITELN', store.pas), line = 239

	inx
	mva #$A0 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (store.pas), line = 240

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (store.pas), line = 241

	lda Q
	sta ADDMONEY.AMOUNT
	lda Q+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (store.pas), line = 242

	lda #$01
	jsr ADDPOINTS

; optimize FAIL ('WAITFORKEY', store.pas), line = 243

	jsr WAITFORKEY
	jmp @exit
l_517F
l_512D

; optimize OK (store.pas), line = 248

	lda R
	cmp #$03
	jne l_51AE

; optimize OK (store.pas), line = 249

	lda CURRENTSUBLOCATION
	cmp #$03
	jeq l_51CDx
	cmp #$04
	jne l_51CD
l_51CDx

; optimize OK (store.pas), line = 251

	lda #$1D
	jsr CRT_WRITELN_LOCSTR

; optimize OK (store.pas), line = 252

	lda #$1E
	jsr CRT_WRITELN_LOCSTR

; -------------------  ASM Block 00000168  -------------------

 
                lda loc_string_31
                sta adr.FP_GANG+$02
                lda loc_string_31+1
                sta adr.FP_GANG+1+$02
            
; optimize OK (store.pas), line = 260

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (store.pas), line = 261

	sta adr.FP_N+$01

; optimize OK (store.pas), line = 262

	lda adr.FP_NAME+$20
	sta @move.dst
	lda adr.FP_NAME+1+$20
	sta @move.dst+1
	lda LOC_STRING_31
	sta @move.src
	lda LOC_STRING_31+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (store.pas), line = 263

	lda #$06
	sta adr.FP_WEAPON+$10

; optimize OK (store.pas), line = 264

	lda #$1E
	sta adr.FP_ENERGY+$10

; optimize FAIL ('DOFIGHT', store.pas), line = 266

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_51FC

; optimize OK (store.pas), line = 268

	lda #$11
	sta RESULT
	jmp @exit
l_51FC

; optimize OK (store.pas), line = 271

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY
	jmp l_520F
l_51CD

; optimize OK (store.pas), line = 275

	lda #$64
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta Q
	lda #$00
	sta Q+1

; optimize OK (store.pas), line = 276

	lda Q
	asl @
	rol Q+1
	add #$96
	sta Q
	scc
	inc Q+1

; optimize OK (store.pas), line = 277

	lda #$20
	jsr CRT_WRITELN_LOCSTR

; optimize OK (store.pas), line = 278

	lda #$21
	jsr CRT_WRITE_LOCSTR

; optimize OK (store.pas), line = 279

	lda Q
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda Q+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (store.pas), line = 280

	lda #$22
	jsr CRT_WRITE_LOCSTR

; optimize OK (store.pas), line = 281

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (store.pas), line = 282

	lda Q
	sta ADDMONEY.AMOUNT
	lda Q+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize FAIL ('WAITFORKEY', store.pas), line = 283

	jsr WAITFORKEY
l_520F
l_51AE
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C84
R	= DATAORIGIN+$0C85
K	= DATAORIGIN+$0C86
P	= DATAORIGIN+$0C87
Q	= DATAORIGIN+$0C89

@VarData	= R
@VarDataSize	= 6

	rts						; ret
.endl

.local	SUBWAYCHOICES					; FUNCTION

; optimize OK (subway.pas), line = 9

	lda #$0C
	sta RESULT

; optimize FAIL ('SHOWLOCATIONHEADER', subway.pas), line = 10

	jsr SHOWLOCATIONHEADER

; optimize OK (subway.pas), line = 12

	lda CURRENTCHOICE
	cmp #$02
	jne l_524E

; optimize OK (subway.pas), line = 14

	lda #$01
	jsr CRT_WRITELN_LOCSTR

; optimize OK (subway.pas), line = 15

	lda #$02
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('GETYESNO', subway.pas), line = 16

	jsr GETYESNO
	lda GETYESNO.RESULT
	jeq @exit
l_5263

; optimize OK (subway.pas), line = 17

	lda #$32
	sta PAYMONEY.PRICE
	lda #$00
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jeq @exit
l_5277

; optimize OK (subway.pas), line = 18

	lda #$04
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta LOOT

; optimize OK (subway.pas), line = 19

	sta @CASETMP_0014
	cmp #$00
	jne l_528A
@

; optimize OK (subway.pas), line = 21

	lda #$08
	sta I
	lda #$02
	sta J
	sta K
	jmp a_0014
l_528A
	cmp #$01
	jne l_529D

; optimize OK (subway.pas), line = 24

	lda #$04
	sta I
	lda #$01
	sta J
	lda #$05
	sta K
	jmp a_0014
l_529D
	cmp #$02
	jne l_52B0

; optimize OK (subway.pas), line = 27

	lda #$08
	sta I
	lda #$03
	sta J
	lda #$09
	sta K
	jmp a_0014
l_52B0
	cmp #$03
	jne l_52C3

; optimize OK (subway.pas), line = 30

	lda #$04
	sta I
	lda #$07
	sta J
	sta K
l_52C3
a_0014

; optimize OK (subway.pas), line = 34

	ldy CURRENTPLAYER
	lda I
	sta adr.PLMAPPOSX,y

; optimize OK (subway.pas), line = 35

	lda J
	sta adr.PLMAPPOSY,y

; optimize OK (subway.pas), line = 36

	lda K
	sta adr.PLCURRENTMAP,y

; optimize FAIL ('PLACECURRENTPLAYER', subway.pas), line = 37

	jsr PLACECURRENTPLAYER

; optimize OK (subway.pas), line = 38

	lda MAPPOS_X
	sta OLDMAPPOS_X

; optimize OK (subway.pas), line = 39

	lda MAPPOS_Y
	sta OLDMAPPOS_Y

; optimize OK (subway.pas), line = 40

	lda PLAYERPOS_X
	sta OLDPLAYERPOS_X

; optimize OK (subway.pas), line = 41

	lda PLAYERPOS_Y
	sta OLDPLAYERPOS_Y
l_524E

; optimize FAIL ('SHOWLOCATIONHEADER', subway.pas), line = 44

	jsr SHOWLOCATIONHEADER

; optimize OK (subway.pas), line = 45

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$02
	jcc l_5321

; optimize OK (subway.pas), line = 46

	lda #$03
	jsr CRT_WRITE_LOCSTR
l_5321

; optimize OK (subway.pas), line = 47

	lda #$00
	sta SHOWWEAPONS

; optimize FAIL ('SELECTGANGSTER', subway.pas), line = 48

	jsr SELECTGANGSTER

; optimize OK (subway.pas), line = 49

	lda CURRENTGANGSTER
	cmp #$63
	jeq @exit
l_533D

; optimize OK (subway.pas), line = 51

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$02
	jcc l_5355

; optimize FAIL ('SHOWLOCATIONHEADER', subway.pas), line = 52

	jsr SHOWLOCATIONHEADER
l_5355

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', subway.pas), line = 53

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (subway.pas), line = 54

	lda #$04
	jsr CRT_WRITELN_LOCSTR

; optimize OK (subway.pas), line = 55

	lda #$5A
	jsr WAITFRAMES

; optimize OK (subway.pas), line = 59

	ldy CURRENTGANGSTER
	lda adr.GANGSTERINT,y
	jsr SYSTEM.RANDOM.@010180000
	ldy #1
	lda SYSTEM.RANDOM.@010180000.RESULT
	cmp #$0A
	bcc @+
	dey
@
	tya
	sta HOPS

; optimize OK (subway.pas), line = 61

	lda #$11
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta TMP

; optimize OK (subway.pas), line = 62

	lsr @
	sta LOOT

; optimize OK (subway.pas), line = 63

	ldy CURRENTSUBLOCATION
	iny
	sty TMP

; optimize OK (subway.pas), line = 64

	lda TMP
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta TMP

; optimize OK (subway.pas), line = 65

	lda LOOT
	sub TMP
	sta LOOT

; optimize OK (subway.pas), line = 67

	jpl l_53AC
	lda #$00
	sta LOOT
l_53AC

; optimize OK (subway.pas), line = 68

	lda HOPS
	cmp #$01
	jne l_53C5
	lda #$00
	sta LOOT
l_53C5

; optimize OK (subway.pas), line = 69

	lda #$00
	sta VALUE
	sta VALUE+1

; optimize OK (subway.pas), line = 70

	lda LOOT
	sta @CASETMP_0015
	jne l_53DB
@

; optimize OK (subway.pas), line = 71

	lda #$05
	jmp s_53E8
l_53DB
	cmp #$01
	beq @+
	cmp #$02
	jne l_53E6
@

; optimize OK (subway.pas), line = 72

	lda #$06
s_53E8
	jmp s_53F1
l_53E6
	cmp #$03
	jne l_53EF

; optimize OK (subway.pas), line = 73

	lda #$07
s_53F1
	jsr CRT_WRITELN_LOCSTR
	jmp a_0015
l_53EF
	cmp #$04
	jne l_53F8

; optimize OK (subway.pas), line = 75

	lda #$08
	jsr CRT_WRITELN_LOCSTR

; optimize OK (subway.pas), line = 76

	lda #$32
	jmp s_540B
l_53F8
	cmp #$05
	jne l_5405

; optimize OK (subway.pas), line = 79

	lda #$09
	jsr CRT_WRITELN_LOCSTR

; optimize OK (subway.pas), line = 80

	lda #$FA
s_540B
	sta VALUE
	lda #$00
	sta VALUE+1
	jmp a_0015
l_5405
	cmp #$06
	jne l_5412

; optimize OK (subway.pas), line = 83

	lda #$0A
	jsr CRT_WRITELN_LOCSTR

; optimize OK (subway.pas), line = 84

	lda #$F4
	sta VALUE
	lda #$01
	sta VALUE+1
	jmp a_0015
l_5412
	cmp #$07
	jne l_541F

; optimize OK (subway.pas), line = 87

	lda #$0B
	jsr CRT_WRITELN_LOCSTR

; optimize OK (subway.pas), line = 88

	lda #$20
	sta VALUE
	lda #$03
	sta VALUE+1
	jmp a_0015
l_541F
	cmp #$08
	jne l_542C

; optimize OK (subway.pas), line = 91

	lda #$0C
	jsr CRT_WRITELN_LOCSTR

; optimize OK (subway.pas), line = 92

	ldy CURRENTPLAYER
	lda adr.PLSTUFF,y
	ora #$20
	sta adr.PLSTUFF,y

; optimize FAIL ('WAITFORKEY', subway.pas), line = 93

	jsr WAITFORKEY
	jmp @exit
l_542C
a_0015

; optimize FAIL ('WAITFORKEY', subway.pas), line = 97

	jsr WAITFORKEY

; optimize OK (subway.pas), line = 98

	lda LOOT
	sub #$01
	svc
	eor #$80
	jpl l_545C

; optimize FAIL ('GOTCAUGHT', subway.pas), line = 99

	jsr GOTCAUGHT

; optimize OK (subway.pas), line = 100

	lda #$11
	sta RESULT
	jmp @exit
l_545C

; optimize OK (subway.pas), line = 103

	lda CURRENTCHOICE
	cmp #$02
	jne l_5476
	jsr LOADMAP
l_5476

; optimize OK (subway.pas), line = 104

	lda VALUE
	sta ADDMONEY.AMOUNT
	lda VALUE+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (subway.pas), line = 105

	lda #$01
	jsr ADDPOINTS
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C8C
LOOT	= DATAORIGIN+$0C8D
VALUE	= DATAORIGIN+$0C8E
HOPS	= DATAORIGIN+$0C90
I	= DATAORIGIN+$0C91
J	= DATAORIGIN+$0C92
K	= DATAORIGIN+$0C93
@CASETMP_0014	= DATAORIGIN+$0C94
@CASETMP_0015	= DATAORIGIN+$0C95

@VarData	= LOOT
@VarDataSize	= 9

	rts						; ret
.endl

.local	CENTRALSTATIONCHOICES				; FUNCTION

; optimize OK (centralstation.pas), line = 6

	lda #$17
	sta RESULT

; optimize OK (centralstation.pas), line = 7

	lda CURRENTCHOICE
	cmp #$01
	jne l_5499

; optimize OK (centralstation.pas), line = 9

	lda #$07
	jsr LOADLOCATION

; optimize OK (centralstation.pas), line = 10

	lda #$07
	jsr SHOWLOCATION
	lda SHOWLOCATION.RESULT
	sta CURRENTCHOICE

; optimize OK (centralstation.pas), line = 11

	cmp LOC_NOPTIONS
	jne l_54B5

; optimize OK (centralstation.pas), line = 13

	lda #$0F
	sta CURRENTLOCATION
	jmp @exit
l_54B5

; optimize FAIL ('PUBCHOICES', centralstation.pas), line = 16

	jsr PUBCHOICES
	lda PUBCHOICES.RESULT
	sta RESULT
	jmp @exit
l_5499

; optimize OK (centralstation.pas), line = 20

	lda CURRENTCHOICE
	cmp #$02
	jne l_54D4

; optimize OK (centralstation.pas), line = 22

	lda #$0C
	jsr LOADLOCATION

; optimize OK (centralstation.pas), line = 23

	lda #$01
	sta CURRENTCHOICE

; optimize FAIL ('SUBWAYCHOICES', centralstation.pas), line = 24

	jsr SUBWAYCHOICES
	lda SUBWAYCHOICES.RESULT
	sta RESULT
	jmp @exit
l_54D4

; optimize OK (centralstation.pas), line = 28

	lda CURRENTCHOICE
	cmp #$03
	jne l_54F3

; optimize FAIL ('SHOWLOCATIONHEADER', centralstation.pas), line = 30

	jsr SHOWLOCATIONHEADER

; optimize OK (centralstation.pas), line = 31

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$01
	jne l_550E

; optimize OK (centralstation.pas), line = 33

	lda #$01
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', centralstation.pas), line = 34

	jsr WAITFORKEY
	jmp @exit
l_550E

; optimize OK (centralstation.pas), line = 38

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$FE
	sta adr.PLOPPORTUNITY,y

; optimize OK (centralstation.pas), line = 40

	lda adr.PLNGANGSTERS,y
	cmp #$03
	jcs l_5539

; optimize OK (centralstation.pas), line = 41

	lda #$02
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', centralstation.pas), line = 42

	jsr WAITFORKEY
	jmp @exit
l_5539

; optimize OK (centralstation.pas), line = 46

	lda #$03
	jsr CRT_WRITELN_LOCSTR

; optimize OK (centralstation.pas), line = 47

	lda #$04
	jsr CRT_WRITELN_LOCSTR

; optimize OK (centralstation.pas), line = 48

	lda #$05
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', centralstation.pas), line = 49

	jsr WAITFORKEY

; -------------------  ASM Block 00000169  -------------------

 
            lda loc_string_7
            sta adr.FP_GANG+$02
            lda loc_string_7+1
            sta adr.FP_GANG+1+$02
        
; optimize OK (centralstation.pas), line = 59

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (centralstation.pas), line = 60

	lda #$03
	sta adr.FP_N+$01

; -------------------  ASM Block 00000170  -------------------

            ldy #$00
        @:
            tya 
            asl 
            tay

            lda loc_string_8
            sta adr.FP_NAME+$20,y
            lda loc_string_8+1
            sta adr.FP_NAME+1+$20,y

            tya
            lsr 
            tay

            lda #30
            sta adr.FP_ENERGY+$10,y
            lda #7
            sta adr.FP_WEAPON+$10,y
            iny
            cpy adr.FP_N+$01
            bne @- 
        
; optimize FAIL ('DOFIGHT', centralstation.pas), line = 93

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_5560

; optimize FAIL ('GOTCAUGHT', centralstation.pas), line = 95

	jsr GOTCAUGHT

; optimize OK (centralstation.pas), line = 96

	lda #$11
	sta RESULT
	jmp @exit
l_5560

; optimize OK (centralstation.pas), line = 99

	lda #$88
	sta CRACKEDBANK.P
	lda #$13
	sta CRACKEDBANK.P+1
	jsr CRACKEDBANK
l_54F3
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C96
R	= DATAORIGIN+$0C97
K	= DATAORIGIN+$0C98
OUTCOME	= DATAORIGIN+$0C99

@VarData	= R
@VarDataSize	= 3

	rts						; ret
.endl

.local	MAJORCHOICES					; FUNCTION

; optimize OK (major.pas), line = 5

	lda #$18
	jsr LOADLOCATION

; optimize FAIL ('SHOWLOCATIONHEADER', major.pas), line = 6

	jsr SHOWLOCATIONHEADER

; optimize OK (major.pas), line = 8

	lda #$06
	jsr CRT_WRITELN_LOCSTR

; optimize OK (major.pas), line = 9

	lda #$07
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', major.pas), line = 10

	jsr WAITFORKEY

; optimize OK (major.pas), line = 12

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$EF
	sta adr.PLOPPORTUNITY,y

; -------------------  ASM Block 00000171  -------------------

 
            lda loc_string_8
            sta adr.FP_GANG+$02
            lda loc_string_8+1
            sta adr.FP_GANG+1+$02
        
; optimize OK (major.pas), line = 22

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (major.pas), line = 23

	lda #$05
	sta adr.FP_N+$01

; -------------------  ASM Block 00000172  -------------------

        ldy #$00
    @:
        tya 
        asl 
        tay

        lda loc_string_12
        sta adr.FP_NAME+$20,y
        lda loc_string_12+1
        sta adr.FP_NAME+1+$20,y

        tya
        lsr 
        tay

        lda #20
        sta adr.FP_ENERGY+$10,y
        lda #07
        sta adr.FP_WEAPON+$10,y
        iny
        cpy adr.FP_N+$01
        bne @- 
    
; optimize FAIL ('DOFIGHT', major.pas), line = 55

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_55A2

; optimize FAIL ('GOTCAUGHT', major.pas), line = 57

	jsr GOTCAUGHT

; optimize OK (major.pas), line = 58

	lda #$11
	sta RESULT
	jmp @exit
l_55A2

; -------------------  ASM Block 00000173  -------------------

 
        lda loc_string_9
        sta adr.FP_GANG+$02
        lda loc_string_9+1
        sta adr.FP_GANG+1+$02
    
; optimize OK (major.pas), line = 70

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (major.pas), line = 71

	sta adr.FP_N+$01

; optimize OK (major.pas), line = 72

	lda adr.FP_NAME+$20
	sta @move.dst
	lda adr.FP_NAME+1+$20
	sta @move.dst+1
	lda LOC_STRING_9
	sta @move.src
	lda LOC_STRING_9+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (major.pas), line = 73

	lda #$1E
	sta adr.FP_ENERGY+$10

; optimize OK (major.pas), line = 74

	lda #$01
	sta adr.FP_WEAPON+$10

; optimize OK (major.pas), line = 75

	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta TMP

; optimize OK (major.pas), line = 76

	sta adr.FP_SEX+$10

; optimize FAIL ('DOFIGHT', major.pas), line = 79

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_55E0

; optimize FAIL ('GOTCAUGHT', major.pas), line = 81

	jsr GOTCAUGHT

; optimize OK (major.pas), line = 82

	lda #$11
	sta RESULT
	jmp @exit
l_55E0

; optimize FAIL ('SHOWLOCATIONHEADER', major.pas), line = 86

	jsr SHOWLOCATIONHEADER

; optimize OK (major.pas), line = 87

	lda #$0A
	jsr CRT_WRITELN_LOCSTR

; optimize OK (major.pas), line = 88

	lda #$0B
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', major.pas), line = 89

	jsr WAITFORKEY

; optimize OK (major.pas), line = 90

	lda #$58
	sta ADDMONEY.AMOUNT
	lda #$1B
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (major.pas), line = 92

	lda #$04
	jsr ADDPOINTS

; optimize OK (major.pas), line = 93

	ldy CURRENTPLAYER
	lda #$01
	sta adr.PLKILLEDMAJOR,y

; optimize OK (major.pas), line = 94

	sta adr.PLFORGEDID,y
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C9A
K	= DATAORIGIN+$0C9B

@VarData	= K
@VarDataSize	= 1

	rts						; ret
.endl

.local	MONEYTRANSPORTERCHOICES				; FUNCTION

; optimize OK (moneytransporter.pas), line = 4

	lda #$03
	jsr LOADLOCATION

; optimize FAIL ('SHOWLOCATIONHEADER', moneytransporter.pas), line = 5

	jsr SHOWLOCATIONHEADER

; optimize OK (moneytransporter.pas), line = 7

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$03
	jcs l_561C

; optimize OK (moneytransporter.pas), line = 9

	lda #$01
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', moneytransporter.pas), line = 10

	jsr WAITFORKEY

; optimize OK (moneytransporter.pas), line = 11

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$FB
	sta adr.PLOPPORTUNITY,y

; optimize FAIL ('LOADMAP', moneytransporter.pas), line = 12

	jsr LOADMAP
	jmp @exit
l_561C

; optimize OK (moneytransporter.pas), line = 16

	lda #$02
	jsr CRT_WRITELN_LOCSTR

; optimize OK (moneytransporter.pas), line = 17

	lda #$03
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', moneytransporter.pas), line = 18

	jsr WAITFORKEY

; -------------------  ASM Block 00000174  -------------------

 
        lda loc_string_4
        sta adr.FP_GANG+$02
        lda loc_string_4+1
        sta adr.FP_GANG+1+$02
    
; optimize OK (moneytransporter.pas), line = 28

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (moneytransporter.pas), line = 29

	lda #$0A
	sta adr.FP_N+$01

; -------------------  ASM Block 00000175  -------------------

        ldy #$00
    @:
        tya 
        asl 
        tay

        lda loc_string_5
        sta adr.FP_NAME+$20,y
        lda loc_string_5+1
        sta adr.FP_NAME+1+$20,y

        tya
        lsr 
        tay

        lda #50
        sta adr.FP_ENERGY+$10,y
        lda #07
        sta adr.FP_WEAPON+$10,y
        iny
        cpy adr.FP_N+$01
        bne @- 
    
; optimize OK (moneytransporter.pas), line = 63

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$FB
	sta adr.PLOPPORTUNITY,y

; optimize FAIL ('DOFIGHT', moneytransporter.pas), line = 64

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_5662

; optimize FAIL ('GOTCAUGHT', moneytransporter.pas), line = 66

	jsr GOTCAUGHT

; optimize OK (moneytransporter.pas), line = 67

	lda #$11
	sta RESULT
	jmp @exit
l_5662

; optimize OK (moneytransporter.pas), line = 70

	ldy CURRENTPLAYER
	lda #$01
	sta adr.PLMONEYTRANSPORTER,y

; optimize OK (moneytransporter.pas), line = 71

	lda #$10
	sta CRACKEDBANK.P
	lda #$27
	sta CRACKEDBANK.P+1
	jsr CRACKEDBANK
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C9C

	rts						; ret
.endl

.local	PRINTMAPSTATUS					; PROCEDURE

; optimize OK (map.pas), line = 9

	lda MAPRELOADED
	jne l_5689

; optimize OK (map.pas), line = 11

	lda #$00
	ldy #256-240
	sta:rne $DEF8+240-256,y+

; optimize OK (map.pas), line = 12

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	sta Z

; optimize OK (map.pas), line = 13

	asl @
	tay
	lda adr.RANKNAMES+1,y
	sta :bp+1
	lda adr.RANKNAMES,y
	tay
	lda (:bp),y
	add #$03
	sta L

; optimize OK (map.pas), line = 14

	lda CURRENTPLAYER
	asl @
	asl @
	asl @
	sta I

; optimize OK (map.pas), line = 15

	asl @
	tay
	lda adr.GANGSTERNAMES+1,y
	sta :bp+1
	lda adr.GANGSTERNAMES,y
	tay
	lda L
	add (:bp),y
	sta P

; optimize OK (map.pas), line = 16

	lda #$28
	sub P
	sta TMP

; optimize OK (map.pas), line = 17

	lsr TMP

; optimize OK (map.pas), line = 18

	lda TMP
	sta B_CRT.CRT_GOTOXY.X
	lda #$13
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 19

	inx
	lda I
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 20

	inx
	mva #$9A :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 21

	inx
	lda Z
	asl @
	tay
	lda adr.RANKNAMES,y
	sta :STACKORIGIN,x
	lda adr.RANKNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 26

	lda #$09
	jsr B_CRT.CRT_WRITE.@010186000

; optimize OK (map.pas), line = 27

	lda #$00
	sta B_CRT.CRT_INVERT.X
	lda #$13
	sta B_CRT.CRT_INVERT.Y
	lda B_CRT.CRT_SCREENWIDTH
	sta B_CRT.CRT_INVERT.WIDTH
	jsr B_CRT.CRT_INVERT

; optimize OK (map.pas), line = 29

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$14
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 30

	inx
	mva MAP_STRING_WEAPON :STACKORIGIN,x
	mva MAP_STRING_WEAPON+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 31

	ldy I
	lda adr.GANGSTERWEAPON,y
	sta Z

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 32

	inx
	lda Z
	asl @
	tay
	lda adr.WEAPONNAMES,y
	sta :STACKORIGIN,x
	lda adr.WEAPONNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 34

	lda #$1C
	sta B_CRT.CRT_GOTOXY.X
	lda #$14
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 35

	inx
	mva MAP_STRING_GANGSTER :STACKORIGIN,x
	mva MAP_STRING_GANGSTER+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 36

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	sub #$01
	sta TMP

; optimize OK (map.pas), line = 37

	jsr B_CRT.CRT_WRITE.@010180000

; optimize OK (map.pas), line = 39

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$15
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 40

	inx
	mva MAP_STRING_CAR :STACKORIGIN,x
	mva MAP_STRING_CAR+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 42

	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	sta Z

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 43

	inx
	lda Z
	asl @
	tay
	lda adr.CARNAMES,y
	sta :STACKORIGIN,x
	lda adr.CARNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 45

	lda #$28
	sub #$03
	sub LEN_STRING_BRIBE
	sta I

; optimize OK (map.pas), line = 46

	ldy CURRENTPLAYER
	lda adr.PLBRIBE,y
	cmp #$0A
	jcs l_574A
	inc I
l_574A

; optimize OK (map.pas), line = 47

	lda I
	sta B_CRT.CRT_GOTOXY.X
	lda #$15
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 48

	inx
	mva MAP_STRING_BRIBE :STACKORIGIN,x
	mva MAP_STRING_BRIBE+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 49

	ldy CURRENTPLAYER
	lda adr.PLBRIBE,y
	jsr B_CRT.CRT_WRITE.@010180000

; optimize OK (map.pas), line = 51

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$16
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 52

	inx
	mva MAP_STRING_RENT :STACKORIGIN,x
	mva MAP_STRING_RENT+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 53

	ldy CURRENTPLAYER
	lda adr.PLRENTMONTHS,y
	jsr B_CRT.CRT_WRITE.@010180000

; optimize OK (map.pas), line = 55

	lda #$0F
	sta B_CRT.CRT_GOTOXY.X
	lda #$16
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 56

	inx
	mva MAP_STRING_STEPS :STACKORIGIN,x
	mva MAP_STRING_STEPS+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 57

	ldy CURRENTPLAYER
	lda adr.PLSTEPS,y
	sta TMP

; optimize OK (map.pas), line = 58

	jsr B_CRT.CRT_WRITE.@010180000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 59

	inx
	mva #$B6 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 60

	ldy CURRENTPLAYER
	lda adr.PLALCOHOL,y
	sta Z

; optimize OK (map.pas), line = 61

	lda #$1D
	sta I

; optimize OK (map.pas), line = 62

	lda Z
	cmp #$0A
	jcs l_57A7
	inc I
l_57A7

; optimize OK (map.pas), line = 63

	lda Z
	cmp #$64
	jcs l_57C6
	inc I
l_57C6

; optimize OK (map.pas), line = 64

	lda I
	sta B_CRT.CRT_GOTOXY.X
	lda #$16
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 65

	inx
	mva MAP_STRING_CARGO :STACKORIGIN,x
	mva MAP_STRING_CARGO+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 66

	lda Z
	jsr B_CRT.CRT_WRITE.@010180000

; optimize OK (map.pas), line = 68

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$17
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 69

	inx
	mva MAP_STRING_MONEY :STACKORIGIN,x
	mva MAP_STRING_MONEY+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 70

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sta B_CRT.CRT_WRITE.@010185000.NUM
	lda adr.PLMONEY+1,y
	sta B_CRT.CRT_WRITE.@010185000.NUM+1
	lda adr.PLMONEY+2,y
	sta B_CRT.CRT_WRITE.@010185000.NUM+2
	lda adr.PLMONEY+3,y
	sta B_CRT.CRT_WRITE.@010185000.NUM+3
	jsr B_CRT.CRT_WRITE.@010185000

; optimize OK (map.pas), line = 72

	lda #$17
	sta B_CRT.CRT_GOTOXY.X
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 73

	inx
	mva MAP_STRING_CREDIT :STACKORIGIN,x
	mva MAP_STRING_CREDIT+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 74

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN,y
	sta W
	lda adr.PLLOAN+1,y
	sta W+1

; optimize OK (map.pas), line = 75

	lda W
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda W+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (map.pas), line = 76

	lda #$23
	sta B_CRT.CRT_GOTOXY.X
	lda #$17
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (map.pas), line = 77

	lda #$08
	jsr B_CRT.CRT_WRITE.@010186000

; optimize OK (map.pas), line = 78

	ldy CURRENTPLAYER
	lda adr.PLLOANTIME,y
	sta TMP

; optimize OK (map.pas), line = 79

	jsr B_CRT.CRT_WRITE.@010180000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 80

	inx
	mva #$BA :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 81

	lda #$01
	sta MAPRELOADED
l_5689

; optimize FAIL ('B_SYSTEM.WAITFRAME', map.pas), line = 83

	jsr B_SYSTEM.WAITFRAME

; optimize OK (map.pas), line = 84

	lda #$0F
	sta B_CRT.CRT_GOTOXY.X
	lda #$16
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 85

	inx
	mva MAP_STRING_STEPS :STACKORIGIN,x
	mva MAP_STRING_STEPS+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (map.pas), line = 86

	ldy CURRENTPLAYER
	lda adr.PLSTEPS,y
	sta TMP

; optimize OK (map.pas), line = 87

	jsr B_CRT.CRT_WRITE.@010180000

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', map.pas), line = 88

	inx
	mva #$B6 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; ------------------------------------------------------------

L	= DATAORIGIN+$0C9D
Z	= DATAORIGIN+$0C9E
I	= DATAORIGIN+$0C9F
P	= DATAORIGIN+$0CA0
W	= DATAORIGIN+$0CA1

@VarData	= L
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DRAWMAJORMONEY					; PROCEDURE

; optimize OK (map.pas), line = 95

	lda CURRENTMAP
	cmp #$07
	jne l_5841

; optimize OK (map.pas), line = 101

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$04
	jne l_585B

; optimize OK (map.pas), line = 104

	lda #$58
	sta $E242
	sta $E242+1

; optimize OK (map.pas), line = 105

	sta $E244
	sta $E244+1

; optimize OK (map.pas), line = 106

	sta $E246
	sta $E246+1

; optimize OK (map.pas), line = 108

	lda #$04
	sta $DE42

; optimize OK (map.pas), line = 109

	sta $DE44

; optimize OK (map.pas), line = 110

	sta $DE46

; optimize OK (map.pas), line = 111

	lda #$05
	sta $DE43

; optimize OK (map.pas), line = 112

	sta $DE45

; optimize OK (map.pas), line = 113

	sta $DE47

; optimize OK (map.pas), line = 115

	lda #$2E
	sta $E26A
	sta $E26A+1

; optimize OK (map.pas), line = 116

	sta $E26C
	sta $E26C+1

; optimize OK (map.pas), line = 117

	sta $E26E
	sta $E26E+1

; optimize OK (map.pas), line = 119

	lda #$1C
	sta $DE6A

; optimize OK (map.pas), line = 120

	sta $DE6C

; optimize OK (map.pas), line = 121

	sta $DE6E

; optimize OK (map.pas), line = 122

	sta $DE6B

; optimize OK (map.pas), line = 123

	sta $DE6D

; optimize OK (map.pas), line = 124

	sta $DE6F
	jmp l_589B
l_585B

; optimize OK (map.pas), line = 130

	lda #$4D
	sta $E242
	sta $E242+1

; optimize OK (map.pas), line = 131

	sta $E244
	sta $E244+1

; optimize OK (map.pas), line = 132

	sta $E246
	sta $E246+1

; optimize OK (map.pas), line = 133

	sta $E26A
	sta $E26A+1

; optimize OK (map.pas), line = 134

	sta $E26C
	sta $E26C+1

; optimize OK (map.pas), line = 135

	sta $E26E
	sta $E26E+1

; optimize OK (moneytransporter_poke.pas), line = 1

	lda #$49
	sta $DE42
	lda #$4A
	sta $DE42+1

; optimize OK (moneytransporter_poke.pas), line = 2

	lda #$4B
	sta $DE44
	lda #$4C
	sta $DE44+1

; optimize OK (moneytransporter_poke.pas), line = 3

	lda #$4D
	sta $DE46
	lda #$4E
	sta $DE46+1

; optimize OK (moneytransporter_poke.pas), line = 4

	lda #$55
	sta $DE6A
	lda #$56
	sta $DE6A+1

; optimize OK (moneytransporter_poke.pas), line = 5

	lda #$57
	sta $DE6C
	lda #$58
	sta $DE6C+1

; optimize OK (moneytransporter_poke.pas), line = 6

	lda #$59
	sta $DE6E
	lda #$5A
	sta $DE6E+1
l_589B

; optimize OK (map.pas), line = 142

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$10
	jne l_58D8

; optimize OK (map.pas), line = 146

	lda #$58
	sta $E10C
	sta $E10C+1

; optimize OK (map.pas), line = 147

	sta $E10E
	sta $E10E+1

; optimize OK (map.pas), line = 149

	lda #$2E
	sta $E134
	sta $E134+1

; optimize OK (map.pas), line = 150

	sta $E136
	sta $E136+1

; optimize OK (map.pas), line = 152

	lda #$04
	sta $DD0C

; optimize OK (map.pas), line = 153

	sta $DD0E

; optimize OK (map.pas), line = 154

	sta $DD34

; optimize OK (map.pas), line = 155

	sta $DD36

; optimize OK (map.pas), line = 156

	lda #$05
	sta $DD0D

; optimize OK (map.pas), line = 157

	sta $DD0F

; optimize OK (map.pas), line = 158

	sta $DD35

; optimize OK (map.pas), line = 159

	sta $DD37

; optimize OK (map.pas), line = 161

	lda #$2E
	sta $E15C
	sta $E15C+1

; optimize OK (map.pas), line = 162

	sta $E15E
	sta $E15E+1

; optimize OK (map.pas), line = 163

	lda #$1C
	sta $DD5C

; optimize OK (map.pas), line = 164

	sta $DD5E

; optimize OK (map.pas), line = 165

	sta $DD5D

; optimize OK (map.pas), line = 166

	sta $DD5F
	jmp l_5918
l_58D8

; optimize OK (map.pas), line = 172

	lda #$4E
	sta $E10C
	sta $E10C+1

; optimize OK (map.pas), line = 173

	sta $E10E
	sta $E10E+1

; optimize OK (map.pas), line = 176

	sta $E134
	sta $E134+1

; optimize OK (map.pas), line = 177

	sta $E136
	sta $E136+1

; optimize OK (map.pas), line = 178

	sta $E15C
	sta $E15C+1

; optimize OK (map.pas), line = 179

	sta $E15E
	sta $E15E+1

; optimize OK (major_poke.pas), line = 1

	lda #$29
	sta $DD0C
	lda #$2A
	sta $DD0C+1

; optimize OK (major_poke.pas), line = 2

	lda #$2B
	sta $DD0E
	lda #$2C
	sta $DD0E+1

; optimize OK (major_poke.pas), line = 3

	lda #$29
	sta $DD34
	lda #$35
	sta $DD34+1

; optimize OK (major_poke.pas), line = 4

	lda #$36
	sta $DD36
	lda #$37
	sta $DD36+1

; optimize OK (major_poke.pas), line = 5

	lda #$1C
	sta $DD5C
	lda #$3E
	sta $DD5C+1

; optimize OK (major_poke.pas), line = 6

	lda #$3F
	sta $DD5E
	lda #$40
	sta $DD5E+1
l_5918
l_5841

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PRELOADMAP					; PROCEDURE

; optimize FAIL ('BLACKCONSOLE', map.pas), line = 191

	jsr BLACKCONSOLE

; optimize OK (map.pas), line = 192

	lda #$41
	add CURRENTMAP
	sta adr.FNTNAME+$01

; optimize OK (map.pas), line = 193

	lda FNTNAME
	sta LOADXAPL.FNAME
	lda FNTNAME+1
	sta LOADXAPL.FNAME+1
	lda #$00
	sta LOADXAPL.OUTPUTPOINTER
	lda #$D8
	sta LOADXAPL.OUTPUTPOINTER+1
	jsr LOADXAPL

; optimize FAIL ('CLEARSPRITES', map.pas), line = 194

	jsr CLEARSPRITES

; optimize OK (map.pas), line = 195

	lda #$00
	jsr PAINTPLAYER

; optimize FAIL ('DRAWMAJORMONEY', map.pas), line = 198

	jsr DRAWMAJORMONEY

; optimize OK (map.pas), line = 199

	lda #$00
	sta MAPRELOADED

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADMAP						; PROCEDURE

; optimize FAIL ('PRELOADMAP', map.pas), line = 206

	jsr PRELOADMAP

; optimize FAIL ('ENABLEMAPCONSOLE', map.pas), line = 207

	jsr ENABLEMAPCONSOLE

; optimize FAIL ('PRINTMAPSTATUS', map.pas), line = 208

	jsr PRINTMAPSTATUS

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHANGEMAP					; PROCEDURE

; optimize OK (map.pas), line = 216

	lda PLAYERPOS_X
	cmp #$CB
	jcc l_5977

; optimize OK (map.pas), line = 219

	lda #$31
	sta PLAYERPOS_X

; optimize OK (map.pas), line = 220

	lda #$00
	sta MAPPOS_X

; optimize OK (map.pas), line = 221

	lda CURRENTMAP
	cmp #$04
	jeq l_599E
	cmp #$09
	jeq l_599E

; optimize OK (map.pas), line = 223

	inc CURRENTMAP

; optimize FAIL ('LOADMAP', map.pas), line = 224

	jsr LOADMAP
	jmp @exit
l_599E
l_5977

; optimize OK (map.pas), line = 229

	lda PLAYERPOS_X
	cmp #$2F
	jcs l_59C0

; optimize OK (map.pas), line = 232

	lda #$C9
	sta PLAYERPOS_X

; optimize OK (map.pas), line = 233

	lda #$13
	sta MAPPOS_X

; optimize OK (map.pas), line = 234

	lda CURRENTMAP
	jeq l_59E7
	cmp #$05
	jeq l_59E7

; optimize OK (map.pas), line = 236

	dec CURRENTMAP

; optimize FAIL ('LOADMAP', map.pas), line = 237

	jsr LOADMAP
	jmp @exit
l_59E7
l_59C0

; optimize OK (map.pas), line = 242

	lda PLAYERPOS_Y
	cmp #$AD
	jcc l_5A09

; optimize OK (map.pas), line = 244

	lda #$24
	sta PLAYERPOS_Y

; optimize OK (map.pas), line = 245

	lda #$00
	sta MAPPOS_Y

; optimize OK (map.pas), line = 246

	lda CURRENTMAP
	cmp #$05
	jcs l_5A24

; optimize OK (map.pas), line = 248

	adc #$05
	sta CURRENTMAP

; optimize FAIL ('LOADMAP', map.pas), line = 249

	jsr LOADMAP
	jmp @exit
l_5A24
l_5A09

; optimize OK (map.pas), line = 254

	lda PLAYERPOS_Y
	cmp #$23
	jcs l_5A46

; optimize OK (map.pas), line = 256

	lda #$AC
	sta PLAYERPOS_Y

; optimize OK (map.pas), line = 257

	lda #$11
	sta MAPPOS_Y

; optimize OK (map.pas), line = 258

	lda CURRENTMAP
	cmp #$05
	jcc l_5A61

; optimize OK (map.pas), line = 260

	sbc #$05
	sta CURRENTMAP

; optimize FAIL ('LOADMAP', map.pas), line = 261

	jsr LOADMAP
	jmp @exit
l_5A61
l_5A46

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	M_READSTRINGI					; PROCEDURE

	mwy R :bp2
	ldy #$00
	mva #$00 (:bp2),y

; --- RepeatUntilProlog
l_5A76

; optimize FAIL ('B_CRT.CRT_READCHARI', setup_game.pas), line = 11

	jsr B_CRT.CRT_READCHARI
	lda B_CRT.CRT_READCHARI.RESULT
	sta A

; optimize OK (setup_game.pas), line = 12

	cmp #$DB
	jeq @exit
l_5A8C

; optimize OK (setup_game.pas), line = 13

	lda A
	cmp #$7E
	jne l_5AAE
	mwy R :bp2
	ldy #$00
	lda (:bp2),y
	jeq l_5AAE

; optimize FAIL (0, setup_game.pas), line = 14

	lda B_CRT.CRT_CURSOR
	bne @+
	dec B_CRT.CRT_CURSOR+1
@
	dec B_CRT.CRT_CURSOR

; optimize OK (setup_game.pas), line = 15

	ldy B_CRT.CRT_CURSOR+1
	sty :bp+1
	ldy B_CRT.CRT_CURSOR
	lda #$00
	sta (:bp),y

; optimize OK (setup_game.pas), line = 16

	mwy R :bp2
	ldy #$00
	lda (:bp2),y
	sub #$01
	jmp l_5AC2
l_5AAE

; optimize OK (setup_game.pas), line = 18

	lda A
	cmp #$C2
	jeq l_5B13
	cmp #$C1
	jeq l_5B13
	cmp #$7F
	jeq l_5B13
	cmp #$5B
	jeq l_5B13
	cmp #$7E
	jeq l_5B13
	mvy R+1 :bp+1
	ldy R
	lda (:bp),y
	cmp LIMIT
	jcs l_5B13

; optimize OK (setup_game.pas), line = 24

	lda A
	jsr B_CRT.CRT_PUT.@010180000

; optimize OK (setup_game.pas), line = 25

	mwy R :bp2
	ldy #$00
	lda (:bp2),y
	add #$01
	sta (:bp2),y

; optimize OK (setup_game.pas), line = 26

	tay
	lda A
l_5AC2
	sta (:bp2),y
l_5B13

; optimize OK (setup_game.pas), line = 28

	jmp l_5A76

; ------------------------------------------------------------

LIMIT	= DATAORIGIN+$0CA3
R	= DATAORIGIN+$0CA4
A	= DATAORIGIN+$0CA6

@VarData	= LIMIT
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETUPGAME					; PROCEDURE

; optimize OK (setup_game.pas), line = 38

	lda #$1C
	jsr LOADLOCATION

; optimize FAIL ('SHOWLOCATIONHEADER', setup_game.pas), line = 41

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('CHECKFORSAVEDGAME', setup_game.pas), line = 42

	jsr CHECKFORSAVEDGAME

; optimize OK (setup_game.pas), line = 43

	lda SAVE_GAMEFOUND
	cmp #$01
	jne l_5B45

; optimize OK (setup_game.pas), line = 44

	lda #$03
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0F
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (setup_game.pas), line = 45

	lda #$04
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$10
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL ('GETYESNO', setup_game.pas), line = 46

	jsr GETYESNO
	lda GETYESNO.RESULT
	cmp #$01
	jne l_5B5C

; optimize FAIL ('LOADGAME', setup_game.pas), line = 47

	jsr LOADGAME

; optimize OK (setup_game.pas), line = 48

	lda #$FE
	sta LASTLOCATIONSTRINGS
	jmp @exit
l_5B5C
l_5B45

; optimize FAIL ('SHOWLOCATIONHEADER', setup_game.pas), line = 53

	jsr SHOWLOCATIONHEADER

; optimize OK (setup_game.pas), line = 54

	lda #$03
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0E
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (setup_game.pas), line = 55

	lda #$05
	sta GETANSWERCHAR.AKEY
	lda #$3A
	sta GETANSWERCHAR.BKEY
	lda #$2B
	sta GETANSWERCHAR.A
	lda #$24
	sta GETANSWERCHAR.B
	jsr GETANSWERCHAR
	lda GETANSWERCHAR.RESULT
	sta R

; optimize OK (setup_game.pas), line = 56

	jne l_5B84

; optimize OK (setup_game.pas), line = 57

	lda #$19
	sta GAMELENGTH

; optimize OK (setup_game.pas), line = 58

	lda #$64
	jmp l_5B96
l_5B84

; optimize OK (setup_game.pas), line = 62

	lda #$32
	sta GAMELENGTH

; optimize OK (setup_game.pas), line = 63

	lda #$C8
l_5B96
	sta GAMEPOINTS
	lda #$00
	sta GAMEPOINTS+1

; optimize OK (setup_game.pas), line = 66

	lda #$05
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$03
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (setup_game.pas), line = 67

	lda #$01
	sta READVALUE.MINVALUE
	lda #$00
	sta READVALUE.MINVALUE+1
	lda #$04
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta NPLAYERS

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', setup_game.pas), line = 68

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (setup_game.pas), line = 71

	lda PLGANGSTERS
	sta :bp2
	lda PLGANGSTERS+1
	sta :bp2+1
	lda #$63
	ldy #$1F
	sta:rpl (:bp2),y-

; optimize OK (setup_game.pas), line = 72

	lda #$00
	sta J
	ldy NPLAYERS
	dey
	sty @FORTMP_5BB9_0

l_5BBC
; --- ForToDoCondition
	lda @FORTMP_5BB9_0::#$00
	cmp J
	jcc l_5BCA

; optimize OK (setup_game.pas), line = 74

	lda J
	sta CURRENTPLAYER

; optimize OK (setup_game.pas), line = 75

	asl @
	asl @
	asl @
	sta TMP

; optimize FAIL ('SHOWLOCATIONHEADER', setup_game.pas), line = 77

	jsr SHOWLOCATIONHEADER

; optimize OK (setup_game.pas), line = 80

	lda #$04
	sta CRT_WRITECENTERED_LOCSTR.R
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (setup_game.pas), line = 81

	lda J
	add #$01
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda #$00
	adc #$00
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', setup_game.pas), line = 82

	jsr B_CRT.CRT_NEWLINE.@00

; --- RepeatUntilProlog
l_5BE8

; optimize OK (setup_game.pas), line = 85

	lda #$06
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$05
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (setup_game.pas), line = 86

	lda #$0B
	sta B_CRT.CRT_GOTOXY.X
	lda #$07
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (setup_game.pas), line = 87

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda TMP
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add <adr.GANGSTERNAMES
	sta :bp2
	lda >adr.GANGSTERNAMES
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta M_READSTRINGI.R
	iny
	lda (:bp2),y
	sta M_READSTRINGI.R+1
	lda #$0F
	sta M_READSTRINGI.LIMIT
	jsr M_READSTRINGI

; optimize OK (setup_game.pas), line = 88

	lda TMP
	asl @
	tay
	lda adr.GANGSTERNAMES+1,y
	sta :bp+1
	lda adr.GANGSTERNAMES,y
	tay
	lda (:bp),y
	jeq l_5BE8

; optimize OK (setup_game.pas), line = 91

	ldy CURRENTPLAYER
	lda #$01
	sta adr.PLNGANGSTERS,y

; optimize OK (setup_game.pas), line = 92

	ldy TMP
	lda J
	sta adr.PLGANGSTERS,y

; --- RepeatUntilProlog
l_5C11

; optimize OK (setup_game.pas), line = 95

	lda #$09
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$06
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (setup_game.pas), line = 96

	lda #$0B
	sta B_CRT.CRT_GOTOXY.X
	lda #$0A
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (setup_game.pas), line = 97

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda CURRENTPLAYER
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add <adr.PLGANG
	sta :bp2
	lda >adr.PLGANG
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta M_READSTRINGI.R
	iny
	lda (:bp2),y
	sta M_READSTRINGI.R+1
	lda #$0F
	sta M_READSTRINGI.LIMIT
	jsr M_READSTRINGI

; optimize OK (setup_game.pas), line = 98

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLGANG+1,y
	sta :bp+1
	lda adr.PLGANG,y
	tay
	lda (:bp),y
	jeq l_5C11

; optimize OK (setup_game.pas), line = 100

	lda #$0C
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$07
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (setup_game.pas), line = 101

	lda #$0E
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0D
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (setup_game.pas), line = 102

	lda #$05
	sta GETANSWERCHAR.AKEY
	lda #$25
	sta GETANSWERCHAR.BKEY
	lda #$2B
	sta GETANSWERCHAR.A
	lda #$2D
	sta GETANSWERCHAR.B
	jsr GETANSWERCHAR
	lda GETANSWERCHAR.RESULT
	sta R

; optimize OK (setup_game.pas), line = 104

	lda #$01
	sub R
	ldy TMP
	sta adr.GANGSTERSEX,y

; optimize OK (setup_game.pas), line = 106

	lda #$0F
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$08
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL (1, setup_game.pas), line = 107

	inx
	mva TMP :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	sta GETRANDOM.MINP
	lda #$00
	sta GETRANDOM.MINP+1
	lda #$23
	sta GETRANDOM.MAXP
	lda #$00
	sta GETRANDOM.MAXP+1
	lda #$02
	sta GETRANDOM.STEPS
	lda #$00
	sta GETRANDOM.STEPS+1
	jsr GETRANDOM
	inx
	mva GETRANDOM.RESULT :STACKORIGIN,x
	mva GETRANDOM.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.GANGSTERSTR,y
	dex
	dex

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', setup_game.pas), line = 108

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (setup_game.pas), line = 110

	lda #$10
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$09
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL (1, setup_game.pas), line = 111

	inx
	mva TMP :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	sta GETRANDOM.MINP
	lda #$00
	sta GETRANDOM.MINP+1
	lda #$23
	sta GETRANDOM.MAXP
	lda #$00
	sta GETRANDOM.MAXP+1
	lda #$02
	sta GETRANDOM.STEPS
	lda #$00
	sta GETRANDOM.STEPS+1
	jsr GETRANDOM
	inx
	mva GETRANDOM.RESULT :STACKORIGIN,x
	mva GETRANDOM.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.GANGSTERINT,y
	dex
	dex

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', setup_game.pas), line = 112

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (setup_game.pas), line = 114

	lda #$11
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0A
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL (1, setup_game.pas), line = 115

	inx
	mva TMP :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	sta GETRANDOM.MINP
	lda #$00
	sta GETRANDOM.MINP+1
	lda #$23
	sta GETRANDOM.MAXP
	lda #$00
	sta GETRANDOM.MAXP+1
	lda #$02
	sta GETRANDOM.STEPS
	lda #$00
	sta GETRANDOM.STEPS+1
	jsr GETRANDOM
	inx
	mva GETRANDOM.RESULT :STACKORIGIN,x
	mva GETRANDOM.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.GANGSTERBRUT,y
	dex
	dex

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', setup_game.pas), line = 116

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (setup_game.pas), line = 118

	ldy TMP
	lda #$1E
	sta adr.GANGSTERHEALTH,y

; optimize OK (setup_game.pas), line = 119

	lda #$12
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0C
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL (1, setup_game.pas), line = 120

	inx
	mva CURRENTPLAYER :STACKORIGIN,x
	lda #$00
	asl :STACKORIGIN,x
	rol @
	asl :STACKORIGIN,x
	rol @
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$88
	sta GETRANDOM.MINP
	lda #$13
	sta GETRANDOM.MINP+1
	lda #$0F
	sta GETRANDOM.MAXP
	lda #$27
	sta GETRANDOM.MAXP+1
	lda #$FA
	sta GETRANDOM.STEPS
	lda #$00
	sta GETRANDOM.STEPS+1
	jsr GETRANDOM
	ldy :STACKORIGIN,x
	lda GETRANDOM.RESULT
	sta adr.PLMONEY,y
	lda GETRANDOM.RESULT+1
	sta adr.PLMONEY+1,y
	lda #$00
	sta adr.PLMONEY+2,y
	lda #$00
	sta adr.PLMONEY+3,y
	dex

; optimize FAIL ('WAITFORKEY', setup_game.pas), line = 121

	jsr WAITFORKEY

; --- ForToDoEpilog
	inc J
	jne l_5BBC
l_5BCA

; optimize FAIL ('INITPLAYERS', setup_game.pas), line = 125

	jsr INITPLAYERS

; optimize OK (setup_game.pas), line = 126

	lda #$00
	sta CURRENTPLAYER

; optimize OK (setup_game.pas), line = 127

	lda #$01
	sta CURRENTMONTH

; optimize OK (setup_game.pas), line = 128

	lda #$00
	sta CURRENTYEAR

; ------------------------------------------------------------

J	= DATAORIGIN+$0CA7
R	= DATAORIGIN+$0CA8
K	= DATAORIGIN+$0CA9

@VarData	= J
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	JOBWORKING					; PROCEDURE

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 5

	jsr ENABLECONSOLE

; optimize FAIL ('B_CRT.CRT_CLEAR.@00', updates.pas), line = 6

	jsr B_CRT.CRT_CLEAR.@00

; optimize FAIL ('B_CRT.CRT_WRITECENTERED.@02018986000001000180000', updates.pas), line = 7

	inx
	mwy LOC_NAME :bp2
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITECENTERED.@02018986000001000180000.adr.S,y+
	inx
	mva #$01 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED.@02018986000001000180000

; optimize OK (updates.pas), line = 8

	lda #$00
	sta B_CRT.CRT_INVERT.X
	lda #$01
	sta B_CRT.CRT_INVERT.Y
	lda B_CRT.CRT_SCREENWIDTH
	sta B_CRT.CRT_INVERT.WIDTH
	jsr B_CRT.CRT_INVERT

; optimize OK (updates.pas), line = 9

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$03
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATERANK					; PROCEDURE

; optimize OK (updates.pas), line = 20

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	sta OLDRANK

; optimize OK (updates.pas), line = 21

	lda adr.PLNEWPOINTS,y
	jmi l_5CCA
	jeq l_5CCA

; optimize OK (updates.pas), line = 22

	lda adr.PLPOINTS,y
	add adr.PLNEWPOINTS,y
	sta adr.PLPOINTS,y

; optimize OK (updates.pas), line = 25

	sta :STACKORIGIN+9
	lda GAMEPOINTS
	add #$0A
	sta :STACKORIGIN+10
	lda GAMEPOINTS+1
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+9
@
	jcs l_5CFA
	lda GAMEPOINTS
	add #$0A
	sta adr.PLPOINTS,y
l_5CFA
	jmp l_5D12
l_5CCA

; optimize OK (updates.pas), line = 29

	ldy CURRENTPLAYER
	lda adr.PLPOINTS,y
	sta :STACKORIGIN+9
	lda adr.PLNEWPOINTS,y
	sta :STACKORIGIN+10
	ldy #$00
	lda :STACKORIGIN+10
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta K
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta K+1

; optimize OK (updates.pas), line = 30

	jpl l_5D35
	lda #$00
	sta K
	sta K+1
l_5D35

; optimize OK (updates.pas), line = 31

	ldy CURRENTPLAYER
	lda K
	sta adr.PLPOINTS,y
l_5D12

; optimize OK (updates.pas), line = 33

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLNEWPOINTS,y

; optimize OK (updates.pas), line = 35

	lda #$0A
	sta @WORD.DIV.B
	lda #$00
	sta @WORD.DIV.B+1
	lda GAMEPOINTS
	sta @WORD.DIV.A
	lda GAMEPOINTS+1
	sta @WORD.DIV.A+1
	jsr @WORD.DIV
	lda :eax
	sta D

; optimize OK (updates.pas), line = 36

	ldy CURRENTPLAYER
	lda adr.PLPOINTS,y
	add #$05
	sta @WORD.DIV.A
	lda #$00
	adc #$00
	sta @WORD.DIV.A+1
	lda D
	sta @WORD.DIV.B
	lda #$00
	sta @WORD.DIV.B+1
	jsr @WORD.DIV
	lda :eax
	sta NEWRANK

; optimize OK (updates.pas), line = 37

	cmp #$0B
	jcc l_5D79
	lda #$0A
	sta NEWRANK
l_5D79

; optimize OK (updates.pas), line = 43

	lda OLDRANK
	cmp NEWRANK
	jcs l_5D94

; optimize FAIL ('BLACKCONSOLE', updates.pas), line = 45

	jsr BLACKCONSOLE

; optimize OK (updates.pas), line = 46

	lda #$13
	jsr LOADLOCATION

; optimize OK (updates.pas), line = 47

	lda #$00
	sta PLAYERPOS_X

; optimize OK (updates.pas), line = 48

	sta PLAYERPOS_Y

; optimize OK (updates.pas), line = 49

	sta SYSTEM.FILLCHAR.@03018000001810000188000.A
	lda #$DC
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A+1
	lda #$C0
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@03018000001810000188000
	m@INLINE
	.ENDL

; optimize OK (updates.pas), line = 50

	lda CURRENTPLAYER
	asl @
	asl @
	asl @
	sta TMP

; optimize OK (updates.pas), line = 51

	tay
	lda adr.GANGSTERSEX,y
	jne l_5DC3

; optimize OK (updates.pas), line = 52

	lda WANTED_M_FNAME
	sta LOADXAPL.FNAME
	lda WANTED_M_FNAME+1
	jmp l_5DD1
l_5DC3

; optimize OK (updates.pas), line = 54

	lda WANTED_F_FNAME
	sta LOADXAPL.FNAME
	lda WANTED_F_FNAME+1
l_5DD1
	sta LOADXAPL.FNAME+1
	lda #$00
	sta LOADXAPL.OUTPUTPOINTER
	lda #$D8
	sta LOADXAPL.OUTPUTPOINTER+1
	jsr LOADXAPL

; optimize FAIL ('ENABLEMAPCONSOLE', updates.pas), line = 55

	jsr ENABLEMAPCONSOLE

; optimize OK (updates.pas), line = 56

	lda #$04
	sta MAPCOLORA

; optimize OK (updates.pas), line = 57

	lda #$0A
	sta MAPCOLORB

; optimize OK (updates.pas), line = 58

	lda #$13
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$03
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', updates.pas), line = 59

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (updates.pas), line = 60

	lda #$04
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', updates.pas), line = 61

	inx
	lda TMP
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (updates.pas), line = 62

	lda #$05
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 63

	lda #$06
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', updates.pas), line = 64

	inx
	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLGANG,y
	sta :STACKORIGIN,x
	lda adr.PLGANG+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (updates.pas), line = 65

	lda #$07
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 66

	lda #$08
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 67

	lda #$09
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', updates.pas), line = 68

	inx
	lda NEWRANK
	asl @
	tay
	lda adr.RANKNAMES,y
	sta :STACKORIGIN,x
	lda adr.RANKNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', updates.pas), line = 69

	inx
	mva #$85 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (updates.pas), line = 70

	ldy CURRENTPLAYER
	lda adr.PLPOINTS,y
	jsr B_CRT.CRT_WRITE.@010180000

; optimize OK (updates.pas), line = 71

	lda #$0A
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('CRT_READKEYORFIRE', updates.pas), line = 72

	jsr CRT_READKEYORFIRE

; optimize OK (updates.pas), line = 73

	lda #$88
	sta MAPCOLORA

; optimize OK (updates.pas), line = 74

	lda #$06
	sta MAPCOLORB

; optimize FAIL ('BLACKCONSOLE', updates.pas), line = 75

	jsr BLACKCONSOLE

; optimize OK (updates.pas), line = 76

	lda #$58
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A
	lda #$DE
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A+1
	lda #$68
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT
	lda #$01
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@03018000001810000188000
	m@INLINE
	.ENDL

; optimize OK (updates.pas), line = 77

	ldy CURRENTPLAYER
	lda NEWRANK
	sta adr.PLRANK,y
l_5D94

; ------------------------------------------------------------

OLDRANK	= DATAORIGIN+$0CAB
NEWRANK	= DATAORIGIN+$0CAC
K	= DATAORIGIN+$0CAD
D	= DATAORIGIN+$0CAF

@VarData	= OLDRANK
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATERENT					; PROCEDURE

; optimize OK (updates.pas), line = 86

	lda #$00
	sta R

l_5E31
; --- ForToDoCondition
	ldy R
	cpy #$04
	jcs l_5E3F

; optimize OK (updates.pas), line = 88

	lda adr.PLRENT,y
	cmp CURRENTPLAYER
	jeq l_5E56
	jmp c_5E31
l_5E56

; optimize OK (updates.pas), line = 90

	ldy CURRENTPLAYER
	lda adr.PLRENTMONTHS,y
	jeq l_5E6E

; optimize OK (updates.pas), line = 92

	sub #$01
	sta adr.PLRENTMONTHS,y
	jmp @exit
l_5E6E

; optimize OK (updates.pas), line = 96

	lda #$13
	jsr LOADLOCATION

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 99

	jsr ENABLECONSOLE

; optimize FAIL ('B_CRT.CRT_CLEAR.@00', updates.pas), line = 100

	jsr B_CRT.CRT_CLEAR.@00

; optimize OK (updates.pas), line = 101

	lda #$01
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$0D
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (updates.pas), line = 102

	lda #$00
	sta B_CRT.CRT_INVERT.X
	lda #$01
	sta B_CRT.CRT_INVERT.Y
	lda B_CRT.CRT_SCREENWIDTH
	sta B_CRT.CRT_INVERT.WIDTH
	jsr B_CRT.CRT_INVERT

; optimize OK (updates.pas), line = 103

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$03
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL (1, updates.pas), line = 105

	inx
	mva #$FA :STACKORIGIN,x
	lda #$C8
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM.@010180000.RESULT
	sta PR
	lda #$00
	adc #$00
	sta PR+1
	dex

; optimize OK (updates.pas), line = 106

	lda #$0E
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 107

	lda #$0F
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 112

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	.LOCAL
	lda #$00
	sub adr.PLMONEY+3,y
	bne L4
	lda #$00
	cmp adr.PLMONEY+2,y
	bne L1
	lda PR+1
	cmp adr.PLMONEY+1,y
	bne L1
	lda PR
	cmp adr.PLMONEY,y
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_5EB2

; optimize OK (updates.pas), line = 114

	lda #$10
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 115

	lda #$11
	jsr CRT_WRITE_LOCSTR

; optimize OK (updates.pas), line = 116

	lda PR
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda PR+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (updates.pas), line = 117

	lda #$12
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 118

	lda PR
	sta SUBMONEY.AMOUNT
	lda PR+1
	sta SUBMONEY.AMOUNT+1
	jsr SUBMONEY

; optimize OK (updates.pas), line = 119

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLRENTMONTHS,y
	jmp l_5ECF
l_5EB2

; optimize OK (updates.pas), line = 126

	lda #$13
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 127

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$02
	jcc l_5EE6

; optimize OK (updates.pas), line = 129

	lda #$14
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 130

	lda #$15
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 131

	lda #$00
	tay

l_5EF4
; --- ForToDoCondition
	cpy #$20
	jcs l_5F02

; optimize OK (updates.pas), line = 132

	lda adr.PLGANGSTERS,y
	cmp CURRENTPLAYER
	jne l_5F19
	lda #$63
	sta adr.PLGANGSTERS,y
l_5F19

; --- ForToDoEpilog
	iny
	jne l_5EF4
l_5F02
	sty K

; optimize OK (updates.pas), line = 135

	lda CURRENTPLAYER
	asl @
	asl @
	asl @
	tay
	lda CURRENTPLAYER
	sta adr.PLGANGSTERS,y

; optimize OK (updates.pas), line = 136

	ldy CURRENTPLAYER
	lda #$01
	sta adr.PLNGANGSTERS,y
l_5EE6

; optimize OK (updates.pas), line = 139

	ldy R
	lda #$63
	sta adr.PLRENT,y
l_5ECF

; optimize FAIL ('WAITFORKEY', updates.pas), line = 141

	jsr WAITFORKEY

; --- ForToDoEpilog
c_5E31
	inc R
	jne l_5E31
l_5E3F

; ------------------------------------------------------------

PR	= DATAORIGIN+$0CB0
K	= DATAORIGIN+$0CB2
R	= DATAORIGIN+$0CB3

@VarData	= PR
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATELOANSHARK					; PROCEDURE

; optimize OK (updates.pas), line = 150

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOANINVEST,y
	sta P
	lda adr.PLLOANINVEST+1,y
	sta P+1

; optimize OK (updates.pas), line = 152

	ora P
	jeq l_5F68

; optimize OK (updates.pas), line = 154

	lda #$15
	jsr LOADLOCATION

; optimize FAIL ('JOBWORKING', updates.pas), line = 155

	jsr JOBWORKING

; optimize OK (updates.pas), line = 156

	lda #$03
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	jne l_5F7D

; optimize FAIL (1, updates.pas), line = 158

	inx
	mva P :STACKORIGIN,x
	mva P+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$06 :STACKORIGIN,x
	jsr @shrAX_CL
	dex
	lda #$00
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM.@010180000.RESULT
	sta P
	lda :STACKORIGIN+STACKWIDTH,x
	adc #$00
	sta P+1
	dex

; optimize OK (updates.pas), line = 159

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (updates.pas), line = 160

	lda #$01
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 161

	lda #$02
	jsr CRT_WRITE_LOCSTR

; optimize OK (updates.pas), line = 162

	lda P
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda P+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (updates.pas), line = 163

	lda #$03
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', updates.pas), line = 164

	jsr WAITFORKEY
	jmp @exit
l_5F7D

; optimize OK (updates.pas), line = 169

	lda #$04
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 170

	lda #$05
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', updates.pas), line = 171

	jsr WAITFORKEY
	jmp @exit
l_5FA2
l_5F68

; optimize OK (updates.pas), line = 177

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN+1,y
	jmi l_5FBD
	ora adr.PLLOAN,y
	jeq l_5FBD

; optimize OK (updates.pas), line = 179

	ldy CURRENTPLAYER
	lda adr.PLLOANTIME,y
	sta K

; optimize OK (updates.pas), line = 180

	lda #$15
	jsr LOADLOCATION

; optimize FAIL ('JOBWORKING', updates.pas), line = 181

	jsr JOBWORKING

; optimize OK (updates.pas), line = 182

	lda K
	jeq l_5FDC

; optimize OK (updates.pas), line = 184

	lda #$06
	jsr CRT_WRITE_LOCSTR

; optimize OK (updates.pas), line = 185

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN,y
	sta B_CRT.CRT_WRITE.@010185000.NUM
	lda adr.PLLOAN+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta B_CRT.CRT_WRITE.@010185000.NUM+1
	sty B_CRT.CRT_WRITE.@010185000.NUM+2
	sty B_CRT.CRT_WRITE.@010185000.NUM+3
	jsr B_CRT.CRT_WRITE.@010185000

; optimize OK (updates.pas), line = 186

	lda #$07
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 187

	lda #$08
	jsr CRT_WRITE_LOCSTR

; optimize OK (updates.pas), line = 188

	lda K
	jsr B_CRT.CRT_WRITE.@010180000

; optimize OK (updates.pas), line = 189

	lda #$09
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', updates.pas), line = 190

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 191

	lda K
	sub #$01
	ldy CURRENTPLAYER
	sta adr.PLLOANTIME,y
	jmp @exit
l_5FDC

; optimize OK (updates.pas), line = 195

	lda #$0A
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 196

	lda #$0B
	jsr CRT_WRITELN2_LOCSTR

; optimize FAIL ('WAITFORKEY', updates.pas), line = 197

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 199

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (updates.pas), line = 200

	lda #$05
	sta adr.FP_N+$01

; optimize OK (updates.pas), line = 201

	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	lda LOC_STRING_12
	sta @move.src
	lda LOC_STRING_12+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 202

	lda #$00
	sta K

l_601D
; --- ForToDoCondition
	lda K
	cmp #$05
	jcs l_602B

; optimize OK (updates.pas), line = 204

	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta TMP

; optimize OK (updates.pas), line = 205

	ldy K
	lda TMP
	sta adr.FP_SEX+$10,y

; optimize OK (updates.pas), line = 206

	tya
	asl @
	tay
	lda adr.FP_NAME+$20,y
	sta @move.dst
	lda adr.FP_NAME+1+$20,y
	sta @move.dst+1
	lda LOC_STRING_21
	sta @move.src
	lda LOC_STRING_21+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 207

	ldy K
	lda #$03
	sta adr.FP_WEAPON+$10,y

; optimize OK (updates.pas), line = 208

	lda #$1E
	sta adr.FP_ENERGY+$10,y

; optimize OK (updates.pas), line = 209

	sta adr.FP_STRENGTH+$10,y

; optimize OK (updates.pas), line = 210

	sta adr.FP_BRUTALITY+$10,y

; --- ForToDoEpilog
	inc K
	jne l_601D
l_602B

; optimize FAIL ('DOFIGHT', updates.pas), line = 213

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_608A

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 215

	jsr ENABLECONSOLE

; optimize FAIL ('JOBWORKING', updates.pas), line = 217

	jsr JOBWORKING

; optimize OK (updates.pas), line = 218

	lda #$0D
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 219

	lda #$0E
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 220

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda #$00
	sta adr.PLMONEY,y
	sta adr.PLMONEY+1,y
	sta adr.PLMONEY+2,y
	sta adr.PLMONEY+3,y

; optimize OK (updates.pas), line = 221

	lda CURRENTPLAYER
	asl @
	tay
	lda #$00
	sta adr.PLLOAN,y
	sta adr.PLLOAN+1,y

; optimize FAIL ('WAITFORKEY', updates.pas), line = 222

	jsr WAITFORKEY
	jmp @exit
l_608A

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 226

	jsr ENABLECONSOLE

; optimize FAIL ('JOBWORKING', updates.pas), line = 228

	jsr JOBWORKING

; optimize OK (updates.pas), line = 229

	lda #$0F
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 230

	lda #$10
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 231

	lda #$11
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', updates.pas), line = 232

	jsr WAITFORKEY

; optimize FAIL (2, updates.pas), line = 233

	inx
	mva CURRENTPLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$03 :STACKORIGIN,x
	lda #$03
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM.@010180000.RESULT
	ldy :STACKORIGIN-1,x
	sta adr.PLLOANTIME,y
	dex
	dex
l_5FBD

; ------------------------------------------------------------

P	= DATAORIGIN+$0CB4
K	= DATAORIGIN+$0CB6

@VarData	= P
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATEOPPORTUNITIES				; PROCEDURE

; optimize OK (updates.pas), line = 244

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$08
	cmp #$08
	jeq l_60D6
	jmp @exit
l_60D6

; optimize OK (updates.pas), line = 247

	lda #$13
	jsr LOADLOCATION

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 249

	jsr ENABLECONSOLE

; optimize FAIL ('B_CRT.CRT_CLEAR.@00', updates.pas), line = 250

	jsr B_CRT.CRT_CLEAR.@00

; optimize OK (updates.pas), line = 251

	lda #$01
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$16
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (updates.pas), line = 252

	lda #$00
	sta B_CRT.CRT_INVERT.X
	lda #$01
	sta B_CRT.CRT_INVERT.Y
	lda B_CRT.CRT_SCREENWIDTH
	sta B_CRT.CRT_INVERT.WIDTH
	jsr B_CRT.CRT_INVERT

; optimize OK (updates.pas), line = 253

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$03
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (updates.pas), line = 258

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$F7
	sta adr.PLOPPORTUNITY,y

; optimize OK (updates.pas), line = 259

	lda #$05
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	jne l_610A

; optimize OK (updates.pas), line = 262

	lda #$17
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 263

	lda #$18
	jsr CRT_WRITELN_LOCSTR
	jmp l_6118
l_610A

; optimize FAIL (1, updates.pas), line = 267

	inx
	mva #$7C :STACKORIGIN,x
	mva #$15 :STACKORIGIN+STACKWIDTH,x
	lda #$96
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	inx
	mva #$06 :STACKORIGIN,x
	jsr @shlEAX_CL.BYTE
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sta PR
	lda :STACKORIGIN+STACKWIDTH,x
	sta PR+1
	dex

; optimize OK (updates.pas), line = 268

	lda #$19
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 269

	lda #$1A
	jsr CRT_WRITE_LOCSTR

; optimize OK (updates.pas), line = 270

	lda PR
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda PR+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 271

	inx
	mva #$73 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (updates.pas), line = 272

	lda PR
	sta ADDMONEY.AMOUNT
	lda PR+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY
l_6118

; optimize FAIL ('WAITFORKEY', updates.pas), line = 274

	jsr WAITFORKEY

; ------------------------------------------------------------

PR	= DATAORIGIN+$0CB7

@VarData	= PR
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATEGANGSTERS					; PROCEDURE

; optimize OK (updates.pas), line = 281

	lda #$00
	sta J

l_613F
; --- ForToDoCondition
	ldy J
	cpy #$20
	jcs l_614D

; optimize OK (updates.pas), line = 283

	lda adr.GANGSTERHEALTH,y
	sta EN

; optimize OK (updates.pas), line = 284

	lda adr.GANGSTERSTR,y
	lsr @
	lsr @
	add EN
	sta EN

; optimize OK (updates.pas), line = 285

	lda adr.GANGSTERBRUT,y
	lsr @
	sta :STACKORIGIN+9
	lda adr.GANGSTERINT,y
	lsr @
	add :STACKORIGIN+9
	add #$01
	sta MAXX

; optimize OK (updates.pas), line = 286

	cmp #$23
	jcs l_6199
	lda #$23
	sta MAXX
l_6199

; optimize OK (updates.pas), line = 287

	lda MAXX
	cmp EN
	jcs l_61B4
	sta EN
l_61B4

; optimize OK (updates.pas), line = 288

	lda EN
	cmp #$64
	jcc l_61CF
	lda #$63
	sta EN
l_61CF

; optimize OK (updates.pas), line = 289

	ldy J
	lda EN
	sta adr.GANGSTERHEALTH,y

; --- ForToDoEpilog
	inc J
	jne l_613F
l_614D

; ------------------------------------------------------------

J	= DATAORIGIN+$0CB9
EN	= DATAORIGIN+$0CBA
MAXX	= DATAORIGIN+$0CBB

@VarData	= J
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATEPRISON					; PROCEDURE

; optimize OK (updates.pas), line = 299

	lda #$13
	jsr LOADLOCATION

; optimize OK (updates.pas), line = 301

	ldy CURRENTPLAYER
	lda adr.PLPRISON,y
	jeq l_61FF

; optimize OK (updates.pas), line = 303

	lda adr.LOC_MAP_PLACES
	sta CURRENTMAP

; optimize OK (updates.pas), line = 304

	lda LOC_STRING_27
	sta @move.src
	lda LOC_STRING_27+1
	sta @move.src+1
	@moveSTRING LOC_NAME #40

; optimize FAIL ('SHOWLOCATIONHEADER', updates.pas), line = 305

	jsr SHOWLOCATIONHEADER

; optimize OK (updates.pas), line = 306

	lda #$1C
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 307

	lda #$1D
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 308

	lda #$08
	jsr B_CRT.CRT_WRITE.@010186000

; optimize OK (updates.pas), line = 309

	ldy CURRENTPLAYER
	lda adr.PLPRISON,y
	jsr B_CRT.CRT_WRITE.@010180000

; optimize OK (updates.pas), line = 310

	lda #$1E
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 311

	ldy CURRENTPLAYER
	lda adr.PLPRISON,y
	sub #$01
	sta adr.PLPRISON,y

; optimize FAIL ('WAITFORKEY', updates.pas), line = 312

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 313

	lda #$11
	sta CURRENTLOCATION
	jmp @exit
l_61FF

; optimize OK (updates.pas), line = 317

	ldy CURRENTPLAYER
	lda adr.PLFREED,y
	cmp #$63
	jeq l_6245

; optimize OK (updates.pas), line = 319

	lda #$1F
	jsr CRT_WRITE_LOCSTR

; optimize OK (updates.pas), line = 320

	ldy CURRENTPLAYER
	lda adr.PLFREED,y
	sta K

; optimize OK (updates.pas), line = 321

	asl @
	asl @
	asl @
	sta R

; optimize FAIL ('B_CRT.CRT_WRITE.@0101898600000100', updates.pas), line = 322

	inx
	lda R
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE.@0101898600000100

; optimize OK (updates.pas), line = 323

	lda #$20
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 324

	lda #$21
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 325

	lda #$22
	jsr CRT_WRITE_LOCSTR

; optimize OK (updates.pas), line = 326

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sta B_CRT.CRT_WRITE.@010185000.NUM
	lda adr.PLMONEY+1,y
	sta B_CRT.CRT_WRITE.@010185000.NUM+1
	lda adr.PLMONEY+2,y
	sta B_CRT.CRT_WRITE.@010185000.NUM+2
	lda adr.PLMONEY+3,y
	sta B_CRT.CRT_WRITE.@010185000.NUM+3
	jsr B_CRT.CRT_WRITE.@010185000

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 327

	inx
	mva #$BE :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (updates.pas), line = 328

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sta READVALUE.MAXVALUE
	lda adr.PLMONEY+1,y
	sta READVALUE.MAXVALUE+1
	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta PR
	lda READVALUE.RESULT+1
	sta PR+1

; optimize OK (updates.pas), line = 329

	ora PR
	jeq l_6288

; optimize OK (updates.pas), line = 331

	lda PR
	sta PAYMONEY.PRICE
	lda PR+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY

; optimize OK (updates.pas), line = 332

	lda #$02
	jsr ADDPOINTS

; optimize OK (updates.pas), line = 333

	lda K
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	add PR
	sta adr.PLMONEY,y
	lda adr.PLMONEY+1,y
	adc PR+1
	sta adr.PLMONEY+1,y
	lda adr.PLMONEY+2,y
	adc #$00
	sta adr.PLMONEY+2,y
	lda adr.PLMONEY+3,y
	adc #$00
	sta adr.PLMONEY+3,y
l_6288

; optimize OK (updates.pas), line = 335

	ldy CURRENTPLAYER
	lda #$63
	sta adr.PLFREED,y
l_6245

; ------------------------------------------------------------

K	= DATAORIGIN+$0CBC
R	= DATAORIGIN+$0CBD
PR	= DATAORIGIN+$0CBE

@VarData	= K
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATEJOB					; FUNCTION

; optimize OK (updates.pas), line = 348

	lda #$16
	jsr LOADLOCATION

; optimize FAIL ('JOBWORKING', updates.pas), line = 349

	jsr JOBWORKING

; optimize OK (updates.pas), line = 351

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLJOBLOCATION+1,y
	bne @+
	lda adr.PLJOBLOCATION,y
	cmp #$07
@
	jeq l_62D1x
	lda adr.PLJOBLOCATION+1,y
	bne @+
	lda adr.PLJOBLOCATION,y
	cmp #$0A
@
	jne l_62D1
l_62D1x

; optimize OK (updates.pas), line = 353

	lda #$01
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 354

	lda #$02
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('EFFECTWAIT', updates.pas), line = 355

	jsr EFFECTWAIT

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', updates.pas), line = 356

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (updates.pas), line = 357

	lda #$02
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	jne l_62E9

; optimize OK (updates.pas), line = 359

	lda #$03
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', updates.pas), line = 360

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 361

	lda #$01
	sta JOBDONE
	jmp l_62FA
l_62E9

; optimize OK (updates.pas), line = 365

	lda #$04
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 366

	lda #$05
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', updates.pas), line = 367

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 368

	lda #$00
	sta adr.FP_SEX+$10

; optimize OK (updates.pas), line = 369

	lda #$03
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta @CASETMP_0016
	jne l_630E
@

; optimize OK (updates.pas), line = 371

	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	lda LOC_STRING_6
	sta @move.src
	lda LOC_STRING_6+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 372

	lda #$01
	sta adr.FP_SEX+$10
	jmp a_0016
l_630E
	cmp #$01
	jne l_6320

; optimize OK (updates.pas), line = 374

	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	lda LOC_STRING_7
	sta @move.src
	lda LOC_STRING_7+1
	jmp s_6333
l_6320
	cmp #$02
	jne l_632D

; optimize OK (updates.pas), line = 375

	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	lda LOC_STRING_8
	sta @move.src
	lda LOC_STRING_8+1
s_6333
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move
l_632D
a_0016

; optimize OK (updates.pas), line = 377

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (updates.pas), line = 378

	sta adr.FP_N+$01

; optimize OK (updates.pas), line = 379

	lda adr.FP_GANG+$02
	sta @move.src
	lda adr.FP_GANG+1+$02
	sta @move.src+1
	lda adr.FP_NAME+$20
	sta @move.dst
	lda adr.FP_NAME+1+$20
	sta @move.dst+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 380

	lda #$05
	sta adr.FP_WEAPON+$10

; optimize OK (updates.pas), line = 381

	lda #$1E
	sta adr.FP_ENERGY+$10

; optimize FAIL ('DOFIGHT', updates.pas), line = 383

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_6363

; optimize OK (updates.pas), line = 384

	lda #$00
	jmp l_6371
l_6363

; optimize OK (updates.pas), line = 386

	lda #$01
l_6371
	sta JOBDONE

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 387

	jsr ENABLECONSOLE
l_62FA
l_62D1

; optimize OK (updates.pas), line = 391

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLJOBLOCATION+1,y
	bne @+
	lda adr.PLJOBLOCATION,y
	cmp #$0B
@
	jne l_638C

; optimize OK (updates.pas), line = 393

	lda #$09
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 394

	lda #$0A
	jsr CRT_WRITELN2_LOCSTR

; optimize OK (updates.pas), line = 395

	lda #$0B
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 396

	lda #$0C
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 397

	lda #$0D
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 398

	lda #$0E
	jsr CRT_WRITE_LOCSTR

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', updates.pas), line = 399

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (updates.pas), line = 400

	lda #$63
	sta R

; --- RepeatUntilProlog
l_639F

; optimize FAIL ('READKEYANDSTICK', updates.pas), line = 402

	jsr READKEYANDSTICK
	lda READKEYANDSTICK.RESULT
	sta CH

; optimize OK (updates.pas), line = 403

	sta @CASETMP_0017
	cmp #$1F
	jne l_63AE
@

; optimize OK (updates.pas), line = 404

	lda #$01
	sta R
	jmp a_0017
l_63AE
	cmp #$1E
	jne l_63B9

; optimize OK (updates.pas), line = 405

	lda #$02
	sta R
	jmp a_0017
l_63B9
	cmp #$1A
	jne l_63C4

; optimize OK (updates.pas), line = 406

	lda #$03
	sta R
l_63C4
a_0017

; optimize OK (updates.pas), line = 408

	lda R
	cmp #$63
	jeq l_639F

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', updates.pas), line = 410

	jsr B_CRT.CRT_NEWLINE.@00

; optimize FAIL ('B_CRT.CRT_NEWLINE.@00', updates.pas), line = 411

	jsr B_CRT.CRT_NEWLINE.@00

; optimize OK (updates.pas), line = 413

	lda #$06
	jsr SYSTEM.RANDOM.@010180000
	lda R
	cmp SYSTEM.RANDOM.@010180000.RESULT
	jcs l_63EF

; optimize OK (updates.pas), line = 415

	lda #$64
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	inx
	mva R :STACKORIGIN,x
	jsr imulBYTE
	dex
	lda :eax
	add #$2C
	sta P
	lda :eax+1
	adc #$01
	sta P+1
	dex

; optimize OK (updates.pas), line = 416

	lda #$0F
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 417

	lda #$10
	jsr CRT_WRITE_LOCSTR

; optimize OK (updates.pas), line = 418

	lda P
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda P+1
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 419

	inx
	mva #$73 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (updates.pas), line = 420

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize FAIL ('WAITFORKEY', updates.pas), line = 421

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 422

	lda #$01
	sta JOBDONE
	jmp l_6419
l_63EF

; optimize OK (updates.pas), line = 426

	lda #$11
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 427

	lda #$12
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', updates.pas), line = 428

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 429

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (updates.pas), line = 430

	sta adr.FP_N+$01

; optimize OK (updates.pas), line = 431

	lda adr.FP_NAME+$20
	sta @move.dst
	lda adr.FP_NAME+1+$20
	sta @move.dst+1
	lda LOC_STRING_30
	sta @move.src
	lda LOC_STRING_30+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 432

	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	lda LOC_STRING_30
	sta @move.src
	lda LOC_STRING_30+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 433

	lda #$00
	sta adr.FP_SEX+$10

; optimize OK (updates.pas), line = 434

	lda #$02
	sta adr.FP_WEAPON+$10

; optimize OK (updates.pas), line = 435

	lda #$0A
	sta adr.FP_ENERGY+$10

; optimize OK (updates.pas), line = 436

	lda #$1E
	sta adr.FP_STRENGTH+$10

; optimize OK (updates.pas), line = 437

	sta adr.FP_BRUTALITY+$10

; optimize FAIL ('DOFIGHT', updates.pas), line = 439

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_645D

; optimize OK (updates.pas), line = 440

	lda #$00
	jmp l_646B
l_645D

; optimize OK (updates.pas), line = 442

	lda #$01
l_646B
	sta JOBDONE

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 443

	jsr ENABLECONSOLE
l_6419
l_638C

; optimize OK (updates.pas), line = 447

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLJOBLOCATION+1,y
	bne @+
	lda adr.PLJOBLOCATION,y
	cmp #$10
@
	jne l_6486

; optimize OK (updates.pas), line = 449

	lda #$13
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 450

	lda #$14
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', updates.pas), line = 451

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 452

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (updates.pas), line = 453

	sta adr.FP_N+$01

; optimize OK (updates.pas), line = 454

	lda adr.FP_NAME+$20
	sta @move.dst
	lda adr.FP_NAME+1+$20
	sta @move.dst+1
	lda LOC_STRING_31
	sta @move.src
	lda LOC_STRING_31+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 455

	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	lda LOC_STRING_31
	sta @move.src
	lda LOC_STRING_31+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 456

	lda #$00
	sta adr.FP_SEX+$10

; optimize OK (updates.pas), line = 457

	sta adr.FP_WEAPON+$10

; optimize OK (updates.pas), line = 458

	lda #$14
	sta adr.FP_ENERGY+$10

; optimize OK (updates.pas), line = 459

	lda #$1E
	sta adr.FP_STRENGTH+$10

; optimize OK (updates.pas), line = 460

	sta adr.FP_BRUTALITY+$10

; optimize FAIL ('DOFIGHT', updates.pas), line = 462

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_64CB

; optimize OK (updates.pas), line = 463

	lda #$00
	jmp l_64D9
l_64CB

; optimize OK (updates.pas), line = 465

	lda #$01
l_64D9
	sta JOBDONE

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 466

	jsr ENABLECONSOLE
l_6486

; optimize OK (updates.pas), line = 470

	lda JOBDONE
	cmp #$01
	jne l_64F2

; optimize OK (updates.pas), line = 472

	ldy CURRENTPLAYER
	lda adr.PLJOB,y
	sub #$01
	sta adr.PLJOB,y

; optimize OK (updates.pas), line = 473

	jeq l_6518
	jmp @exit
l_6518

; optimize FAIL ('JOBWORKING', updates.pas), line = 474

	jsr JOBWORKING

; optimize OK (updates.pas), line = 475

	lda #$15
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 476

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLJOBWAGE,y
	sta B_CRT.CRT_WRITE.@010181000.NUM
	lda adr.PLJOBWAGE+1,y
	sta B_CRT.CRT_WRITE.@010181000.NUM+1
	jsr B_CRT.CRT_WRITE.@010181000

; optimize OK (updates.pas), line = 477

	lda #$16
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', updates.pas), line = 478

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 479

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLJOBWAGE,y
	sta ADDMONEY.AMOUNT
	lda adr.PLJOBWAGE+1,y
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (updates.pas), line = 480

	lda #$03
	jsr ADDPOINTS

; optimize OK (updates.pas), line = 482

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLJOB,y

; optimize OK (updates.pas), line = 483

	tya
	asl @
	tay
	lda #$0F
	sta adr.PLJOBLOCATION,y
	lda #$00
	sta adr.PLJOBLOCATION+1,y
	jmp @exit
l_64F2

; optimize FAIL ('JOBWORKING', updates.pas), line = 487

	jsr JOBWORKING

; optimize OK (updates.pas), line = 488

	lda #$17
	jsr CRT_WRITELN_LOCSTR

; optimize OK (updates.pas), line = 489

	lda #$18
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', updates.pas), line = 490

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 491

	lda #$02
	jsr REMOVEPOINTS

; optimize OK (updates.pas), line = 492

	lda CURRENTPLAYER
	asl @
	tay
	lda #$00
	sta adr.PLJOBLOCATION,y
	sta adr.PLJOBLOCATION+1,y

; optimize OK (updates.pas), line = 493

	ldy CURRENTPLAYER
	sta adr.PLJOB,y
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0CC0
JOBDONE	= DATAORIGIN+$0CC1
R	= DATAORIGIN+$0CC2
P	= DATAORIGIN+$0CC3
CH	= DATAORIGIN+$0CC5
@CASETMP_0016	= DATAORIGIN+$0CC6
@CASETMP_0017	= DATAORIGIN+$0CC7

@VarData	= JOBDONE
@VarDataSize	= 7

	rts						; ret
.endl

.local	CLEARMEMORY					; PROCEDURE

; optimize OK (main.pas), line = 127

	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A
	lda #$D8
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A+1
	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT
	lda #$18
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@03018000001810000188000
	m@INLINE
	.ENDL

; optimize OK (main.pas), line = 128

	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A
	lda #$C0
	sta SYSTEM.FILLCHAR.@03018000001810000188000.A+1
	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT
	lda #$10
	sta SYSTEM.FILLCHAR.@03018000001810000188000.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR.@03018000001810000188000.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR.@03018000001810000188000
	m@INLINE
	.ENDL

; optimize OK (main.pas), line = 129

	lda #$00
	ldy #$43
	sta:rpl $CA00,y-

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITGLOBALVARS					; PROCEDURE

; optimize OK (main.pas), line = 137

	lda #$00
	tay

l_6572
; --- ForToDoCondition
	cpy #$04
	jcs l_6580

; optimize OK (main.pas), line = 139

	lda #$63
	sta adr.PLRENT,y

; optimize OK (main.pas), line = 140

	sta adr.PLLOANSHARK,y

; optimize OK (main.pas), line = 141

	sta adr.PLFREED,y

; --- ForToDoEpilog
	iny
	jne l_6572
l_6580
	sty K

; ------------------------------------------------------------

K	= DATAORIGIN+$0CC8

@VarData	= K
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWCREDITS					; PROCEDURE

; optimize OK (main.pas), line = 150

	lda #$1E
	jsr LOADLOCATION

; optimize FAIL ('SHOWLOCATIONHEADER', main.pas), line = 151

	jsr SHOWLOCATIONHEADER

; optimize OK (main.pas), line = 152

	lda LOC_STRING_1
	sta CUR_LOC_STR
	lda LOC_STRING_1+1
	sta CUR_LOC_STR+1

; optimize OK (main.pas), line = 153

	lda #$00
	sta K

l_65AF
; --- ForToDoCondition
	lda K
	cmp #$0F
	jcs l_65BD

; optimize FAIL ('CRT_WRITELN', main.pas), line = 155

	inx
	mva CUR_LOC_STR :STACKORIGIN,x
	mva CUR_LOC_STR+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (main.pas), line = 156

	lda CUR_LOC_STR
	add #$28
	sta CUR_LOC_STR
	scc
	inc CUR_LOC_STR+1

; --- ForToDoEpilog
	inc K
	jne l_65AF
l_65BD

; optimize FAIL ('WAITFORKEY', main.pas), line = 158

	jsr WAITFORKEY

; optimize FAIL ('SHOWLOCATIONHEADER', main.pas), line = 159

	jsr SHOWLOCATIONHEADER

; optimize OK (main.pas), line = 160

	lda #$00
	sta K

l_65D9
; --- ForToDoCondition
	lda K
	cmp #$0F
	jcs l_65E7

; optimize FAIL ('CRT_WRITELN', main.pas), line = 162

	inx
	mva CUR_LOC_STR :STACKORIGIN,x
	mva CUR_LOC_STR+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (main.pas), line = 163

	lda CUR_LOC_STR
	add #$28
	sta CUR_LOC_STR
	scc
	inc CUR_LOC_STR+1

; --- ForToDoEpilog
	inc K
	jne l_65D9
l_65E7

; optimize FAIL ('WAITFORKEY', main.pas), line = 165

	jsr WAITFORKEY

; ------------------------------------------------------------

K	= DATAORIGIN+$0CC9
CUR_LOC_STR	= DATAORIGIN+$0CCA

@VarData	= K
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_00EA

; optimize OK (main.pas), line = 175

	lda #$22
	sta ATARI.DMACTL

; -------------------  ASM Block 00000176  -------------------


        pha
        jsr xbios.xBIOS_SET_DEFAULT_DEVICE
        lda #$00
        sta xbios.xIRQEN
        pla
    
; optimize FAIL ('SYSTEM.RANDOMIZE', main.pas), line = 184

	jsr SYSTEM.RANDOMIZE

; optimize FAIL ('B_SYSTEM.SYSTEMOFF.@00', main.pas), line = 185

	jsr B_SYSTEM.SYSTEMOFF.@00

; optimize OK (main.pas), line = 195

	lda #$00
	sta PLAYMUSIC

; optimize OK (main.pas), line = 198

	cmp #$63
	jne l_6616

; optimize FAIL ('MUSICPROXY', main.pas), line = 199

	jsr MUSICPROXY
l_6616

; optimize FAIL ('ENABLECONSOLE', main.pas), line = 201

	jsr ENABLECONSOLE

; optimize FAIL ('CLEARMEMORY', main.pas), line = 203

	jsr CLEARMEMORY

; optimize OK (main.pas), line = 204

	lda E7FNAME
	sta LOADXAPL.FNAME
	lda E7FNAME+1
	sta LOADXAPL.FNAME+1
	lda #$00
	sta LOADXAPL.OUTPUTPOINTER
	lda #$E7
	sta LOADXAPL.OUTPUTPOINTER+1
	jsr LOADXAPL

; optimize FAIL ('INITGLOBALVARS', main.pas), line = 206

	jsr INITGLOBALVARS

; optimize FAIL ('SHOWCREDITS', main.pas), line = 207

	jsr SHOWCREDITS

; optimize FAIL ('SETUPGAME', main.pas), line = 209

	jsr SETUPGAME

; optimize OK (main.pas), line = 211

	lda #$00
	sta MSX.PLAYER
	lda #$F0
	sta MSX.PLAYER+1

; optimize OK (main.pas), line = 212

	lda #$00
	sta MSX.MODUL
	lda #$F7
	sta MSX.MODUL+1

; optimize OK (main.pas), line = 215

	lda #$00
	sta PLAYMUSIC

; optimize OK (main.pas), line = 220

	lda #$01
	sta SHOWBITMAPS

; --- RepeatUntilProlog
l_6634

; optimize OK (main.pas), line = 224

	ldy #1
	lda GAMELENGTH
	cmp CURRENTYEAR
	bcc @+
	dey
@
	tya
	sta GAMEENDS

; optimize OK (main.pas), line = 226

	lda CURRENTPLAYER
	jne l_6654

; optimize OK (main.pas), line = 227

	sta K
	ldy NPLAYERS
	dey
	sty @FORTMP_6661_0

l_6664
; --- ForToDoCondition
	lda @FORTMP_6661_0::#$00
	cmp K
	jcc l_6672

; optimize OK (main.pas), line = 228

	ldy K
	lda #$00
	cmp GAMEPOINTS+1
	bne @+
	lda adr.PLPOINTS,y
	cmp GAMEPOINTS
@
	jcc l_6688

; optimize OK (main.pas), line = 229

	lda adr.PLMONEYTRANSPORTER,y
	cmp #$01
	jne l_669E

; optimize OK (main.pas), line = 230

	lda adr.PLKILLEDMAJOR,y
	cmp #$01
	jne l_66B4

; optimize OK (main.pas), line = 232

	lda #$01
	sta adr.PLWINNERS,y

; optimize OK (main.pas), line = 233

	inc GAMEENDS

; optimize OK (main.pas), line = 234

	inc PLNWINNERS
l_66B4
l_669E
l_6688

; --- ForToDoEpilog
	inc K
	jne l_6664
l_6672
l_6654

; optimize OK (main.pas), line = 237

	lda GAMEENDS
	jeq l_66EF
	jmp b_6634
l_66EF

; optimize OK (main.pas), line = 239

	lda #$13
	jsr LOADLOCATION

; optimize FAIL ('ENABLECONSOLE', main.pas), line = 240

	jsr ENABLECONSOLE

; optimize FAIL ('PLAYERSTURN', main.pas), line = 241

	jsr PLAYERSTURN
	lda PLAYERSTURN.RESULT
	cmp #$1D
	jne l_6705
	jmp c_6634
l_6705

; optimize FAIL ('BLACKCONSOLE', main.pas), line = 245

	jsr BLACKCONSOLE

; optimize OK (main.pas), line = 247

	lda #$0F
	sta CURRENTLOCATION

; optimize OK (main.pas), line = 248

	sta LASTLOCATION

; optimize FAIL ('UPDATERANK', main.pas), line = 250

	jsr UPDATERANK

; optimize OK (main.pas), line = 256

	ldy CURRENTPLAYER
	lda adr.PLFAKEMONEY,y
	jeq l_6727

; optimize OK (main.pas), line = 258

	sub #$01
	sta adr.PLFAKEMONEY,y

; optimize OK (main.pas), line = 259

	jne l_674D

; optimize FAIL ('ENABLECONSOLE', main.pas), line = 261

	jsr ENABLECONSOLE

; optimize FAIL ('JOBWORKING', main.pas), line = 262

	jsr JOBWORKING

; optimize OK (main.pas), line = 263

	lda #$0B
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', main.pas), line = 264

	jsr WAITFORKEY
l_674D
l_6727

; optimize OK (main.pas), line = 269

	ldy CURRENTPLAYER
	lda adr.PLFORGEDID,y
	jeq l_676C

; optimize OK (main.pas), line = 271

	lda #$0C
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	cmp #$01
	jne l_677E

; optimize FAIL ('ENABLECONSOLE', main.pas), line = 273

	jsr ENABLECONSOLE

; optimize FAIL ('JOBWORKING', main.pas), line = 274

	jsr JOBWORKING

; optimize OK (main.pas), line = 275

	lda #$0C
	jsr CRT_WRITELN_LOCSTR

; optimize FAIL ('WAITFORKEY', main.pas), line = 276

	jsr WAITFORKEY

; optimize OK (main.pas), line = 277

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLFORGEDID,y
l_677E
l_676C

; optimize FAIL ('UPDATEGANGSTERS', main.pas), line = 281

	jsr UPDATEGANGSTERS

; optimize FAIL ('UPDATERENT', main.pas), line = 282

	jsr UPDATERENT

; optimize FAIL ('UPDATEOPPORTUNITIES', main.pas), line = 283

	jsr UPDATEOPPORTUNITIES

; optimize FAIL ('UPDATEPRISON', main.pas), line = 284

	jsr UPDATEPRISON

; optimize OK (main.pas), line = 287

	ldy CURRENTPLAYER
	lda adr.PLBRIBE,y
	jeq l_67A8

; optimize OK (main.pas), line = 288

	sub #$01
	sta adr.PLBRIBE,y
l_67A8

; optimize OK (main.pas), line = 290

	lda CURRENTLOCATION
	cmp #$11
	jne l_67CD

; optimize FAIL ('NEXTPLAYER', main.pas), line = 291

	jsr NEXTPLAYER
	jmp c_6634
l_67CD

; optimize OK (main.pas), line = 296

	lda #$16
	jsr LOADLOCATION

; optimize FAIL ('UPDATELOANSHARK', main.pas), line = 297

	jsr UPDATELOANSHARK

; optimize OK (main.pas), line = 298

	ldy CURRENTPLAYER
	lda adr.PLJOB,y
	jeq l_67E9

; optimize FAIL ('UPDATEJOB', main.pas), line = 300

	jsr UPDATEJOB

; optimize OK (main.pas), line = 301

	lda #$11
	sta CURRENTLOCATION

; optimize FAIL ('NEXTPLAYER', main.pas), line = 303

	jsr NEXTPLAYER
	jmp c_6634
l_67E9

; optimize OK (main.pas), line = 307

	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	tay
	lda adr.CARRANGE,y
	ldy CURRENTPLAYER
	sta adr.PLSTEPS,y

; optimize FAIL ('PLACECURRENTPLAYER', main.pas), line = 308

	jsr PLACECURRENTPLAYER

; optimize FAIL ('LOADMAP', main.pas), line = 309

	jsr LOADMAP

; optimize FAIL ('ENABLESPRITES', main.pas), line = 310

	jsr ENABLESPRITES

; optimize FAIL ('PRINTMAPSTATUS', main.pas), line = 311

	jsr PRINTMAPSTATUS

; optimize OK (main.pas), line = 313

	lda #$00
	sta LASTACTION

; --- WhileProlog
	jmp l_680B
l_680C

; optimize FAIL ('ENABLEMAPCONSOLE', main.pas), line = 318

	jsr ENABLEMAPCONSOLE

; optimize FAIL ('PRINTMAPSTATUS', main.pas), line = 319

	jsr PRINTMAPSTATUS

; optimize OK (main.pas), line = 320

	lda #$00
	jsr PAINTPLAYER

; --- RepeatUntilProlog
l_6811

; optimize FAIL ('READKEYANDSTICK', main.pas), line = 323

	jsr READKEYANDSTICK
	lda READKEYANDSTICK.RESULT
	sta CH

; optimize OK (main.pas), line = 331

	cmp #$1F
	jne l_6827

; optimize OK (main.pas), line = 332

	lda SHOWBITMAPS
	eor #$01
	sta SHOWBITMAPS
l_6827

; optimize OK (main.pas), line = 338

	lda CH
	cmp #$65
	jne l_6846

; optimize OK (main.pas), line = 340

	lda #$10
	sta ADDMONEY.AMOUNT
	lda #$27
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (main.pas), line = 341

	lda #$1E
	jsr WAITFRAMES
l_6846

; optimize OK (main.pas), line = 344

	lda CH
	cmp #$6E
	jne l_685F

; optimize OK (main.pas), line = 346

	ldy CURRENTPLAYER
	lda adr.PLPOINTS,y
	add #$05
	sta adr.PLPOINTS,y

; optimize OK (main.pas), line = 347

	lda #$FF
	sta adr.PLOPPORTUNITY,y

; optimize OK (main.pas), line = 348

	lda #$01
	sta adr.PLMONEYTRANSPORTER,y

; optimize OK (main.pas), line = 349

	sta adr.PLKILLEDMAJOR,y

; optimize OK (main.pas), line = 350

	lda #$1E
	jsr WAITFRAMES
l_685F

; optimize OK (main.pas), line = 354

	lda CH
	cmp #$1C
	jne l_689B

; optimize OK (main.pas), line = 356

	lda #$15
	jsr LOADLOCATION

; optimize FAIL ('SHOWLOCATIONHEADER', main.pas), line = 357

	jsr SHOWLOCATIONHEADER

; optimize OK (main.pas), line = 358

	lda #$03
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$12
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (main.pas), line = 359

	lda #$0F
	sta B_CRT.CRT_GOTOXY.X
	lda #$04
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (main.pas), line = 360

	lda GAMELENGTH
	sub CURRENTYEAR
	sta TMP

; optimize OK (main.pas), line = 361

	jsr B_CRT.CRT_WRITE.@010180000

; optimize OK (main.pas), line = 362

	lda #$13
	jsr CRT_WRITE_LOCSTR

; optimize OK (main.pas), line = 363

	lda #$06
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$14
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (main.pas), line = 364

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$04
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (main.pas), line = 365

	lda #$01
	sta SHOWWEAPONS

; optimize FAIL ('PRINTGANGSTERS', main.pas), line = 366

	jsr PRINTGANGSTERS

; optimize OK (main.pas), line = 367

	lda #$00
	sta SHOWWEAPONS

; optimize OK (main.pas), line = 368

	sta B_CRT.CRT_GOTOXY.X
	lda #$14
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('WAITFORKEY', main.pas), line = 369

	jsr WAITFORKEY

; optimize FAIL ('ENABLEMAPCONSOLE', main.pas), line = 370

	jsr ENABLEMAPCONSOLE

; optimize FAIL ('PRINTMAPSTATUS', main.pas), line = 371

	jsr PRINTMAPSTATUS

; optimize OK (main.pas), line = 372

	lda #$00
	jsr PAINTPLAYER
	jmp c_6811
l_689B

; optimize OK (main.pas), line = 375

	lda CH
	jsr MOVECURRENTPLAYER
	lda MOVECURRENTPLAYER.RESULT
	sta CURRENTLOCATION

; optimize OK (main.pas), line = 376

	cmp #$11
	jne l_68E9
	jmp b_6811
l_68E9

; optimize FAIL ('PRINTMAPSTATUS', main.pas), line = 377

	jsr PRINTMAPSTATUS

; optimize OK (main.pas), line = 378

	lda #$01
	sta MAPRELOADED

; optimize FAIL ('CHANGEMAP', main.pas), line = 379

	jsr CHANGEMAP

; optimize OK (main.pas), line = 380

	ldy #1
	lda CURRENTLOCATION
	cmp #$10
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy CURRENTPLAYER
	lda adr.PLSTEPS,y
	sta :STACKORIGIN+10
	ldy #1
	lda :STACKORIGIN+10
	bmi @+
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	bne *+5
c_6811
	jmp l_6811
b_6811

; optimize OK (main.pas), line = 382

	lda CURRENTLOCATION
	cmp #$11
	jne l_6920

; optimize OK (main.pas), line = 384

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLSTEPS,y

; optimize FAIL ('BLACKCONSOLE', main.pas), line = 385

	jsr BLACKCONSOLE
	jmp b_680C
l_6920

; optimize OK (main.pas), line = 390

	lda CURRENTLOCATION
	cmp #$0F
	jeq l_6949x
	cmp #$10
	jne l_6949
l_6949x
	jmp b_680C
l_6949

; optimize OK (main.pas), line = 393

	lda OLDMAPPOS_X
	sta MAPPOS_X

; optimize OK (main.pas), line = 394

	lda OLDMAPPOS_Y
	sta MAPPOS_Y

; optimize OK (main.pas), line = 395

	lda OLDPLAYERPOS_X
	sta PLAYERPOS_X

; optimize OK (main.pas), line = 396

	lda OLDPLAYERPOS_Y
	sta PLAYERPOS_Y

; optimize OK (main.pas), line = 397

	ldy CURRENTPLAYER
	lda adr.PLSTEPS,y
	sub #$06
	sta adr.PLSTEPS,y

; optimize FAIL ('CLEARSPRITES', main.pas), line = 399

	jsr CLEARSPRITES

; optimize FAIL ('BLACKCONSOLE', main.pas), line = 402

	jsr BLACKCONSOLE

; optimize OK (main.pas), line = 404

	lda CURRENTLOCATION
	jsr SHOWLOCATION
	lda SHOWLOCATION.RESULT
	sta CURRENTCHOICE

; optimize OK (main.pas), line = 405

	cmp LOC_NOPTIONS
	jne l_6991

; optimize OK (main.pas), line = 406

	lda #$0F
	sta CURRENTLOCATION
l_6991

; optimize OK (main.pas), line = 408

	lda CURRENTLOCATION
	sta @CASETMP_0018
	cmp #$01
	jne l_69A3
@

; optimize FAIL ('BANKCHOICES', main.pas), line = 409

	jsr BANKCHOICES
	lda BANKCHOICES.RESULT
	sta OUTCOME
	jmp a_0018
l_69A3
	cmp #$02
	jne l_69AE

; optimize FAIL ('FORGERYCHOICES', main.pas), line = 410

	jsr FORGERYCHOICES
	lda FORGERYCHOICES.RESULT
	sta OUTCOME
	jmp a_0018
l_69AE
	cmp #$03
	jne l_69B9

; optimize FAIL ('MONEYTRANSPORTERCHOICES', main.pas), line = 411

	jsr MONEYTRANSPORTERCHOICES
	lda MONEYTRANSPORTERCHOICES.RESULT
	sta OUTCOME
	jmp a_0018
l_69B9
	cmp #$04
	jne l_69C4

; optimize FAIL ('LOANSHARKCHOICES', main.pas), line = 412

	jsr LOANSHARKCHOICES
	lda LOANSHARKCHOICES.RESULT
	sta OUTCOME
	jmp a_0018
l_69C4
	cmp #$05
	jne l_69CF

; optimize FAIL ('POLICECHOICES', main.pas), line = 413

	jsr POLICECHOICES
	lda POLICECHOICES.RESULT
	sta OUTCOME
	jmp a_0018
l_69CF
	cmp #$06
	jne l_69DA

; optimize FAIL ('CARDEALERCHOICES', main.pas), line = 414

	jsr CARDEALERCHOICES
	lda CARDEALERCHOICES.RESULT
	sta OUTCOME
	jmp a_0018
l_69DA
	cmp #$07
	jne l_69E5

; optimize FAIL ('PUBCHOICES', main.pas), line = 415

	jsr PUBCHOICES
	lda PUBCHOICES.RESULT
	sta OUTCOME
	jmp a_0018
l_69E5
	cmp #$17
	jne l_69F0

; optimize FAIL ('CENTRALSTATIONCHOICES', main.pas), line = 416

	jsr CENTRALSTATIONCHOICES
	lda CENTRALSTATIONCHOICES.RESULT
	sta OUTCOME
	jmp a_0018
l_69F0
	cmp #$09
	jne l_69FB

; optimize FAIL ('STORECHOICES', main.pas), line = 417

	jsr STORECHOICES
	lda STORECHOICES.RESULT
	sta OUTCOME
	jmp a_0018
l_69FB
	cmp #$0A
	jne l_6A06

; optimize FAIL ('HIDEOUTCHOICES', main.pas), line = 418

	jsr HIDEOUTCHOICES
	lda HIDEOUTCHOICES.RESULT
	sta OUTCOME
	jmp a_0018
l_6A06
	cmp #$0B
	jne l_6A11

; optimize FAIL ('GAMBLINGCHOICES', main.pas), line = 419

	jsr GAMBLINGCHOICES
	lda GAMBLINGCHOICES.RESULT
	sta OUTCOME
	jmp a_0018
l_6A11
	cmp #$0C
	jne l_6A1C

; optimize FAIL ('SUBWAYCHOICES', main.pas), line = 420

	jsr SUBWAYCHOICES
	lda SUBWAYCHOICES.RESULT
	sta OUTCOME
	jmp a_0018
l_6A1C
	cmp #$0D
	jne l_6A27

; optimize FAIL ('ARMSDEALERCHOICES', main.pas), line = 421

	jsr ARMSDEALERCHOICES
	lda ARMSDEALERCHOICES.RESULT
	sta OUTCOME
	jmp a_0018
l_6A27
	cmp #$18
	jne l_6A32

; optimize FAIL ('MAJORCHOICES', main.pas), line = 422

	jsr MAJORCHOICES
	lda MAJORCHOICES.RESULT
	sta OUTCOME
	jmp a_0018
l_6A32
	cmp #$0F
	jne l_6A3D

; optimize OK (main.pas), line = 423

	lda #$0F
	sta OUTCOME
l_6A3D
a_0018

; optimize OK (main.pas), line = 426

	lda #$00
	sta MAPRELOADED

; optimize OK (main.pas), line = 427

	lda CURRENTLOCATION
	sta LASTLOCATION

; optimize OK (main.pas), line = 428

	lda OUTCOME
	sta CURRENTLOCATION

; optimize OK (main.pas), line = 431

	lda DIDFIGHT
	cmp #$01
	jne l_6A74

; optimize OK (main.pas), line = 432

	lda #$00
	sta DIDFIGHT

; optimize OK (main.pas), line = 433

	lda OLDMAPPOS_X
	sta MAPPOS_X

; optimize OK (main.pas), line = 434

	lda OLDMAPPOS_Y
	sta MAPPOS_Y

; optimize OK (main.pas), line = 435

	lda OLDPLAYERPOS_X
	sta PLAYERPOS_X

; optimize OK (main.pas), line = 436

	lda OLDPLAYERPOS_Y
	sta PLAYERPOS_Y

; optimize OK (main.pas), line = 437

	ldy CURRENTPLAYER
	lda adr.PLSTEPS,y
	jeq l_6AB2x
	lda CURRENTLOCATION
	cmp #$11
	jne l_6AB2
l_6AB2x
	jmp b_680C
l_6AB2

; optimize FAIL ('LOADMAP', main.pas), line = 438

	jsr LOADMAP

; optimize FAIL ('ENABLESPRITES', main.pas), line = 439

	jsr ENABLESPRITES

; optimize FAIL ('PRINTMAPSTATUS', main.pas), line = 440

	jsr PRINTMAPSTATUS
l_6A74
l_680B

; optimize OK (main.pas), line = 315

	ldy CURRENTPLAYER
	lda adr.PLSTEPS,y
	smi
	bne @+
	jmp l_680Cw
@
	lda CURRENTLOCATION
	cmp #$11
	jeq l_680Cw
@
	jmp l_680C
l_680Cw
b_680C

; optimize OK (main.pas), line = 445

	ldy CURRENTPLAYER
	lda MAPPOS_X
	sta adr.PLMAPPOSX,y

; optimize OK (main.pas), line = 446

	lda MAPPOS_Y
	sta adr.PLMAPPOSY,y

; optimize OK (main.pas), line = 447

	lda CURRENTMAP
	sta adr.PLCURRENTMAP,y

; optimize FAIL ('NEXTPLAYER', main.pas), line = 449

	jsr NEXTPLAYER

; optimize OK (main.pas), line = 450

	ldy #1
	lda GAMEENDS
	cmp #$01
	beq @+
	dey
@
	tya
	bne *+5
c_6634
	jmp l_6634
b_6634

; optimize FAIL ('ENABLECONSOLE', main.pas), line = 453

	jsr ENABLECONSOLE

; optimize FAIL ('B_CRT.CRT_CLEAR.@00', main.pas), line = 454

	jsr B_CRT.CRT_CLEAR.@00

; optimize OK (main.pas), line = 456

	lda #$13
	jsr LOADLOCATION
	ldy #256-12
	mva:rne CODEORIGIN+$00C2+12-256,y adr.FINALFNAME+12-256,y+

; optimize OK (main.pas), line = 460

	lda PLNWINNERS
	cmp #$01
	jne l_6B14

; optimize OK (main.pas), line = 461

	lda #$00
	sta K
	ldy NPLAYERS
	dey
	sty @FORTMP_6B21_0

l_6B24
; --- ForToDoCondition
	lda @FORTMP_6B21_0::#$00
	cmp K
	jcc l_6B32

; optimize OK (main.pas), line = 463

	ldy K
	lda adr.PLWINNERS,y
	cmp #$01
	jne l_6B47

; optimize OK (main.pas), line = 465

	lda K
	asl @
	asl @
	asl @
	sta TMP

; optimize FAIL ('B_CRT.CRT_WRITECENTERED.@02018986000001000180000', main.pas), line = 466

	inx
	lda TMP
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :bp2
	lda adr.GANGSTERNAMES+1,y
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITECENTERED.@02018986000001000180000.adr.S,y+
	inx
	mva #$05 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED.@02018986000001000180000

; optimize OK (main.pas), line = 467

	lda #$07
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$23
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (main.pas), line = 468

	lda #$08
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$24
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR

; optimize OK (main.pas), line = 469

	lda #$09
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$25
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR
l_6B47

; --- ForToDoEpilog
	inc K
	jne l_6B24
l_6B32
	jmp l_6B72
l_6B14

; optimize OK (main.pas), line = 481

	lda PLNWINNERS
	jeq l_6B84

; optimize OK (main.pas), line = 482

	lda #$05
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$26
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR
l_6B84

; optimize OK (main.pas), line = 483

	lda #$00
	sta CURRENTCHOICE

; optimize OK (main.pas), line = 484

	sta K
	ldy NPLAYERS
	dey
	sty @FORTMP_6B9A_0

l_6B9D
; --- ForToDoCondition
	lda @FORTMP_6B9A_0::#$00
	cmp K
	jcc l_6BAB

; optimize OK (main.pas), line = 486

	ldy K
	lda adr.PLWINNERS,y
	cmp #$01
	jne l_6BC0

; optimize OK (main.pas), line = 488

	lda K
	asl @
	asl @
	asl @
	sta TMP

; optimize FAIL ('B_CRT.CRT_WRITECENTERED.@02018986000001000180000', main.pas), line = 489

	inx
	lda TMP
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :bp2
	lda adr.GANGSTERNAMES+1,y
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y B_CRT.CRT_WRITECENTERED.@02018986000001000180000.adr.S,y+
	inx
	lda #$07
	add CURRENTCHOICE
	sta :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED.@02018986000001000180000

; optimize OK (main.pas), line = 490

	inc CURRENTCHOICE
l_6BC0

; --- ForToDoEpilog
	inc K
	jne l_6B9D
l_6BAB

; optimize OK (main.pas), line = 493

	lda #$07
	add CURRENTCHOICE
	add #$02
	sta CRT_WRITECENTERED_LOCSTR.R
	lda #$27
	sta CRT_WRITECENTERED_LOCSTR.B
	jsr CRT_WRITECENTERED_LOCSTR
l_6B72

; optimize FAIL ('CRT_READKEYORFIRE', main.pas), line = 496

	jsr CRT_READKEYORFIRE

; optimize FAIL ('B_SYSTEM.DISABLEDLI', main.pas), line = 497

	jsr B_SYSTEM.DISABLEDLI

; optimize OK (main.pas), line = 498

	lda #$B0
	sta ATARI.DLISTL
	lda #$FF
	sta ATARI.DLISTL+1

; optimize OK (main.pas), line = 499

	lda #$0A
	jsr WAITFRAMES

; optimize OK (main.pas), line = 503

	lda FINALFNAME
	sta LOADXAPL.FNAME
	lda FINALFNAME+1
	sta LOADXAPL.FNAME+1
	lda #$FA
	sta LOADXAPL.OUTPUTPOINTER
	lda #$2F
	sta LOADXAPL.OUTPUTPOINTER+1
	jsr LOADXAPL
	ldy #256-12
	mva:rne CODEORIGIN+$00CE+12-256,y adr.FINALFNAME+12-256,y+

; optimize OK (main.pas), line = 506

	lda FINALFNAME
	sta LOADXAPL.FNAME
	lda FINALFNAME+1
	sta LOADXAPL.FNAME+1
	lda #$00
	sta LOADXAPL.OUTPUTPOINTER
	lda #$B8
	sta LOADXAPL.OUTPUTPOINTER+1
	jsr LOADXAPL
	ldy #256-12
	mva:rne CODEORIGIN+$00DA+12-256,y adr.FINALFNAME+12-256,y+

; optimize OK (main.pas), line = 508

	lda FINALFNAME
	sta LOADXAPL.FNAME
	lda FINALFNAME+1
	sta LOADXAPL.FNAME+1
	lda #$00
	sta LOADXAPL.OUTPUTPOINTER
	lda #$B0
	sta LOADXAPL.OUTPUTPOINTER+1
	jsr LOADXAPL

; -------------------  ASM Block 00000177  -------------------

        lda #$70
        ldx #$00  ; low byte of music
        ldy #$b8 ; high byte <-- CHANGE TOO if music addr changes
        jsr $b000+3
        lda #$00
        ldx #$00
        jsr $b000+3
    
; -------------------  ASM Block 00000178  -------------------

    lpend:
        jsr $6800;
        jmp lpend
    
; ------------------------------------------------------------

TXT_ADDRESS	= $B000
MAINFONT_ADR	= $B400
PMG_BASE_ADR	= $B800
LOCATION_ADR	= $C000
VARBLOCK2	= $C920
VARBLOCK1	= $CA00
MAP_FNT_ADDRESS	= $D800
MAP_SCR_ADDRESS	= $DC00
LOC_MAP_ADR	= $E000
VARFIGHT	= $E400
E7_ADR	= $E700
RMT_PLAYER	= $F000
RMT_MODUL	= $F700
DL_CONSOLE_ADR	= $FF70
DL_MAP_ADR	= $FF90
DL_BLACK_CONSOLE_ADR	= $FFB0
DL_BITMAP_ADR	= $FFB8
XEX_ADDRESS	= $1FFA
SAP_PLAYER	= $B000
SAP_PLAYER_3	= $B003
SAP_PLAYER_6	= $B006
MF_ZPLOCATION	= $D8
CARTOP	= $BFFF
CARBAS	= $A000
GINTLK	= $03FA
TRIG3	= $D013
ZEROBANK	= $D500
CARTOFF	= $D580
CARBASE	= $A000
adr.BANKS	= $D500
.var BANKS	= adr.BANKS .word
COPYSRC	= $D8
COPYDST	= $DA
WORKPAGES	= $DB
CURBANK	= $DC
CURSEC	= $DD
SAVE_LOCATION_ADR	= $C200
SAVE_LASTSAVE	= $C200
SAVEBANK	= $C201
SAVEADDRESS	= $C202
SAVE_SLOT	= $C204
SAVE_GAMEFOUND	= $C205
SAVE_SAVENUM	= $C206
TMP_AA	= $C207
TMP_55	= $C208
BANK_BANK	= $C209
BANK_SRC	= $C20A
BANK_DEST	= $C20C
BANK_SIZE	= $C20E
BANK_VAL	= $C210
BANK_SECTOR	= $C211
BANK_WRITE	= $C212
LASTLOCATION	= DATAORIGIN+$074F
adr.MSX	= DATAORIGIN+$0750	; [4] OBJECT
.var MSX	= adr.MSX .word
MSX.PLAYER	= DATAORIGIN+$0750
MSX.MODUL	= DATAORIGIN+$0752
NPLAYERS	= $C920
LASTLOCATIONSTRINGS	= $C921
CURRENTCHOICE	= $C922
SHOWWEAPONS	= $C923
adr.PLSTUFF	= $C924
.var PLSTUFF	= adr.PLSTUFF .word
adr.PLMONEYTRANSPORTER	= $C928
.var PLMONEYTRANSPORTER	= adr.PLMONEYTRANSPORTER .word
adr.PLKILLEDMAJOR	= $C92C
.var PLKILLEDMAJOR	= adr.PLKILLEDMAJOR .word
adr.PLMONEY	= $C930
.var PLMONEY	= adr.PLMONEY .word
adr.PLFAKEMONEY	= $C940
.var PLFAKEMONEY	= adr.PLFAKEMONEY .word
adr.PLALCOHOL	= $C944
.var PLALCOHOL	= adr.PLALCOHOL .word
adr.PLFORGEDID	= $C948
.var PLFORGEDID	= adr.PLFORGEDID .word
adr.PLCAR	= $C94C
.var PLCAR	= adr.PLCAR .word
adr.PLSTEPS	= $C950
.var PLSTEPS	= adr.PLSTEPS .word
adr.PLMAPPOSX	= $C954
.var PLMAPPOSX	= adr.PLMAPPOSX .word
adr.PLMAPPOSY	= $C958
.var PLMAPPOSY	= adr.PLMAPPOSY .word
adr.PLCURRENTMAP	= $C95C
.var PLCURRENTMAP	= adr.PLCURRENTMAP .word
adr.PLOPPORTUNITY	= $C960
.var PLOPPORTUNITY	= adr.PLOPPORTUNITY .word
adr.PLLOAN	= $C964
.var PLLOAN	= adr.PLLOAN .word
adr.PLLOANTIME	= $C96C
.var PLLOANTIME	= adr.PLLOANTIME .word
adr.PLLOANSHARK	= $C970
.var PLLOANSHARK	= adr.PLLOANSHARK .word
adr.PLRENTMONTHS	= $C974
.var PLRENTMONTHS	= adr.PLRENTMONTHS .word
adr.PLRENTCOST	= $C978
.var PLRENTCOST	= adr.PLRENTCOST .word
adr.PLBRIBE	= $C97C
.var PLBRIBE	= adr.PLBRIBE .word
adr.PLJOB	= $C980
.var PLJOB	= adr.PLJOB .word
adr.PLJOBWAGE	= $C984
.var PLJOBWAGE	= adr.PLJOBWAGE .word
adr.PLJOBLOCATION	= $C98C
.var PLJOBLOCATION	= adr.PLJOBLOCATION .word
adr.PLPRISON	= $C994
.var PLPRISON	= adr.PLPRISON .word
adr.PLRANK	= $C998
.var PLRANK	= adr.PLRANK .word
adr.PLPOINTS	= $C99C
.var PLPOINTS	= adr.PLPOINTS .word
adr.PLNEWPOINTS	= $C9A0
.var PLNEWPOINTS	= adr.PLNEWPOINTS .word
adr.PLLOANINVEST	= $C9A4
.var PLLOANINVEST	= adr.PLLOANINVEST .word
adr.PLFREED	= $C9AC
.var PLFREED	= adr.PLFREED .word
FP_WINNER	= $E400
adr.FP_AI	= $E401
.var FP_AI	= adr.FP_AI .word
adr.FP_N	= $E403
.var FP_N	= adr.FP_N .word
adr.FP_POSW	= $E405
.var FP_POSW	= adr.FP_POSW .word
adr.FP_WEAPON	= $E445
.var FP_WEAPON	= adr.FP_WEAPON .word
adr.FP_ENERGY	= $E485
.var FP_ENERGY	= adr.FP_ENERGY .word
adr.FP_STRENGTH	= $E4C5
.var FP_STRENGTH	= adr.FP_STRENGTH .word
adr.FP_BRUTALITY	= $E505
.var FP_BRUTALITY	= adr.FP_BRUTALITY .word
adr.FP_SEX	= $E545
.var FP_SEX	= adr.FP_SEX .word
adr.FP_GANG_1	= $E585
.var FP_GANG_1	= adr.FP_GANG_1 .word
adr.FP_GANG_2	= $E595
.var FP_GANG_2	= adr.FP_GANG_2 .word
adr.FP_NAME_1	= $E5A5
.var FP_NAME_1	= adr.FP_NAME_1 .word
adr.FP_NAME_2	= $E5B5
.var FP_NAME_2	= adr.FP_NAME_2 .word
adr.FP_NAME_3	= $E5C5
.var FP_NAME_3	= adr.FP_NAME_3 .word
adr.FP_NAME_4	= $E5D5
.var FP_NAME_4	= adr.FP_NAME_4 .word
adr.FP_NAME_5	= $E5E5
.var FP_NAME_5	= adr.FP_NAME_5 .word
adr.FP_NAME_6	= $E5F5
.var FP_NAME_6	= adr.FP_NAME_6 .word
adr.FP_NAME_7	= $E605
.var FP_NAME_7	= adr.FP_NAME_7 .word
adr.FP_NAME_8	= $E615
.var FP_NAME_8	= adr.FP_NAME_8 .word
adr.FP_NAME_9	= $E625
.var FP_NAME_9	= adr.FP_NAME_9 .word
adr.FP_NAME_10	= $E635
.var FP_NAME_10	= adr.FP_NAME_10 .word
adr.FP_NAME_11	= $E645
.var FP_NAME_11	= adr.FP_NAME_11 .word
adr.FP_NAME_12	= $E655
.var FP_NAME_12	= adr.FP_NAME_12 .word
adr.FP_NAME_13	= $E665
.var FP_NAME_13	= adr.FP_NAME_13 .word
adr.FP_NAME_14	= $E675
.var FP_NAME_14	= adr.FP_NAME_14 .word
adr.FP_NAME_15	= $E685
.var FP_NAME_15	= adr.FP_NAME_15 .word
adr.FP_NAME_16	= $E695
.var FP_NAME_16	= adr.FP_NAME_16 .word
adr.FP_NAME_17	= $E6A5
.var FP_NAME_17	= adr.FP_NAME_17 .word
adr.FP_NAME_18	= $E6B5
.var FP_NAME_18	= adr.FP_NAME_18 .word
adr.FP_NAME_19	= $E6C5
.var FP_NAME_19	= adr.FP_NAME_19 .word
adr.FP_NAME_20	= $E6D5
.var FP_NAME_20	= adr.FP_NAME_20 .word
FP_CURRENTPLAYER	= $E6E5
FP_CURRENTSITE	= $E6E6
FP_CURRENTCOMMAND	= $E6E7
FP_VALIDCMD	= $E6E8
SHOOT_DIFF	= $E6E9
SHOOT_START	= $E6EA
F_CURPOS	= $E6EF
FIGHT_BULLETTIME	= $03
FIGHT_HITTIME	= $14
FIGHT_TEXTTIME	= $32
FIGHT_ROUNDTIME	= $05
FIGHT_DEADTIME	= $46
adr.FP_GANG	= [DATAORIGIN+$0754] .array [2] .word
.var FP_GANG	= adr.FP_GANG .word
adr.FP_NAME	= [DATAORIGIN+$0758] .array [32] .word
.var FP_NAME	= adr.FP_NAME .word
TMPSTR	= DATAORIGIN+$0798
TMP	= DATAORIGIN+$079A
adr.LOC_NAME	= $C000
.var LOC_NAME	= adr.LOC_NAME .word
adr.LOC_SUBLOCATION_NAME_1	= $C028
.var LOC_SUBLOCATION_NAME_1	= adr.LOC_SUBLOCATION_NAME_1 .word
adr.LOC_SUBLOCATION_NAME_2	= $C050
.var LOC_SUBLOCATION_NAME_2	= adr.LOC_SUBLOCATION_NAME_2 .word
adr.LOC_SUBLOCATION_NAME_3	= $C078
.var LOC_SUBLOCATION_NAME_3	= adr.LOC_SUBLOCATION_NAME_3 .word
adr.LOC_SUBLOCATION_NAME_4	= $C0A0
.var LOC_SUBLOCATION_NAME_4	= adr.LOC_SUBLOCATION_NAME_4 .word
adr.LOC_OPTIONS_1	= $C0C8
.var LOC_OPTIONS_1	= adr.LOC_OPTIONS_1 .word
adr.LOC_OPTIONS_2	= $C0F0
.var LOC_OPTIONS_2	= adr.LOC_OPTIONS_2 .word
adr.LOC_OPTIONS_3	= $C118
.var LOC_OPTIONS_3	= adr.LOC_OPTIONS_3 .word
adr.LOC_OPTIONS_4	= $C140
.var LOC_OPTIONS_4	= adr.LOC_OPTIONS_4 .word
adr.LOC_OPTIONS_5	= $C168
.var LOC_OPTIONS_5	= adr.LOC_OPTIONS_5 .word
adr.LOC_OPTIONS_6	= $C190
.var LOC_OPTIONS_6	= adr.LOC_OPTIONS_6 .word
adr.LOC_OPTIONS_7	= $C1B8
.var LOC_OPTIONS_7	= adr.LOC_OPTIONS_7 .word
adr.LOC_OPTIONS_8	= $C1E0
.var LOC_OPTIONS_8	= adr.LOC_OPTIONS_8 .word
adr.LOC_OPTIONS_9	= $C208
.var LOC_OPTIONS_9	= adr.LOC_OPTIONS_9 .word
adr.LOC_OPTIONS_10	= $C230
.var LOC_OPTIONS_10	= adr.LOC_OPTIONS_10 .word
adr.LOC_DESCRIPTION_1	= $C258
.var LOC_DESCRIPTION_1	= adr.LOC_DESCRIPTION_1 .word
adr.LOC_DESCRIPTION_2	= $C280
.var LOC_DESCRIPTION_2	= adr.LOC_DESCRIPTION_2 .word
LOC_NOPTIONS	= $C2A9
adr.LOC_MAP_PLACES	= $C2AA
.var LOC_MAP_PLACES	= adr.LOC_MAP_PLACES .word
adr.LOC_STRING_1	= $C2B0
.var LOC_STRING_1	= adr.LOC_STRING_1 .word
adr.LOC_STRING_2	= $C2D8
.var LOC_STRING_2	= adr.LOC_STRING_2 .word
adr.LOC_STRING_3	= $C300
.var LOC_STRING_3	= adr.LOC_STRING_3 .word
adr.LOC_STRING_4	= $C328
.var LOC_STRING_4	= adr.LOC_STRING_4 .word
adr.LOC_STRING_5	= $C350
.var LOC_STRING_5	= adr.LOC_STRING_5 .word
adr.LOC_STRING_6	= $C378
.var LOC_STRING_6	= adr.LOC_STRING_6 .word
adr.LOC_STRING_7	= $C3A0
.var LOC_STRING_7	= adr.LOC_STRING_7 .word
adr.LOC_STRING_8	= $C3C8
.var LOC_STRING_8	= adr.LOC_STRING_8 .word
adr.LOC_STRING_9	= $C3F0
.var LOC_STRING_9	= adr.LOC_STRING_9 .word
adr.LOC_STRING_10	= $C418
.var LOC_STRING_10	= adr.LOC_STRING_10 .word
adr.LOC_STRING_11	= $C440
.var LOC_STRING_11	= adr.LOC_STRING_11 .word
adr.LOC_STRING_12	= $C468
.var LOC_STRING_12	= adr.LOC_STRING_12 .word
adr.LOC_STRING_13	= $C490
.var LOC_STRING_13	= adr.LOC_STRING_13 .word
adr.LOC_STRING_14	= $C4B8
.var LOC_STRING_14	= adr.LOC_STRING_14 .word
adr.LOC_STRING_15	= $C4E0
.var LOC_STRING_15	= adr.LOC_STRING_15 .word
adr.LOC_STRING_16	= $C508
.var LOC_STRING_16	= adr.LOC_STRING_16 .word
adr.LOC_STRING_17	= $C530
.var LOC_STRING_17	= adr.LOC_STRING_17 .word
adr.LOC_STRING_18	= $C558
.var LOC_STRING_18	= adr.LOC_STRING_18 .word
adr.LOC_STRING_19	= $C580
.var LOC_STRING_19	= adr.LOC_STRING_19 .word
adr.LOC_STRING_20	= $C5A8
.var LOC_STRING_20	= adr.LOC_STRING_20 .word
adr.LOC_STRING_21	= $C5D0
.var LOC_STRING_21	= adr.LOC_STRING_21 .word
adr.LOC_STRING_22	= $C5F8
.var LOC_STRING_22	= adr.LOC_STRING_22 .word
adr.LOC_STRING_23	= $C620
.var LOC_STRING_23	= adr.LOC_STRING_23 .word
adr.LOC_STRING_24	= $C648
.var LOC_STRING_24	= adr.LOC_STRING_24 .word
adr.LOC_STRING_25	= $C670
.var LOC_STRING_25	= adr.LOC_STRING_25 .word
adr.LOC_STRING_26	= $C698
.var LOC_STRING_26	= adr.LOC_STRING_26 .word
adr.LOC_STRING_27	= $C6C0
.var LOC_STRING_27	= adr.LOC_STRING_27 .word
adr.LOC_STRING_28	= $C6E8
.var LOC_STRING_28	= adr.LOC_STRING_28 .word
adr.LOC_STRING_29	= $C710
.var LOC_STRING_29	= adr.LOC_STRING_29 .word
adr.LOC_STRING_30	= $C738
.var LOC_STRING_30	= adr.LOC_STRING_30 .word
adr.LOC_STRING_31	= $C760
.var LOC_STRING_31	= adr.LOC_STRING_31 .word
adr.LOC_STRING_32	= $C788
.var LOC_STRING_32	= adr.LOC_STRING_32 .word
adr.LOC_STRING_33	= $C7B0
.var LOC_STRING_33	= adr.LOC_STRING_33 .word
adr.LOC_STRING_34	= $C7D8
.var LOC_STRING_34	= adr.LOC_STRING_34 .word
adr.LOC_STRING_35	= $C800
.var LOC_STRING_35	= adr.LOC_STRING_35 .word
adr.LOC_STRING_36	= $C828
.var LOC_STRING_36	= adr.LOC_STRING_36 .word
adr.LOC_STRING_37	= $C850
.var LOC_STRING_37	= adr.LOC_STRING_37 .word
adr.LOC_STRING_38	= $C878
.var LOC_STRING_38	= adr.LOC_STRING_38 .word
adr.LOC_STRING_39	= $C8A0
.var LOC_STRING_39	= adr.LOC_STRING_39 .word
adr.LOC_STRING_40	= $C8C8
.var LOC_STRING_40	= adr.LOC_STRING_40 .word
adr.LOC_STRING_41	= $C8F0
.var LOC_STRING_41	= adr.LOC_STRING_41 .word
LOCCOLBK	= $C918
LOCCOLPF0	= $C919
LOCCOLPF1	= $C91A
LOCCOLPF2	= $C91B
adr.LOC_OPTIONS	= [DATAORIGIN+$079B] .array [10] .word
.var LOC_OPTIONS	= adr.LOC_OPTIONS .word
adr.LOC_SUBLOCATION_NAMES	= [DATAORIGIN+$07AF] .array [4] .word
.var LOC_SUBLOCATION_NAMES	= adr.LOC_SUBLOCATION_NAMES .word
adr.GANGSTERMAP	= $CA00
.var GANGSTERMAP	= adr.GANGSTERMAP .word
GANGSTERCOUNT	= $CA0A
TMPOPPORTUNITY	= $CA0B
adr.PLWINNERS	= $CA0C
.var PLWINNERS	= adr.PLWINNERS .word
PLNWINNERS	= $CA10
PLAYMUSIC	= $CA11
CURRENTLOCATION	= $CA12
adr.PLGANG_1	= $CA44
.var PLGANG_1	= adr.PLGANG_1 .word
adr.PLGANG_2	= $CA54
.var PLGANG_2	= adr.PLGANG_2 .word
adr.PLGANG_3	= $CA64
.var PLGANG_3	= adr.PLGANG_3 .word
adr.PLGANG_4	= $CA74
.var PLGANG_4	= adr.PLGANG_4 .word
adr.PLGANG	= [DATAORIGIN+$07B7] .array [4] .word
.var PLGANG	= adr.PLGANG .word
CURRENTMONTH	= $CAC2
CURRENTYEAR	= $CAC3
GAMELENGTH	= $CAC4
GAMEPOINTS	= $CAC5
LASTACTION	= $CAC7
adr.GANGSTERNAME_1	= $CAC8
.var GANGSTERNAME_1	= adr.GANGSTERNAME_1 .word
adr.GANGSTERNAME_2	= $CAD8
.var GANGSTERNAME_2	= adr.GANGSTERNAME_2 .word
adr.GANGSTERNAME_3	= $CAE8
.var GANGSTERNAME_3	= adr.GANGSTERNAME_3 .word
adr.GANGSTERNAME_4	= $CAF8
.var GANGSTERNAME_4	= adr.GANGSTERNAME_4 .word
adr.GANGSTERNAME_5	= $CB08
.var GANGSTERNAME_5	= adr.GANGSTERNAME_5 .word
adr.GANGSTERNAME_6	= $CB18
.var GANGSTERNAME_6	= adr.GANGSTERNAME_6 .word
adr.GANGSTERNAME_7	= $CB28
.var GANGSTERNAME_7	= adr.GANGSTERNAME_7 .word
adr.GANGSTERNAME_8	= $CB38
.var GANGSTERNAME_8	= adr.GANGSTERNAME_8 .word
adr.GANGSTERNAME_9	= $CB48
.var GANGSTERNAME_9	= adr.GANGSTERNAME_9 .word
adr.GANGSTERNAME_10	= $CB58
.var GANGSTERNAME_10	= adr.GANGSTERNAME_10 .word
adr.GANGSTERNAME_11	= $CB68
.var GANGSTERNAME_11	= adr.GANGSTERNAME_11 .word
adr.GANGSTERNAME_12	= $CB78
.var GANGSTERNAME_12	= adr.GANGSTERNAME_12 .word
adr.GANGSTERNAME_13	= $CB88
.var GANGSTERNAME_13	= adr.GANGSTERNAME_13 .word
adr.GANGSTERNAME_14	= $CB98
.var GANGSTERNAME_14	= adr.GANGSTERNAME_14 .word
adr.GANGSTERNAME_15	= $CBA8
.var GANGSTERNAME_15	= adr.GANGSTERNAME_15 .word
adr.GANGSTERNAME_16	= $CBB8
.var GANGSTERNAME_16	= adr.GANGSTERNAME_16 .word
adr.GANGSTERNAME_17	= $CBC8
.var GANGSTERNAME_17	= adr.GANGSTERNAME_17 .word
adr.GANGSTERNAME_18	= $CBD8
.var GANGSTERNAME_18	= adr.GANGSTERNAME_18 .word
adr.GANGSTERNAME_19	= $CBE8
.var GANGSTERNAME_19	= adr.GANGSTERNAME_19 .word
adr.GANGSTERNAME_20	= $CBF8
.var GANGSTERNAME_20	= adr.GANGSTERNAME_20 .word
adr.GANGSTERNAME_21	= $CC08
.var GANGSTERNAME_21	= adr.GANGSTERNAME_21 .word
adr.GANGSTERNAME_22	= $CC18
.var GANGSTERNAME_22	= adr.GANGSTERNAME_22 .word
adr.GANGSTERNAME_23	= $CC28
.var GANGSTERNAME_23	= adr.GANGSTERNAME_23 .word
adr.GANGSTERNAME_24	= $CC38
.var GANGSTERNAME_24	= adr.GANGSTERNAME_24 .word
adr.GANGSTERNAME_25	= $CC48
.var GANGSTERNAME_25	= adr.GANGSTERNAME_25 .word
adr.GANGSTERNAME_26	= $CC58
.var GANGSTERNAME_26	= adr.GANGSTERNAME_26 .word
adr.GANGSTERNAME_27	= $CC68
.var GANGSTERNAME_27	= adr.GANGSTERNAME_27 .word
adr.GANGSTERNAME_28	= $CC78
.var GANGSTERNAME_28	= adr.GANGSTERNAME_28 .word
adr.GANGSTERNAME_29	= $CC88
.var GANGSTERNAME_29	= adr.GANGSTERNAME_29 .word
adr.GANGSTERNAME_30	= $CC98
.var GANGSTERNAME_30	= adr.GANGSTERNAME_30 .word
adr.GANGSTERNAME_31	= $CCA8
.var GANGSTERNAME_31	= adr.GANGSTERNAME_31 .word
adr.GANGSTERNAME_32	= $CCB8
.var GANGSTERNAME_32	= adr.GANGSTERNAME_32 .word
adr.GANGSTERSTR	= $CCC8
.var GANGSTERSTR	= adr.GANGSTERSTR .word
adr.GANGSTERINT	= $CCE8
.var GANGSTERINT	= adr.GANGSTERINT .word
adr.GANGSTERBRUT	= $CD08
.var GANGSTERBRUT	= adr.GANGSTERBRUT .word
adr.GANGSTERHEALTH	= $CD28
.var GANGSTERHEALTH	= adr.GANGSTERHEALTH .word
adr.GANGSTERWEAPON	= $CD48
.var GANGSTERWEAPON	= adr.GANGSTERWEAPON .word
adr.GANGSTERSEX	= $CD68
.var GANGSTERSEX	= adr.GANGSTERSEX .word
CURRENTGANGSTER	= $CD88
GAMEENDS	= $CD89
CURRENTPLAYER	= $CD8A
LOCCOL	= $CD8B
adr.PLRENT	= $CD8C
.var PLRENT	= adr.PLRENT .word
CURRENTMAP	= $CD90
adr.PLGANGSTERS	= $CD91
.var PLGANGSTERS	= adr.PLGANGSTERS .word
adr.PLNGANGSTERS	= $CDB1
.var PLNGANGSTERS	= adr.PLNGANGSTERS .word
DIDFIGHT	= $CDB5
SAVEGAMEMAGIC	= $CDC0
adr.BUF_GANGSTERTEXT1	= $CE70
.var BUF_GANGSTERTEXT1	= adr.BUF_GANGSTERTEXT1 .word
adr.BUF_GANGSTERTEXT2	= $CE98
.var BUF_GANGSTERTEXT2	= adr.BUF_GANGSTERTEXT2 .word
adr.BUF_GANGSTERTEXT3	= $CEC0
.var BUF_GANGSTERTEXT3	= adr.BUF_GANGSTERTEXT3 .word
adr.BUF_GANGSTERTEXT4	= $CEE8
.var BUF_GANGSTERTEXT4	= adr.BUF_GANGSTERTEXT4 .word
adr.BUF_GANGSTERTEXT5	= $CF10
.var BUF_GANGSTERTEXT5	= adr.BUF_GANGSTERTEXT5 .word
adr.BUF_GANGSTERANREDE	= $CF38
.var BUF_GANGSTERANREDE	= adr.BUF_GANGSTERANREDE .word
BUF_GANGSTERSEX	= $CF48
BUF_GANGSTERSTR	= $CF49
BUF_GANGSTERBRUT	= $CF4A
BUF_GANGSTERINT	= $CF4B
BUF_GANGSTERWEAPON	= $CF4C
adr.BUF_GANGSTERNAME	= $CF4D
.var BUF_GANGSTERNAME	= adr.BUF_GANGSTERNAME .word
BUF_GANGSTERPRICE	= $CF5D
adr.GANGSTERNAMES	= [DATAORIGIN+$07BF] .array [32] .word
.var GANGSTERNAMES	= adr.GANGSTERNAMES .word
adr.CARPRICES	= $E700
.var CARPRICES	= adr.CARPRICES .word
adr.CARCARGO	= $E70C
.var CARCARGO	= adr.CARCARGO .word
adr.CARRANGE	= $E712
.var CARRANGE	= adr.CARRANGE .word
adr.WEAPONPRICES	= $E718
.var WEAPONPRICES	= adr.WEAPONPRICES .word
adr.WEAPONREACH	= $E72A
.var WEAPONREACH	= adr.WEAPONREACH .word
adr.WEAPONPRECISION	= $E733
.var WEAPONPRECISION	= adr.WEAPONPRECISION .word
adr.WEAPONEFFECT	= $E73C
.var WEAPONEFFECT	= adr.WEAPONEFFECT .word
adr.WEAPONSOUND	= $E745
.var WEAPONSOUND	= adr.WEAPONSOUND .word
adr.FNTNAME	= $E74E
.var FNTNAME	= adr.FNTNAME .word
adr.WANTED_M_FNAME	= $E75E
.var WANTED_M_FNAME	= adr.WANTED_M_FNAME .word
adr.WANTED_F_FNAME	= $E76E
.var WANTED_F_FNAME	= adr.WANTED_F_FNAME .word
adr.FIGHT_MAP_FNAME	= $E77E
.var FIGHT_MAP_FNAME	= adr.FIGHT_MAP_FNAME .word
adr.GANGSTERFILENAME	= $E78E
.var GANGSTERFILENAME	= adr.GANGSTERFILENAME .word
adr.LOCABANKFNAME	= $E79E
.var LOCABANKFNAME	= adr.LOCABANKFNAME .word
adr.LOCAFORGFNAME	= $E7AE
.var LOCAFORGFNAME	= adr.LOCAFORGFNAME .word
adr.LOCAMONYFNAME	= $E7BE
.var LOCAMONYFNAME	= adr.LOCAMONYFNAME .word
adr.LOCALOANFNAME	= $E7CE
.var LOCALOANFNAME	= adr.LOCALOANFNAME .word
adr.LOCAPOLIFNAME	= $E7DE
.var LOCAPOLIFNAME	= adr.LOCAPOLIFNAME .word
adr.LOCACARSFNAME	= $E7EE
.var LOCACARSFNAME	= adr.LOCACARSFNAME .word
adr.LOCAPUBBFNAME	= $E7FE
.var LOCAPUBBFNAME	= adr.LOCAPUBBFNAME .word
adr.LOCAPUBCFNAME	= $E80E
.var LOCAPUBCFNAME	= adr.LOCAPUBCFNAME .word
adr.LOCASTORFNAME	= $E81E
.var LOCASTORFNAME	= adr.LOCASTORFNAME .word
adr.LOCAHIDEFNAME	= $E82E
.var LOCAHIDEFNAME	= adr.LOCAHIDEFNAME .word
adr.LOCAGAMBFNAME	= $E83E
.var LOCAGAMBFNAME	= adr.LOCAGAMBFNAME .word
adr.LOCASUBWFNAME	= $E84E
.var LOCASUBWFNAME	= adr.LOCASUBWFNAME .word
adr.LOCAARMSFNAME	= $E85E
.var LOCAARMSFNAME	= adr.LOCAARMSFNAME .word
adr.LOCAMAINFNAME	= $E86E
.var LOCAMAINFNAME	= adr.LOCAMAINFNAME .word
adr.LOCAJOBBFNAME	= $E87E
.var LOCAJOBBFNAME	= adr.LOCAJOBBFNAME .word
adr.LOCAMAJOFNAME	= $E88E
.var LOCAMAJOFNAME	= adr.LOCAMAJOFNAME .word
adr.LOCACOURFNAME	= $E89E
.var LOCACOURFNAME	= adr.LOCACOURFNAME .word
adr.LOCACAUGFNAME	= $E8AE
.var LOCACAUGFNAME	= adr.LOCACAUGFNAME .word
adr.LOCAROADFNAME	= $E8BE
.var LOCAROADFNAME	= adr.LOCAROADFNAME .word
adr.LOCAUPDTFNAME	= $E8CE
.var LOCAUPDTFNAME	= adr.LOCAUPDTFNAME .word
adr.LOCASETUFNAME	= $E8DE
.var LOCASETUFNAME	= adr.LOCASETUFNAME .word
adr.LOCACENTFNAME	= $E8EE
.var LOCACENTFNAME	= adr.LOCACENTFNAME .word
adr.LOCACREDFNAME	= $E8FE
.var LOCACREDFNAME	= adr.LOCACREDFNAME .word
adr.RANK_1	= $E90E
.var RANK_1	= adr.RANK_1 .word
adr.RANK_2	= $E91E
.var RANK_2	= adr.RANK_2 .word
adr.RANK_3	= $E92E
.var RANK_3	= adr.RANK_3 .word
adr.RANK_4	= $E93E
.var RANK_4	= adr.RANK_4 .word
adr.RANK_5	= $E94E
.var RANK_5	= adr.RANK_5 .word
adr.RANK_6	= $E95E
.var RANK_6	= adr.RANK_6 .word
adr.RANK_7	= $E96E
.var RANK_7	= adr.RANK_7 .word
adr.RANK_8	= $E97E
.var RANK_8	= adr.RANK_8 .word
adr.RANK_9	= $E98E
.var RANK_9	= adr.RANK_9 .word
adr.RANK_10	= $E99E
.var RANK_10	= adr.RANK_10 .word
adr.RANK_11	= $E9AE
.var RANK_11	= adr.RANK_11 .word
adr.WEAPONNAME_1	= $E9BE
.var WEAPONNAME_1	= adr.WEAPONNAME_1 .word
adr.WEAPONNAME_2	= $E9CE
.var WEAPONNAME_2	= adr.WEAPONNAME_2 .word
adr.WEAPONNAME_3	= $E9DE
.var WEAPONNAME_3	= adr.WEAPONNAME_3 .word
adr.WEAPONNAME_4	= $E9EE
.var WEAPONNAME_4	= adr.WEAPONNAME_4 .word
adr.WEAPONNAME_5	= $E9FE
.var WEAPONNAME_5	= adr.WEAPONNAME_5 .word
adr.WEAPONNAME_6	= $EA0E
.var WEAPONNAME_6	= adr.WEAPONNAME_6 .word
adr.WEAPONNAME_7	= $EA1E
.var WEAPONNAME_7	= adr.WEAPONNAME_7 .word
adr.WEAPONNAME_8	= $EA2E
.var WEAPONNAME_8	= adr.WEAPONNAME_8 .word
adr.WEAPONNAME_9	= $EA3E
.var WEAPONNAME_9	= adr.WEAPONNAME_9 .word
adr.CARNAMES_1	= $EA4E
.var CARNAMES_1	= adr.CARNAMES_1 .word
adr.CARNAMES_2	= $EA5E
.var CARNAMES_2	= adr.CARNAMES_2 .word
adr.CARNAMES_3	= $EA6E
.var CARNAMES_3	= adr.CARNAMES_3 .word
adr.CARNAMES_4	= $EA7E
.var CARNAMES_4	= adr.CARNAMES_4 .word
adr.CARNAMES_5	= $EA8E
.var CARNAMES_5	= adr.CARNAMES_5 .word
adr.CARNAMES_6	= $EA9E
.var CARNAMES_6	= adr.CARNAMES_6 .word
PLAYERPOS_X	= $EAAE
PLAYERPOS_Y	= $EAAF
MAPPOS_X	= $EAB0
MAPPOS_Y	= $EAB1
OLDMAPPOS_X	= $EAB2
OLDMAPPOS_Y	= $EAB3
OLDPLAYERPOS_X	= $EAB4
OLDPLAYERPOS_Y	= $EAB5
adr.FPPOSSTART	= $EAB6
.var FPPOSSTART	= adr.FPPOSSTART .word
MAPCOLORA	= $EAF6
MAPCOLORB	= $EAF7
SPRITEMOVEDIR	= $EAF8
JOYSTICKUSED	= $EAF9
adr.FIGHT_STRING_1	= $EAFA
.var FIGHT_STRING_1	= adr.FIGHT_STRING_1 .word
adr.FIGHT_STRING_2	= $EB0A
.var FIGHT_STRING_2	= adr.FIGHT_STRING_2 .word
adr.FIGHT_STRING_3	= $EB1A
.var FIGHT_STRING_3	= adr.FIGHT_STRING_3 .word
adr.FIGHT_STRING_4	= $EB2A
.var FIGHT_STRING_4	= adr.FIGHT_STRING_4 .word
adr.FIGHT_STRING_5	= $EB3A
.var FIGHT_STRING_5	= adr.FIGHT_STRING_5 .word
adr.FIGHT_STRING_6	= $EB4A
.var FIGHT_STRING_6	= adr.FIGHT_STRING_6 .word
adr.WAITKEY_STRING	= $EB5A
.var WAITKEY_STRING	= adr.WAITKEY_STRING .word
adr.MAP_STRING_WEAPON	= $EB82
.var MAP_STRING_WEAPON	= adr.MAP_STRING_WEAPON .word
adr.MAP_STRING_GANGSTER	= $EB92
.var MAP_STRING_GANGSTER	= adr.MAP_STRING_GANGSTER .word
adr.MAP_STRING_RENT	= $EBA2
.var MAP_STRING_RENT	= adr.MAP_STRING_RENT .word
adr.MAP_STRING_BRIBE	= $EBB2
.var MAP_STRING_BRIBE	= adr.MAP_STRING_BRIBE .word
adr.MAP_STRING_CAR	= $EBC2
.var MAP_STRING_CAR	= adr.MAP_STRING_CAR .word
adr.MAP_STRING_STEPS	= $EBD2
.var MAP_STRING_STEPS	= adr.MAP_STRING_STEPS .word
adr.MAP_STRING_CARGO	= $EBE2
.var MAP_STRING_CARGO	= adr.MAP_STRING_CARGO .word
adr.MAP_STRING_MONEY	= $EBF2
.var MAP_STRING_MONEY	= adr.MAP_STRING_MONEY .word
adr.MAP_STRING_CREDIT	= $EC02
.var MAP_STRING_CREDIT	= adr.MAP_STRING_CREDIT .word
adr.FIGHT_POLICE_STRING_1	= $EC12
.var FIGHT_POLICE_STRING_1	= adr.FIGHT_POLICE_STRING_1 .word
adr.FIGHT_POLICE_STRING_2	= $EC22
.var FIGHT_POLICE_STRING_2	= adr.FIGHT_POLICE_STRING_2 .word
adr.NOT_ENOUGH_MONEY_STRING	= $EC32
.var NOT_ENOUGH_MONEY_STRING	= adr.NOT_ENOUGH_MONEY_STRING .word
adr.YOUR_CHOICE_STRING	= $EC5A
.var YOUR_CHOICE_STRING	= adr.YOUR_CHOICE_STRING .word
adr.POLICE_STRING_1	= $EC6A
.var POLICE_STRING_1	= adr.POLICE_STRING_1 .word
LEN_STRING_BRIBE	= $EC92
adr.FIGHT_STRING_7	= $EC93
.var FIGHT_STRING_7	= adr.FIGHT_STRING_7 .word
adr.RANKNAMES	= [DATAORIGIN+$07FF] .array [11] .word
.var RANKNAMES	= adr.RANKNAMES .word
adr.WEAPONNAMES	= [DATAORIGIN+$0815] .array [9] .word
.var WEAPONNAMES	= adr.WEAPONNAMES .word
adr.CARNAMES	= [DATAORIGIN+$0827] .array [6] .word
.var CARNAMES	= adr.CARNAMES .word
adr.E7FNAME	= $0C4D
.var E7FNAME	= adr.E7FNAME .word
adr.SAVEFNAME	= $0C59
.var SAVEFNAME	= adr.SAVEFNAME .word
adr.FINALFNAME	= [DATAORIGIN+$0875] .array [33]
.var FINALFNAME	= adr.FINALFNAME .word
MAPRELOADED	= DATAORIGIN+$0896
SPRITEOFFSET	= DATAORIGIN+$0897
SHOWBITMAPS	= DATAORIGIN+$0898
STICK	= $0278
PCOLR0	= $D012
PCOLR1	= $D013
PCOLR2	= $D014
PCOLR3	= $D015
N_KEYCODE	= $23
N_CHARCODE	= $2E
Y_KEYCODE	= $2D
Y_CHARCODE	= $34
F_KEYCODE	= $05
F_CHARCODE	= $2B
M_KEYCODE	= $25
M_CHARCODE	= $2D
SHORT_GAME_KEYCODE	= $05
SHORT_GAME_CHARCODE	= $2B
LONG_GAME_KEYCODE	= $3A
LONG_GAME_CHARCODE	= $24
SHOOTING_RANGE_KEYCODE	= $3E
SHOOTING_RANGE_CHARCODE	= $33
TRAINING_CAMP_KEYCODE	= $08
TRAINING_CAMP_CHARCODE	= $2F
adr.HEALTH_CHAR	= CODEORIGIN+$0065
.var HEALTH_CHAR	= adr.HEALTH_CHAR .word
adr.WEAPON_CHAR	= CODEORIGIN+$0068
.var WEAPON_CHAR	= adr.WEAPON_CHAR .word
LEN_STRING_GANGSTER	= $0C
FAST_ADJUST_DELAY	= $10
SAVE_SECTOR	= $07
SAVE_BASEBANK	= $38
SAVE_SIZE	= $06DF
SAVE_PAGES	= $08
SAVE_SLOTS	= $20
CONSOLESTATE	= DATAORIGIN+$0AE5
LAST_TRAIN	= $02
BANK_	= $01
FORGERY_	= $02
MONEYTRANSPORT_	= $03
LOANSHARK_	= $04
POLICE_	= $05
CARDEALER_	= $06
PUB_	= $07
MAILTRAIN_	= $08
STORE_	= $09
HIDEOUT_	= $0A
GAMBLING_	= $0B
SUBWAY_	= $0C
ARMSDEALER_	= $0D
TITLE_	= $0E
NONE_	= $0F
STREET_	= $10
END_TURN_	= $11
LOSTFIGHT_	= $12
MAIN_	= $13
PUB2_	= $14
UPDATES_	= $15
JOB_	= $16
CENTRALSTATION_	= $17
MAJOR_	= $18
COURT_	= $19
CAUGHT_	= $1A
ROADBLOCK_	= $1B
SETUP_	= $1C
RESET_	= $1D
CREDITS_	= $1E
CURRENTSUBLOCATION	= DATAORIGIN+$0AE7
adr.CURRENTSUBLOCATIONNAME	= [DATAORIGIN+$0AE8] .array [41]
.var CURRENTSUBLOCATIONNAME	= adr.CURRENTSUBLOCATIONNAME .word
MOVESPEED	= $01
SPRITESIZE	= $30
adr.SAFECLMFNAME	= $0C8E
.var SAFECLMFNAME	= adr.SAFECLMFNAME .word
K	= DATAORIGIN+$0CCC
OUTCOME	= DATAORIGIN+$0CCD
CH	= DATAORIGIN+$0CCE
@CASETMP_0018	= DATAORIGIN+$0CD0
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

.local	@DEFINES
ATARI
CART
LOCATION_PL
CHEAT
CPU_6502
ROMOFF
NOROMFONT
BASICOFF
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.MATH.@UnitInit
	jsr MAIN.MATH.@UnitInit
	.fi

	.ifdef MAIN.PMG.@UnitInit
	jsr MAIN.PMG.@UnitInit
	.fi

	.ifdef MAIN.XBIOS.@UnitInit
	jsr MAIN.XBIOS.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.B_UTILS.@UnitInit
	jsr MAIN.B_UTILS.@UnitInit
	.fi

	.ifdef MAIN.MISC.@UnitInit
	jsr MAIN.MISC.@UnitInit
	.fi

	.ifdef MAIN.RMT.@UnitInit
	jsr MAIN.RMT.@UnitInit
	.fi

	.ifdef MAIN.DOS.@UnitInit
	jsr MAIN.DOS.@UnitInit
	.fi

	.ifdef MAIN.STRUTILS.@UnitInit
	jsr MAIN.STRUTILS.@UnitInit
	.fi

	.ifdef MAIN.SYSUTILS.@UnitInit
	jsr MAIN.SYSUTILS.@UnitInit
	.fi

	.ifdef MAIN.B_SYSTEM.@UnitInit
	jsr MAIN.B_SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.B_CRT.@UnitInit
	jsr MAIN.B_CRT.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.MATH) > 0
	.print 'MATH: ',MAIN.MATH,'..',MAIN.MATH+.SIZEOF(MAIN.MATH)-1
	eif

	ift .SIZEOF(MAIN.PMG) > 0
	.print 'PMG: ',MAIN.PMG,'..',MAIN.PMG+.SIZEOF(MAIN.PMG)-1
	eif

	ift .SIZEOF(MAIN.XBIOS) > 0
	.print 'XBIOS: ',MAIN.XBIOS,'..',MAIN.XBIOS+.SIZEOF(MAIN.XBIOS)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.B_UTILS) > 0
	.print 'B_UTILS: ',MAIN.B_UTILS,'..',MAIN.B_UTILS+.SIZEOF(MAIN.B_UTILS)-1
	eif

	ift .SIZEOF(MAIN.MISC) > 0
	.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
	eif

	ift .SIZEOF(MAIN.RMT) > 0
	.print 'RMT: ',MAIN.RMT,'..',MAIN.RMT+.SIZEOF(MAIN.RMT)-1
	eif

	ift .SIZEOF(MAIN.DOS) > 0
	.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
	eif

	ift .SIZEOF(MAIN.STRUTILS) > 0
	.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
	eif

	ift .SIZEOF(MAIN.SYSUTILS) > 0
	.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
	eif

	ift .SIZEOF(MAIN.B_SYSTEM) > 0
	.print 'B_SYSTEM: ',MAIN.B_SYSTEM,'..',MAIN.B_SYSTEM+.SIZEOF(MAIN.B_SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.B_CRT) > 0
	.print 'B_CRT: ',MAIN.B_CRT,'..',MAIN.B_CRT+.SIZEOF(MAIN.B_CRT)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

	ift .SIZEOF(MAIN.@RESOURCE)>0
.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
	eif

@end

.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $02 $08 $80 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  <[CODEORIGIN+$0001] >[CODEORIGIN+$0001] $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $1F $1C $1F $1E $1F $1E  $1F $1F $1E $1F $1E $1F $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $85 $E5 $95 $E5  $A5 $E5 $B5 $E5 $C5 $E5 $D5 $E5  $E5 $E5 $F5 $E5 $05 $E6 $15 $E6
.by  $25 $E6 $35 $E6 $35 $E6 $35 $E6  $35 $E6 $35 $E6 $35 $E6 $35 $E6  $45 $E6 $55 $E6 $65 $E6 $75 $E6
.by  $85 $E6 $95 $E6 $A5 $E6 $B5 $E6  $C5 $E6 $D5 $E6 $D5 $E6 $D5 $E6  $D5 $E6 $D5 $E6 $D5 $E6 $D5 $E6
.by  $00 $00 $00 $C8 $C0 $F0 $C0 $18  $C1 $40 $C1 $68 $C1 $90 $C1 $B8  $C1 $E0 $C1 $08 $C2 $30 $C2 $28
.by  $C0 $50 $C0 $78 $C0 $A0 $C0 $44  $CA $54 $CA $64 $CA $74 $CA $C8  $CA $D8 $CA $E8 $CA $F8 $CA $08
.by  $CB $18 $CB $28 $CB $38 $CB $48  $CB $58 $CB $68 $CB $78 $CB $88  $CB $98 $CB $A8 $CB $B8 $CB $C8
.by  $CB $D8 $CB $E8 $CB $F8 $CB $08  $CC $18 $CC $28 $CC $38 $CC $48  $CC $58 $CC $68 $CC $78 $CC $88
.by  $CC $98 $CC $A8 $CC $B8 $CC $0E  $E9 $1E $E9 $2E $E9 $3E $E9 $4E  $E9 $5E $E9 $6E $E9 $7E $E9 $8E
.by  $E9 $9E $E9 $AE $E9 $BE $E9 $CE  $E9 $DE $E9 $EE $E9 $FE $E9 $0E  $EA $1E $EA $2E $EA $3E $EA $4E
.by  $EA $5E $EA $6E $EA $7E $EA $8E  $EA $9E $EA

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 3283

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	ert DATAORIGIN<@end,'DATA memory overlap'

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $40 $41 $42 $43 $44 $45 $46 $47  $48 $49 $4A $4B $4C $4D $4E $4F  $50 $51 $52 $53 $54 $55 $56 $57
.by  $58 $59 $5A $61 $62 $63 $64 $65  $66 $67 $68 $69 $6A $6B $6C $6D  $6E $6F $70 $71 $72 $73 $74 $75
.by  $76 $77 $78 $79 $7A $30 $31 $32  $33 $34 $35 $36 $37 $38 $39 $2B  $2F $00 $04 $54 $52 $55 $45 $05
.by  $46 $41 $4C $53 $45 $0B $45 $37  $30 $30 $50 $41 $47 $45 $41 $50  $4C $0B $53 $41 $56 $45 $47 $41
.by  $4D $45 $44 $41 $54 $02 $25 $1A  $02 $22 $1A $02 $00 $00 $04 $00  $00 $00 $00 $02 $04 $01 $03 $00
.by  $0D $00 $02 $33 $1A $03 $00 $29  $1A $03 $00 $22 $1A $02 $0C $00  $02 $04 $00 $02 $09 $00 $0B $53
.by  $41 $46 $45 $43 $42 $4D $50 $41  $50 $4C $02 $00 $08 $02 $04 $09  $02 $04 $0E $02 $09 $1F $04 $04
.by  $09 $1F $00 $03 $0E $0E $0E $03  $08 $10 $0D $02 $01 $01 $03 $00  $00 $00 $03 $00 $2D $09 $03 $09
.by  $1F $00 $0B $46 $49 $4E $41 $47  $50 $49 $43 $41 $50 $4C $0B $46  $4D $55 $53 $42 $38 $30 $30 $41
.by  $50 $4C $0B $50 $4C $41 $59 $42  $30 $52 $5A $41 $50 $4C $6C $6A  $3B $FF $FF $6B $2B $2A $6F $FF
.by  $70 $75 $9B $69 $2D $3D $76 $FF  $63 $FF $FF $62 $78 $7A $34 $FF  $33 $36 $1B $35 $32 $31 $2C $20
.by  $2E $6E $FF $6D $2F $81 $72 $FF  $65 $79 $7F $74 $77 $71 $39 $FF  $30 $37 $7E $38 $3E $FF $66 $68
.by  $64 $FF $82 $67 $73 $61 $4C $4A  $3A $FF $FF $4B $5C $5E $4F $FF  $50 $55 $FF $49 $5F $7C $56 $FF
.by  $43 $FF $FF $42 $58 $5A $24 $FF  $23 $26 $FF $25 $22 $21 $5B $3B  $5D $4E $FF $4D $3F $FF $52 $FF
.by  $45 $59 $FF $54 $57 $51 $28 $FF  $29 $27 $FF $40 $FF $FF $46 $48  $44 $FF $FF $47 $53 $41 $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF
.endm

	end
